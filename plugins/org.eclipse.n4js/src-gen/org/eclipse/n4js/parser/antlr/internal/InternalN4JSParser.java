package org.eclipse.n4js.parser.antlr.internal;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.services.N4JSGrammarAccess;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Namespace", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_HASH_BANG", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_IDENTIFIER_PART", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_IDENTIFIER", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_INT", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_HEX_INT", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=22;
    public static final int Enum=46;
    public static final int RULE_REGEX_CHAR=118;
    public static final int Import=24;
    public static final int Var=65;
    public static final int RULE_ACTUAL_TEMPLATE_END=126;
    public static final int Break=33;
    public static final int False=37;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=123;
    public static final int Throw=39;
    public static final int Private=20;
    public static final int Extends=18;
    public static final int RULE_REGEX_TAIL=122;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=54;
    public static final int GreaterThanSign=104;
    public static final int RULE_TEMPLATE_HEAD=124;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=127;
    public static final int RULE_STRUCTMODSUFFIX=132;
    public static final int RULE_EOL=153;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=125;
    public static final int Namespace=10;
    public static final int Out=62;
    public static final int RULE_ZWNJ=162;
    public static final int Project=21;
    public static final int EqualsSignEqualsSign=77;
    public static final int RULE_HASH_BANG=115;
    public static final int Switch=28;
    public static final int RULE_OCTAL_INT=142;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=136;
    public static final int Get=59;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int LessThanSignLessThanSign=75;
    public static final int If=84;
    public static final int RULE_REGEX_START=121;
    public static final int Finally=19;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=63;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=34;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=145;
    public static final int RULE_TEMPLATE_MIDDLE=128;
    public static final int RULE_EXPONENT_PART=138;
    public static final int Union=40;
    public static final int Case=44;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=117;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int Target=29;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int RULE_IDENTIFIER_PART=119;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=23;
    public static final int LessThanSignEqualsSign=76;
    public static final int CommercialAtCommercialAt=80;
    public static final int Solidus=99;
    public static final int RightCurlyBracket=112;
    public static final int PercentSignEqualsSign=67;
    public static final int RULE_HEX_INT=144;
    public static final int FullStop=98;
    public static final int Constructor=5;
    public static final int Abstract=12;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=146;
    public static final int Default=17;
    public static final int CommercialAt=106;
    public static final int Semicolon=101;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=114;
    public static final int Type=51;
    public static final int PlusSignPlusSign=71;
    public static final int QuestionMark=105;
    public static final int Else=45;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=42;
    public static final int ExclamationMarkEqualsSign=66;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=130;
    public static final int HyphenMinusHyphenMinus=73;
    public static final int New=61;
    public static final int Null=48;
    public static final int AmpersandEqualsSign=69;
    public static final int Typeof=30;
    public static final int SolidusEqualsSign=74;
    public static final int True=50;
    public static final int FullStopFullStopFullStop=55;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=133;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=38;
    public static final int Async=31;
    public static final int This=43;
    public static final int Try=64;
    public static final int Ampersand=91;
    public static final int AsteriskEqualsSign=70;
    public static final int Void=52;
    public static final int VerticalLineEqualsSign=87;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=141;
    public static final int Protected=11;
    public static final int Const=36;
    public static final int RULE_ACTUAL_REGEX_TAIL=120;
    public static final int For=58;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Public=25;
    public static final int Do=83;
    public static final int RULE_LEGACY_OCTAL_INT=143;
    public static final int RULE_DOUBLE_STRING_CHAR=147;
    public static final int EqualsSignEqualsSignEqualsSign=57;
    public static final int RULE_TEMPLATE_END=129;
    public static final int This_1=49;
    public static final int RULE_NO_LINE_TERMINATOR=131;
    public static final int RULE_DOT_DOT=164;
    public static final int External=15;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=35;
    public static final int Static=27;
    public static final int Debugger=14;
    public static final int RULE_SINGLE_STRING_CHAR=148;
    public static final int LessThanSignLessThanSignEqualsSign=56;
    public static final int RULE_INT_SUFFIX=140;
    public static final int RULE_IDENTIFIER=134;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=149;
    public static final int Continue=13;
    public static final int With=53;
    public static final int RULE_SL_COMMENT=152;
    public static final int Function=16;
    public static final int EqualsSign=103;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=68;
    public static final int RULE_DOUBLE=139;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=116;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=72;
    public static final int Return=26;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int While=41;
    public static final int From=47;
    public static final int RULE_ANY_OTHER=168;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=137;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=135;
    public static final int Let=60;
    public static final int Await=32;
        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
    protected void setInRegularExpression() {}
    protected void setInTemplateSegment() {}
    protected boolean forcedRewind(int position) { return true; } // overridden in subtype
    protected void promoteEOL() {} // overridden in subtype
    protected void addASIMessage() {} // overridden in subtype
    protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
     	private N4JSGrammarAccess grammarAccess;
        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
        @Override
        protected String getFirstRuleName() {
        	return "Script";
       	}
       	@Override
       	protected N4JSGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScript = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScript; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;
        Token lv_hashbang_1_0=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_scriptElements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getScriptAccess().getScriptAction_0(),
              					current);
            }
            }
            int alt1=2;
            int LA1_0 = input.LA(1);
            if ( (LA1_0==RULE_HASH_BANG) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    {
                    {
                    lv_hashbang_1_0=(Token)match(input,RULE_HASH_BANG,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hashbang_1_0, grammarAccess.getScriptAccess().getHashbangHASH_BANGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScriptRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"hashbang",
                      						lv_hashbang_1_0,
                      						"org.eclipse.n4js.N4JS.HASH_BANG");
                    }
                    }
                    }
                    break;
            }
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==CommercialAtCommercialAt) ) {
                    alt2=1;
                }
                else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_INT||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_BINARY_INT && LA2_0<=RULE_SCIENTIFIC_INT)||LA2_0==RULE_STRING) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getAnnotationsScriptAnnotationParserRuleCall_2_0_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_annotations_2_0=ruleScriptAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"annotations",
            	      							lv_annotations_2_0,
            	      							"org.eclipse.n4js.N4JS.ScriptAnnotation");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getScriptElementsScriptElementParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_scriptElements_3_0=ruleScriptElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"scriptElements",
            	      							lv_scriptElements_3_0,
            	      							"org.eclipse.n4js.N4JS.ScriptElement");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptElement=ruleScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedScriptElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_ImportDeclaration_6 = null;
        EObject this_ExportDeclaration_7 = null;
        EObject this_RootStatement_8 = null;
        	enterRule();
        try {
            {
            int alt3=9;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclaration_6=ruleImportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_7=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_8=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4NamespaceDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4NamespaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4NamespaceDeclaration=ruleN4NamespaceDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4NamespaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_ownedElementsRaw_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4NamespaceDeclarationAccess().getN4NamespaceDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);
                if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                    alt4=1;
                }
                switch (alt4) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop4;
                }
            } while (true);
            otherlv_2=(Token)match(input,Namespace,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4NamespaceDeclarationAccess().getNamespaceKeyword_0_0_2());
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( ((LA5_0>=Intersection && LA5_0<=Implements)||(LA5_0>=Promisify && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Target||(LA5_0>=Async && LA5_0<=Await)||LA5_0==Union||(LA5_0>=Yield && LA5_0<=This)||LA5_0==From||LA5_0==Type||(LA5_0>=Get && LA5_0<=Let)||(LA5_0>=Out && LA5_0<=Set)||LA5_0==As||LA5_0==Of||LA5_0==RULE_IDENTIFIER) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4NamespaceDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);
                if ( ((LA6_0>=Interface && LA6_0<=Abstract)||LA6_0==External||(LA6_0>=Private && LA6_0<=Project)||LA6_0==Export||LA6_0==Public||LA6_0==Static||(LA6_0>=Class && LA6_0<=Const)||LA6_0==Enum||LA6_0==Type||LA6_0==CommercialAt) ) {
                    alt6=1;
                }
                switch (alt6) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getOwnedElementsRawNamespaceElementParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_ownedElementsRaw_5_0=ruleNamespaceElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedElementsRaw",
            	      						lv_ownedElementsRaw_5_0,
            	      						"org.eclipse.n4js.N4JS.NamespaceElement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop6;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getN4NamespaceDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_ownedElementsRaw_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4NamespaceDeclarationAccess().getN4NamespaceDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( ((LA7_0>=Protected && LA7_0<=Abstract)||LA7_0==External||(LA7_0>=Private && LA7_0<=Project)||LA7_0==Public||LA7_0==Static||LA7_0==Const) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            otherlv_2=(Token)match(input,Namespace,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4NamespaceDeclarationAccess().getNamespaceKeyword_0_0_2());
            }
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( ((LA8_0>=Intersection && LA8_0<=Implements)||(LA8_0>=Promisify && LA8_0<=Abstract)||LA8_0==External||(LA8_0>=Private && LA8_0<=Project)||LA8_0==Public||LA8_0==Static||LA8_0==Target||(LA8_0>=Async && LA8_0<=Await)||LA8_0==Union||LA8_0==This||LA8_0==From||LA8_0==Type||(LA8_0>=Get && LA8_0<=Let)||(LA8_0>=Out && LA8_0<=Set)||LA8_0==As||LA8_0==Of||LA8_0==RULE_IDENTIFIER) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4NamespaceDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);
                if ( ((LA9_0>=Interface && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Export||LA9_0==Public||LA9_0==Static||(LA9_0>=Class && LA9_0<=Const)||LA9_0==Enum||LA9_0==Type||LA9_0==CommercialAt) ) {
                    alt9=1;
                }
                switch (alt9) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getOwnedElementsRawNamespaceElementParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_ownedElementsRaw_5_0=norm1_NamespaceElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedElementsRaw",
            	      						lv_ownedElementsRaw_5_0,
            	      						"org.eclipse.n4js.N4JS.NamespaceElement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop9;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getN4NamespaceDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceElement=ruleNamespaceElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedScriptElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_ExportDeclaration_6 = null;
        	enterRule();
        try {
            {
            int alt10=7;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getExportDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_6=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_NamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedScriptElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_ExportDeclaration_6 = null;
        	enterRule();
        try {
            {
            int alt11=7;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=norm1_N4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=norm1_N4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=norm1_N4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=norm1_N4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=norm1_N4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getExportDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_6=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedScriptElement=ruleAnnotatedScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_11=null;
        Token otherlv_18=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token otherlv_35=null;
        Token otherlv_38=null;
        EObject this_AnnotationList_0 = null;
        EObject this_ExportDeclarationImpl_2 = null;
        EObject this_ImportDeclarationImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        Enumerator lv_declaredModifiers_10_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_12_0 = null;
        AntlrDatatypeRuleToken lv_name_13_0 = null;
        EObject this_TypeParameters_14 = null;
        EObject this_ClassExtendsImplements_15 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_19_0 = null;
        AntlrDatatypeRuleToken lv_name_20_0 = null;
        EObject this_TypeParameters_21 = null;
        EObject this_InterfaceExtendsList_22 = null;
        EObject this_Members_23 = null;
        Enumerator lv_declaredModifiers_25_0 = null;
        AntlrDatatypeRuleToken lv_name_27_0 = null;
        EObject lv_literals_29_0 = null;
        EObject lv_literals_31_0 = null;
        Enumerator lv_declaredModifiers_34_0 = null;
        AntlrDatatypeRuleToken lv_name_36_0 = null;
        EObject this_TypeParameters_37 = null;
        EObject lv_declaredTypeRefNode_39_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_8);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt26=6;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclarationImpl_2=ruleExportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportDeclarationImpl_2;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclarationImpl_4=ruleImportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ImportDeclarationImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getFunctionDeclarationAnnotationListAction_1_2_0(),
                      							current);
                    }
                    }
                    {
                    {
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);
                        if ( ((LA12_0>=Protected && LA12_0<=Abstract)||LA12_0==External||(LA12_0>=Private && LA12_0<=Project)||LA12_0==Public||LA12_0==Static||LA12_0==Const) ) {
                            alt12=1;
                        }
                        switch (alt12) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0_0_0());
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_6_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop12;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1());
                    }
                    pushFollow(FOLLOW_9);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_FunctionImpl_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    int alt21=2;
                    alt21 = dfa21.predict(input);
                    switch (alt21) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4ClassDeclarationAnnotationListAction_1_3_0_0_0(),
                              									current);
                            }
                            }
                            loop13:
                            do {
                                int alt13=2;
                                int LA13_0 = input.LA(1);
                                if ( ((LA13_0>=Protected && LA13_0<=Abstract)||LA13_0==External||(LA13_0>=Private && LA13_0<=Project)||LA13_0==Public||LA13_0==Static||LA13_0==Const) ) {
                                    alt13=1;
                                }
                                switch (alt13) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_10_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_10_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop13;
                                }
                            } while (true);
                            otherlv_11=(Token)match(input,Class,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_11, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                            }
                            int alt14=2;
                            int LA14_0 = input.LA(1);
                            if ( (LA14_0==Tilde) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_12);
                                    lv_typingStrategy_12_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_12_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_0_4_0());
                            }
                            pushFollow(FOLLOW_13);
                            lv_name_13_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_13_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt15=2;
                            int LA15_0 = input.LA(1);
                            if ( (LA15_0==LessThanSign) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_3_0_0_5());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_TypeParameters_14=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_14;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);
                            if ( (LA16_0==Implements||LA16_0==Extends) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_6());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_ClassExtendsImplements_15=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_15;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_3_0_1_0(),
                              									current);
                            }
                            }
                            loop17:
                            do {
                                int alt17=2;
                                int LA17_0 = input.LA(1);
                                if ( ((LA17_0>=Protected && LA17_0<=Abstract)||LA17_0==External||(LA17_0>=Private && LA17_0<=Project)||LA17_0==Public||LA17_0==Static||LA17_0==Const) ) {
                                    alt17=1;
                                }
                                switch (alt17) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_14);
                            	    lv_declaredModifiers_17_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_17_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop17;
                                }
                            } while (true);
                            otherlv_18=(Token)match(input,Interface,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_18, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                            }
                            int alt18=2;
                            int LA18_0 = input.LA(1);
                            if ( (LA18_0==Tilde) ) {
                                alt18=1;
                            }
                            switch (alt18) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_12);
                                    lv_typingStrategy_19_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_19_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_1_4_0());
                            }
                            pushFollow(FOLLOW_13);
                            lv_name_20_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_20_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt19=2;
                            int LA19_0 = input.LA(1);
                            if ( (LA19_0==LessThanSign) ) {
                                alt19=1;
                            }
                            switch (alt19) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_3_0_1_5());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_TypeParameters_21=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_21;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt20=2;
                            int LA20_0 = input.LA(1);
                            if ( (LA20_0==Implements||LA20_0==Extends) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_6());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_InterfaceExtendsList_22=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_22;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_23=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_23;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4EnumDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( ((LA22_0>=Protected && LA22_0<=Abstract)||LA22_0==External||(LA22_0>=Private && LA22_0<=Project)||LA22_0==Public||LA22_0==Static||LA22_0==Const) ) {
                            alt22=1;
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_declaredModifiers_25_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_25_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    otherlv_26=(Token)match(input,Enum,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_26, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_27_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_27_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_28=(Token)match(input,LeftCurlyBracket,FOLLOW_16); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_5_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_literals_29_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_29_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);
                        if ( (LA23_0==Comma) ) {
                            alt23=1;
                        }
                        switch (alt23) {
                    	case 1 :
                    	    {
                    	    otherlv_30=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_30, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_literals_31_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_31_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop23;
                        }
                    } while (true);
                    otherlv_32=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_32, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4TypeAliasDeclarationAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);
                        if ( ((LA24_0>=Protected && LA24_0<=Abstract)||LA24_0==External||(LA24_0>=Private && LA24_0<=Project)||LA24_0==Public||LA24_0==Static) ) {
                            alt24=1;
                        }
                        switch (alt24) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_1_5_1_0());
                    	    }
                    	    pushFollow(FOLLOW_18);
                    	    lv_declaredModifiers_34_0=ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_34_0,
                    	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,Type,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedScriptElementAccess().getTypeKeyword_1_5_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_5_3_0());
                    }
                    pushFollow(FOLLOW_19);
                    lv_name_36_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_36_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt25=2;
                    int LA25_0 = input.LA(1);
                    if ( (LA25_0==LessThanSign) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_5_4());
                            }
                            pushFollow(FOLLOW_20);
                            this_TypeParameters_37=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_TypeParameters_37;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_38=(Token)match(input,EqualsSign,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_38, grammarAccess.getAnnotatedScriptElementAccess().getEqualsSignKeyword_1_5_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_5_6_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRefNode_39_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_39_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportDeclaration=ruleExportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ExportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportDeclarationAccess().getExportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ExportDeclarationImpl_1=ruleExportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_wildcardExport_1_0=null;
        Token lv_defaultExport_8_0=null;
        EObject this_ExportFromClause_2 = null;
        EObject this_ExportClause_4 = null;
        EObject this_ExportFromClause_5 = null;
        EObject lv_exportedElement_7_0 = null;
        EObject lv_exportedElement_9_0 = null;
        EObject lv_defaultExportedExpression_10_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Export,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
            }
            int alt29=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt29=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt29=2;
                }
                break;
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Type:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt29=3;
                }
                break;
            case Default:
                {
                alt29=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);
                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_wildcardExport_1_0=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_wildcardExport_1_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "wildcardExport", lv_wildcardExport_1_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_24);
                    this_ExportFromClause_2=ruleExportFromClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportFromClause_2;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_25);
                    this_ExportClause_4=ruleExportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportClause_4;
                      					afterParserOrEnumRuleCall();
                    }
                    int alt27=2;
                    int LA27_0 = input.LA(1);
                    if ( (LA27_0==From) && (synpred25_InternalN4JSParser())) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                              						}
                              						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1());
                            }
                            pushFollow(FOLLOW_24);
                            this_ExportFromClause_5=ruleExportFromClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ExportFromClause_5;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_exportedElement_7_0=ruleExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"exportedElement",
                      							lv_exportedElement_7_0,
                      							"org.eclipse.n4js.N4JS.ExportableElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    lv_defaultExport_8_0=(Token)match(input,Default,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_defaultExport_8_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "defaultExport", lv_defaultExport_8_0 != null, "default");
                    }
                    }
                    }
                    int alt28=2;
                    alt28 = dfa28.predict(input);
                    switch (alt28) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_3_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_exportedElement_9_0=ruleExportableElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              								}
                              								set(
                              									current,
                              									"exportedElement",
                              									lv_exportedElement_9_0,
                              									"org.eclipse.n4js.N4JS.ExportableElement");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0());
                            }
                            pushFollow(FOLLOW_24);
                            lv_defaultExportedExpression_10_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              									}
                              									set(
                              										current,
                              										"defaultExportedExpression",
                              										lv_defaultExportedExpression_10_0,
                              										"org.eclipse.n4js.N4JS.AssignmentExpression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            ruleSemi();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportFromClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,From,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getExportFromClauseRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportFromClauseAccess().getReexportedFromTModuleCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_namedExports_1_0 = null;
        EObject lv_namedExports_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( ((LA32_0>=Intersection && LA32_0<=Implements)||(LA32_0>=Promisify && LA32_0<=Abstract)||LA32_0==External||(LA32_0>=Private && LA32_0<=Project)||LA32_0==Public||LA32_0==Static||LA32_0==Target||(LA32_0>=Async && LA32_0<=Await)||LA32_0==Union||(LA32_0>=Yield && LA32_0<=This)||LA32_0==From||LA32_0==Type||(LA32_0>=Get && LA32_0<=Let)||(LA32_0>=Out && LA32_0<=Set)||LA32_0==As||LA32_0==Of||LA32_0==RULE_IDENTIFIER) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_namedExports_1_0=ruleExportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportClauseRule());
                      						}
                      						add(
                      							current,
                      							"namedExports",
                      							lv_namedExports_1_0,
                      							"org.eclipse.n4js.N4JS.ExportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);
                        if ( (LA30_0==Comma) ) {
                            int LA30_1 = input.LA(2);
                            if ( ((LA30_1>=Intersection && LA30_1<=Implements)||(LA30_1>=Promisify && LA30_1<=Abstract)||LA30_1==External||(LA30_1>=Private && LA30_1<=Project)||LA30_1==Public||LA30_1==Static||LA30_1==Target||(LA30_1>=Async && LA30_1<=Await)||LA30_1==Union||(LA30_1>=Yield && LA30_1<=This)||LA30_1==From||LA30_1==Type||(LA30_1>=Get && LA30_1<=Let)||(LA30_1>=Out && LA30_1<=Set)||LA30_1==As||LA30_1==Of||LA30_1==RULE_IDENTIFIER) ) {
                                alt30=1;
                            }
                        }
                        switch (alt30) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_namedExports_3_0=ruleExportSpecifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExportClauseRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"namedExports",
                    	      								lv_namedExports_3_0,
                    	      								"org.eclipse.n4js.N4JS.ExportSpecifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop30;
                        }
                    } while (true);
                    int alt31=2;
                    int LA31_0 = input.LA(1);
                    if ( (LA31_0==Comma) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            {
                            otherlv_4=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_4, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportSpecifier=ruleExportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_element_0_0 = null;
        AntlrDatatypeRuleToken lv_alias_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportSpecifierAccess().getElementIdentifierRefParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_30);
            lv_element_0_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
              					}
              					set(
              						current,
              						"element",
              						lv_element_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==As) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,As,FOLLOW_16); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportableElement=ruleExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedExportableElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_FunctionDeclaration_6 = null;
        EObject this_ExportedVariableStatement_7 = null;
        	enterRule();
        try {
            {
            int alt34=8;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExportableElement_0=ruleAnnotatedExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedExportableElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_6=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableStatement_7=ruleExportedVariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExportableElement=ruleAnnotatedExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_9=null;
        Token otherlv_14=null;
        Token otherlv_21=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_38=null;
        Token otherlv_41=null;
        EObject this_AnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject this_FunctionImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        Enumerator lv_varStmtKeyword_7_0 = null;
        EObject lv_varDeclsOrBindings_8_0 = null;
        EObject lv_varDeclsOrBindings_10_0 = null;
        Enumerator lv_declaredModifiers_13_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;
        AntlrDatatypeRuleToken lv_name_16_0 = null;
        EObject this_TypeParameters_17 = null;
        EObject this_ClassExtendsImplements_18 = null;
        Enumerator lv_declaredModifiers_20_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_22_0 = null;
        AntlrDatatypeRuleToken lv_name_23_0 = null;
        EObject this_TypeParameters_24 = null;
        EObject this_InterfaceExtendsList_25 = null;
        EObject this_Members_26 = null;
        Enumerator lv_declaredModifiers_28_0 = null;
        AntlrDatatypeRuleToken lv_name_30_0 = null;
        EObject lv_literals_32_0 = null;
        EObject lv_literals_34_0 = null;
        Enumerator lv_declaredModifiers_37_0 = null;
        AntlrDatatypeRuleToken lv_name_39_0 = null;
        EObject this_TypeParameters_40 = null;
        EObject lv_declaredTypeRefNode_42_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_31);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt51=5;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);
                        if ( ((LA35_0>=Protected && LA35_0<=Abstract)||LA35_0==External||(LA35_0>=Private && LA35_0<=Project)||LA35_0==Public||LA35_0==Static||LA35_0==Const) ) {
                            alt35=1;
                        }
                        switch (alt35) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_2_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop35;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_9);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_3;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getExportedVariableStatementAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    loop36:
                    do {
                        int alt36=2;
                        alt36 = dfa36.predict(input);
                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_32);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_6_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop36;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_1_1_2_0());
                    }
                    pushFollow(FOLLOW_33);
                    lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"varStmtKeyword",
                      								lv_varStmtKeyword_7_0,
                      								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_34);
                    lv_varDeclsOrBindings_8_0=ruleExportedVariableDeclarationOrBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"varDeclsOrBindings",
                      								lv_varDeclsOrBindings_8_0,
                      								"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);
                        if ( (LA37_0==Comma) ) {
                            alt37=1;
                        }
                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_9, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_34);
                    	    lv_varDeclsOrBindings_10_0=ruleExportedVariableDeclarationOrBinding();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"varDeclsOrBindings",
                    	      									lv_varDeclsOrBindings_10_0,
                    	      									"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop37;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt46=2;
                    alt46 = dfa46.predict(input);
                    switch (alt46) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4ClassDeclarationAnnotationListAction_1_2_0_0_0(),
                              									current);
                            }
                            }
                            loop38:
                            do {
                                int alt38=2;
                                int LA38_0 = input.LA(1);
                                if ( ((LA38_0>=Protected && LA38_0<=Abstract)||LA38_0==External||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public||LA38_0==Static||LA38_0==Const) ) {
                                    alt38=1;
                                }
                                switch (alt38) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop38;
                                }
                            } while (true);
                            otherlv_14=(Token)match(input,Class,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                            }
                            int alt39=2;
                            int LA39_0 = input.LA(1);
                            if ( (LA39_0==Tilde) ) {
                                alt39=1;
                            }
                            switch (alt39) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_12);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_0_4_0());
                            }
                            pushFollow(FOLLOW_13);
                            lv_name_16_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);
                            if ( (LA40_0==LessThanSign) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_2_0_0_5());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_TypeParameters_17=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_17;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt41=2;
                            int LA41_0 = input.LA(1);
                            if ( (LA41_0==Implements||LA41_0==Extends) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_ClassExtendsImplements_18=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_18;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_2_0_1_0(),
                              									current);
                            }
                            }
                            loop42:
                            do {
                                int alt42=2;
                                int LA42_0 = input.LA(1);
                                if ( ((LA42_0>=Protected && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Const) ) {
                                    alt42=1;
                                }
                                switch (alt42) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_14);
                            	    lv_declaredModifiers_20_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_20_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop42;
                                }
                            } while (true);
                            otherlv_21=(Token)match(input,Interface,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_21, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                            }
                            int alt43=2;
                            int LA43_0 = input.LA(1);
                            if ( (LA43_0==Tilde) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_12);
                                    lv_typingStrategy_22_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_22_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_1_4_0());
                            }
                            pushFollow(FOLLOW_13);
                            lv_name_23_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_23_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt44=2;
                            int LA44_0 = input.LA(1);
                            if ( (LA44_0==LessThanSign) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_2_0_1_5());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_TypeParameters_24=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_24;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt45=2;
                            int LA45_0 = input.LA(1);
                            if ( (LA45_0==Implements||LA45_0==Extends) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6());
                                    }
                                    pushFollow(FOLLOW_13);
                                    this_InterfaceExtendsList_25=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_25;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_26=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_26;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4EnumDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);
                        if ( ((LA47_0>=Protected && LA47_0<=Abstract)||LA47_0==External||(LA47_0>=Private && LA47_0<=Project)||LA47_0==Public||LA47_0==Static||LA47_0==Const) ) {
                            alt47=1;
                        }
                        switch (alt47) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_declaredModifiers_28_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_28_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop47;
                        }
                    } while (true);
                    otherlv_29=(Token)match(input,Enum,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_29, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_30_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_30_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_16); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_5_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_literals_32_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);
                        if ( (LA48_0==Comma) ) {
                            alt48=1;
                        }
                        switch (alt48) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_literals_34_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop48;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4TypeAliasDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);
                        if ( ((LA49_0>=Protected && LA49_0<=Abstract)||LA49_0==External||(LA49_0>=Private && LA49_0<=Project)||LA49_0==Public||LA49_0==Static) ) {
                            alt49=1;
                        }
                        switch (alt49) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_18);
                    	    lv_declaredModifiers_37_0=ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_37_0,
                    	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop49;
                        }
                    } while (true);
                    otherlv_38=(Token)match(input,Type,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_38, grammarAccess.getAnnotatedExportableElementAccess().getTypeKeyword_1_4_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                    }
                    pushFollow(FOLLOW_19);
                    lv_name_39_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_39_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt50=2;
                    int LA50_0 = input.LA(1);
                    if ( (LA50_0==LessThanSign) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_4_4());
                            }
                            pushFollow(FOLLOW_20);
                            this_TypeParameters_40=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_TypeParameters_40;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_41=(Token)match(input,EqualsSign,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_41, grammarAccess.getAnnotatedExportableElementAccess().getEqualsSignKeyword_1_4_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_4_6_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRefNode_42_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_42_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportDeclaration=ruleImportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ImportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ImportDeclarationImpl_1=ruleImportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ImportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_importFrom_2_0=null;
        EObject this_ImportClause_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( ((LA52_0>=Intersection && LA52_0<=Implements)||(LA52_0>=Promisify && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Target||(LA52_0>=Async && LA52_0<=Await)||LA52_0==Union||(LA52_0>=Yield && LA52_0<=This)||LA52_0==From||LA52_0==Type||(LA52_0>=Get && LA52_0<=Let)||(LA52_0>=Out && LA52_0<=Set)||LA52_0==As||LA52_0==Of||LA52_0==Asterisk||LA52_0==LeftCurlyBracket||LA52_0==RULE_IDENTIFIER) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    this_ImportClause_1=ruleImportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportClause_1;
                      				afterParserOrEnumRuleCall();
                    }
                    {
                    {
                    lv_importFrom_2_0=(Token)match(input,From,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_importFrom_2_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      						}
                      						setWithLastConsumed(current, "importFrom", lv_importFrom_2_0 != null, "from");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getImportDeclarationImplRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getModuleTModuleCrossReference_2_0());
            }
            pushFollow(FOLLOW_24);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject this_ImportSpecifiersExceptDefault_2 = null;
        EObject this_ImportSpecifiersExceptDefault_3 = null;
        	enterRule();
        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( ((LA54_0>=Intersection && LA54_0<=Implements)||(LA54_0>=Promisify && LA54_0<=Abstract)||LA54_0==External||(LA54_0>=Private && LA54_0<=Project)||LA54_0==Public||LA54_0==Static||LA54_0==Target||(LA54_0>=Async && LA54_0<=Await)||LA54_0==Union||(LA54_0>=Yield && LA54_0<=This)||LA54_0==From||LA54_0==Type||(LA54_0>=Get && LA54_0<=Let)||(LA54_0>=Out && LA54_0<=Set)||LA54_0==As||LA54_0==Of||LA54_0==RULE_IDENTIFIER) ) {
                alt54=1;
            }
            else if ( (LA54_0==Asterisk||LA54_0==LeftCurlyBracket) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);
                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_importSpecifiers_0_0=ruleDefaultImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getImportClauseRule());
                      						}
                      						add(
                      							current,
                      							"importSpecifiers",
                      							lv_importSpecifiers_0_0,
                      							"org.eclipse.n4js.N4JS.DefaultImportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==Comma) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getImportClauseRule());
                              					}
                              					newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ImportSpecifiersExceptDefault_2=ruleImportSpecifiersExceptDefault(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ImportSpecifiersExceptDefault_2;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getImportClauseRule());
                      			}
                      			newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportSpecifiersExceptDefault_3=ruleImportSpecifiersExceptDefault(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportSpecifiersExceptDefault_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportSpecifiersExceptDefault(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject lv_importSpecifiers_2_0 = null;
        EObject lv_importSpecifiers_4_0 = null;
        	enterRule();
        try {
            {
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==Asterisk) ) {
                alt58=1;
            }
            else if ( (LA58_0==LeftCurlyBracket) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_importSpecifiers_0_0=ruleNamespaceImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                      					}
                      					add(
                      						current,
                      						"importSpecifiers",
                      						lv_importSpecifiers_0_0,
                      						"org.eclipse.n4js.N4JS.NamespaceImportSpecifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                    }
                    int alt57=2;
                    int LA57_0 = input.LA(1);
                    if ( ((LA57_0>=Intersection && LA57_0<=With)||(LA57_0>=For && LA57_0<=Var)||(LA57_0>=As && LA57_0<=Of)||LA57_0==RULE_IDENTIFIER) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_17);
                            lv_importSpecifiers_2_0=ruleNamedImportSpecifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                              							}
                              							add(
                              								current,
                              								"importSpecifiers",
                              								lv_importSpecifiers_2_0,
                              								"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop55:
                            do {
                                int alt55=2;
                                int LA55_0 = input.LA(1);
                                if ( (LA55_0==Comma) ) {
                                    int LA55_1 = input.LA(2);
                                    if ( ((LA55_1>=Intersection && LA55_1<=With)||(LA55_1>=For && LA55_1<=Var)||(LA55_1>=As && LA55_1<=Of)||LA55_1==RULE_IDENTIFIER) ) {
                                        alt55=1;
                                    }
                                }
                                switch (alt55) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_3, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_17);
                            	    lv_importSpecifiers_4_0=ruleNamedImportSpecifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"importSpecifiers",
                            	      									lv_importSpecifiers_4_0,
                            	      									"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop55;
                                }
                            } while (true);
                            int alt56=2;
                            int LA56_0 = input.LA(1);
                            if ( (LA56_0==Comma) ) {
                                alt56=1;
                            }
                            switch (alt56) {
                                case 1 :
                                    {
                                    otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						newLeafNode(otherlv_5, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamedImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedImportSpecifier=ruleNamedImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token lv_declaredDynamic_1_0=null;
        Token otherlv_3=null;
        Token lv_declaredDynamic_5_0=null;
        AntlrDatatypeRuleToken lv_alias_4_0 = null;
        	enterRule();
        try {
            {
            int alt61=2;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0_0());
                    }
                    pushFollow(FOLLOW_39);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt59=2;
                    int LA59_0 = input.LA(1);
                    if ( (LA59_0==PlusSign) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            {
                            {
                            lv_declaredDynamic_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_declaredDynamic_1_0, grammarAccess.getNamedImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                              						}
                              						setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_1_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_1_0_0());
                    }
                    pushFollow(FOLLOW_40);
                    ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,As,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_alias_4_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_4_0,
                      							"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt60=2;
                    int LA60_0 = input.LA(1);
                    if ( (LA60_0==PlusSign) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            {
                            {
                            lv_declaredDynamic_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_declaredDynamic_5_0, grammarAccess.getNamedImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_1_3_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                              						}
                              						setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_5_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultImportSpecifier=ruleDefaultImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token lv_declaredDynamic_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0());
            }
            pushFollow(FOLLOW_39);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==PlusSign) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredDynamic_1_0, grammarAccess.getDefaultImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_1_0 != null, "+");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceImportSpecifier=ruleNamespaceImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_declaredDynamic_4_0=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceImportSpecifierAccess().getNamespaceImportSpecifierAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Asterisk,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
            }
            otherlv_2=(Token)match(input,As,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getNamespaceImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_39);
            lv_alias_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamespaceImportSpecifierRule());
              					}
              					set(
              						current,
              						"alias",
              						lv_alias_3_0,
              						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==PlusSign) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredDynamic_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamespaceImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_4_0 != null, "+");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleModuleSpecifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleModuleSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModuleSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModuleSpecifier=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModuleSpecifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleModuleSpecifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_STRING_0=null;
        	enterRule();
        try {
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_STRING_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_STRING_0, grammarAccess.getModuleSpecifierAccess().getSTRINGTerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);
                if ( ((LA64_0>=Protected && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Const) ) {
                    alt64=1;
                }
                switch (alt64) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop64;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_41);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt65=2;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);
                if ( ((LA66_0>=Protected && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Const) ) {
                    alt66=1;
                }
                switch (alt66) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop66;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_42);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_41);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==Semicolon) ) {
                int LA67_1 = input.LA(2);
                if ( (synpred40_InternalN4JSParser()) ) {
                    alt67=1;
                }
            }
            else if ( (LA67_0==EOF||LA67_0==RULE_ML_COMMENT||LA67_0==RULE_EOL) && (synpred40_InternalN4JSParser())) {
                alt67=1;
            }
            else if ( (LA67_0==RightCurlyBracket) ) {
                int LA67_3 = input.LA(2);
                if ( (synpred40_InternalN4JSParser()) ) {
                    alt67=1;
                }
            }
            switch (alt67) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncNoTrailingLineBreak(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredAsync_0_0=null;
        EObject this_NoLineTerminator_1 = null;
        	enterRule();
        try {
            {
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==Async) ) {
                int LA68_1 = input.LA(2);
                if ( ((LA68_1>=Intersection && LA68_1<=With)||(LA68_1>=For && LA68_1<=Var)||(LA68_1>=As && LA68_1<=Of)||LA68_1==Asterisk||LA68_1==LeftSquareBracket||LA68_1==RULE_NO_LINE_TERMINATOR||LA68_1==RULE_IDENTIFIER||LA68_1==RULE_INT||LA68_1==RULE_DOUBLE||(LA68_1>=RULE_BINARY_INT && LA68_1<=RULE_OCTAL_INT)||(LA68_1>=RULE_HEX_INT && LA68_1<=RULE_SCIENTIFIC_INT)||LA68_1==RULE_STRING) ) {
                    alt68=1;
                }
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      					}
                      					setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_0_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      			}
                      			newCompositeNode(grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_NoLineTerminator_1=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NoLineTerminator_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=ruleFunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm3_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==Asterisk) ) {
                alt69=1;
            }
            else if ( ((LA69_0>=Intersection && LA69_0<=Implements)||(LA69_0>=Promisify && LA69_0<=Abstract)||LA69_0==External||(LA69_0>=Private && LA69_0<=Project)||LA69_0==Public||LA69_0==Static||LA69_0==Target||(LA69_0>=Async && LA69_0<=Await)||LA69_0==Union||(LA69_0>=Yield && LA69_0<=This)||LA69_0==From||LA69_0==Type||(LA69_0>=Get && LA69_0<=Let)||(LA69_0>=Out && LA69_0<=Set)||LA69_0==As||LA69_0==Of||LA69_0==LeftParenthesis||LA69_0==LessThanSign||LA69_0==RULE_IDENTIFIER) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);
                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==Asterisk) ) {
                alt70=1;
            }
            else if ( ((LA70_0>=Intersection && LA70_0<=Implements)||(LA70_0>=Promisify && LA70_0<=Abstract)||LA70_0==External||(LA70_0>=Private && LA70_0<=Project)||LA70_0==Public||LA70_0==Static||LA70_0==Target||(LA70_0>=Async && LA70_0<=Await)||LA70_0==Union||LA70_0==This||LA70_0==From||LA70_0==Type||(LA70_0>=Get && LA70_0<=Let)||(LA70_0>=Out && LA70_0<=Set)||LA70_0==As||LA70_0==Of||LA70_0==LeftParenthesis||LA70_0==LessThanSign||LA70_0==RULE_IDENTIFIER) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);
                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==Asterisk) ) {
                alt71=1;
            }
            else if ( ((LA71_0>=Intersection && LA71_0<=Implements)||(LA71_0>=Promisify && LA71_0<=Abstract)||LA71_0==External||(LA71_0>=Private && LA71_0<=Project)||LA71_0==Public||LA71_0==Static||LA71_0==Target||(LA71_0>=Async && LA71_0<=Await)||LA71_0==Union||(LA71_0>=Yield && LA71_0<=This)||LA71_0==From||LA71_0==Type||(LA71_0>=Get && LA71_0<=Let)||(LA71_0>=Out && LA71_0<=Set)||LA71_0==As||LA71_0==Of||LA71_0==LeftParenthesis||LA71_0==LessThanSign||LA71_0==RULE_IDENTIFIER) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);
                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==Asterisk) ) {
                alt72=1;
            }
            else if ( ((LA72_0>=Intersection && LA72_0<=Implements)||(LA72_0>=Promisify && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Target||(LA72_0>=Async && LA72_0<=Await)||LA72_0==Union||LA72_0==This||LA72_0==From||LA72_0==Type||(LA72_0>=Get && LA72_0<=Let)||(LA72_0>=Out && LA72_0<=Set)||LA72_0==As||LA72_0==Of||LA72_0==LeftParenthesis||LA72_0==LessThanSign||LA72_0==RULE_IDENTIFIER) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);
                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==Asterisk) ) {
                alt73=1;
            }
            else if ( ((LA73_0>=Intersection && LA73_0<=Implements)||(LA73_0>=Promisify && LA73_0<=Abstract)||LA73_0==External||(LA73_0>=Private && LA73_0<=Project)||LA73_0==Public||LA73_0==Static||LA73_0==Target||(LA73_0>=Async && LA73_0<=Await)||LA73_0==Union||(LA73_0>=Yield && LA73_0<=This)||LA73_0==From||LA73_0==Type||(LA73_0>=Get && LA73_0<=Let)||(LA73_0>=Out && LA73_0<=Set)||LA73_0==As||LA73_0==Of||LA73_0==LeftParenthesis||LA73_0==LessThanSign||LA73_0==RULE_IDENTIFIER) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);
                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==Asterisk) ) {
                alt74=1;
            }
            else if ( ((LA74_0>=Intersection && LA74_0<=Implements)||(LA74_0>=Promisify && LA74_0<=Abstract)||LA74_0==External||(LA74_0>=Private && LA74_0<=Project)||LA74_0==Public||LA74_0==Static||LA74_0==Target||(LA74_0>=Async && LA74_0<=Await)||LA74_0==Union||LA74_0==This||LA74_0==From||LA74_0==Type||(LA74_0>=Get && LA74_0<=Let)||(LA74_0>=Out && LA74_0<=Set)||LA74_0==As||LA74_0==Of||LA74_0==LeftParenthesis||LA74_0==LessThanSign||LA74_0==RULE_IDENTIFIER) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);
                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==Asterisk) ) {
                alt75=1;
            }
            else if ( ((LA75_0>=Intersection && LA75_0<=Implements)||(LA75_0>=Promisify && LA75_0<=Abstract)||LA75_0==External||(LA75_0>=Private && LA75_0<=Project)||LA75_0==Public||LA75_0==Static||LA75_0==Target||(LA75_0>=Async && LA75_0<=Await)||LA75_0==Union||(LA75_0>=Yield && LA75_0<=This)||LA75_0==From||LA75_0==Type||(LA75_0>=Get && LA75_0<=Let)||(LA75_0>=Out && LA75_0<=Set)||LA75_0==As||LA75_0==Of||LA75_0==LeftParenthesis||LA75_0==LessThanSign||LA75_0==RULE_IDENTIFIER) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==Asterisk) ) {
                alt76=1;
            }
            else if ( ((LA76_0>=Intersection && LA76_0<=Implements)||(LA76_0>=Promisify && LA76_0<=Abstract)||LA76_0==External||(LA76_0>=Private && LA76_0<=Project)||LA76_0==Public||LA76_0==Static||LA76_0==Target||(LA76_0>=Async && LA76_0<=Await)||LA76_0==Union||LA76_0==This||LA76_0==From||LA76_0==Type||(LA76_0>=Get && LA76_0<=Let)||(LA76_0>=Out && LA76_0<=Set)||LA76_0==As||LA76_0==Of||LA76_0==LeftParenthesis||LA76_0==LessThanSign||LA76_0==RULE_IDENTIFIER) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);
                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==LessThanSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||(LA78_0>=Yield && LA78_0<=This)||LA78_0==From||LA78_0==Type||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_48);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==Colon) && (synpred41_InternalN4JSParser())) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==LessThanSign) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( ((LA81_0>=Intersection && LA81_0<=Implements)||(LA81_0>=Promisify && LA81_0<=Abstract)||LA81_0==External||(LA81_0>=Private && LA81_0<=Project)||LA81_0==Public||LA81_0==Static||LA81_0==Target||(LA81_0>=Async && LA81_0<=Await)||LA81_0==Union||LA81_0==This||LA81_0==From||LA81_0==Type||(LA81_0>=Get && LA81_0<=Let)||(LA81_0>=Out && LA81_0<=Set)||LA81_0==As||LA81_0==Of||LA81_0==RULE_IDENTIFIER) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_48);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==Colon) && (synpred42_InternalN4JSParser())) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==LessThanSign) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_45);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( ((LA84_0>=Intersection && LA84_0<=Implements)||(LA84_0>=Promisify && LA84_0<=Abstract)||LA84_0==External||(LA84_0>=Private && LA84_0<=Project)||LA84_0==Public||LA84_0==Static||LA84_0==Target||(LA84_0>=Async && LA84_0<=Await)||LA84_0==Union||(LA84_0>=Yield && LA84_0<=This)||LA84_0==From||LA84_0==Type||(LA84_0>=Get && LA84_0<=Let)||(LA84_0>=Out && LA84_0<=Set)||LA84_0==As||LA84_0==Of||LA84_0==RULE_IDENTIFIER) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_48);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==Colon) && (synpred43_InternalN4JSParser())) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==LessThanSign) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_45);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( ((LA87_0>=Intersection && LA87_0<=Implements)||(LA87_0>=Promisify && LA87_0<=Abstract)||LA87_0==External||(LA87_0>=Private && LA87_0<=Project)||LA87_0==Public||LA87_0==Static||LA87_0==Target||(LA87_0>=Async && LA87_0<=Await)||LA87_0==Union||LA87_0==This||LA87_0==From||LA87_0==Type||(LA87_0>=Get && LA87_0<=Let)||(LA87_0>=Out && LA87_0<=Set)||LA87_0==As||LA87_0==Of||LA87_0==RULE_IDENTIFIER) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_48);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==Colon) && (synpred44_InternalN4JSParser())) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedFunctionDeclaration=ruleAnnotatedFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_9);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( ((LA91_0>=Protected && LA91_0<=Abstract)||LA91_0==External||(LA91_0>=Private && LA91_0<=Project)||LA91_0==Public||LA91_0==Static||LA91_0==Const) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_9);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);
                if ( ((LA92_0>=Protected && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Const) ) {
                    alt92=1;
                }
                switch (alt92) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop92;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_42);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExpression=ruleFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject this_FunctionImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_1=norm6_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAsyncFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsyncFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAsyncFunctionExpression=ruleAsyncFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsyncFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_0_0=null;
        Token otherlv_2=null;
        EObject this_NoLineTerminator_1 = null;
        EObject this_FunctionImplWithoutKeyword_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
            }
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              							}
              							setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_0_0 != null, "async");
            }
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_50);
            this_NoLineTerminator_1=ruleNoLineTerminator(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_NoLineTerminator_1;
              					afterParserOrEnumRuleCall();
            }
            otherlv_2=(Token)match(input,Function,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_3=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowExpression=ruleArrowExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt95=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt95=1;
                }
                break;
            case Async:
                {
                int LA95_2 = input.LA(2);
                if ( (LA95_2==RULE_NO_LINE_TERMINATOR) && (synpred55_InternalN4JSParser())) {
                    alt95=2;
                }
                else if ( (LA95_2==LeftParenthesis) && (synpred55_InternalN4JSParser())) {
                    alt95=2;
                }
                else if ( (LA95_2==EqualsSign) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);
                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);
                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_47);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);
                    if ( (LA94_0==Colon) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_51);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_53);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt99=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt99=1;
                }
                break;
            case Async:
                {
                int LA99_2 = input.LA(2);
                if ( (LA99_2==RULE_NO_LINE_TERMINATOR) && (synpred61_InternalN4JSParser())) {
                    alt99=2;
                }
                else if ( (LA99_2==LeftParenthesis) && (synpred61_InternalN4JSParser())) {
                    alt99=2;
                }
                else if ( (LA99_2==EqualsSign) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==Colon) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_47);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);
                    if ( (LA98_0==Colon) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_51);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_53);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt103=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt103=1;
                }
                break;
            case Async:
                {
                int LA103_2 = input.LA(2);
                if ( (LA103_2==EqualsSign) ) {
                    alt103=3;
                }
                else if ( (LA103_2==RULE_NO_LINE_TERMINATOR) && (synpred67_InternalN4JSParser())) {
                    alt103=2;
                }
                else if ( (LA103_2==LeftParenthesis) && (synpred67_InternalN4JSParser())) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt103=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);
                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);
                    if ( (LA101_0==Colon) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_45);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);
                    if ( (LA102_0==Colon) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_51);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_53);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt107=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt107=1;
                }
                break;
            case Async:
                {
                int LA107_2 = input.LA(2);
                if ( (LA107_2==RULE_NO_LINE_TERMINATOR) && (synpred73_InternalN4JSParser())) {
                    alt107=2;
                }
                else if ( (LA107_2==LeftParenthesis) && (synpred73_InternalN4JSParser())) {
                    alt107=2;
                }
                else if ( (LA107_2==EqualsSign) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);
                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==Colon) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_45);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_51);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt106=2;
                    int LA106_0 = input.LA(1);
                    if ( (LA106_0==Colon) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_51);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_51);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_53);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( ((LA110_0>=Intersection && LA110_0<=Implements)||(LA110_0>=Promisify && LA110_0<=Abstract)||LA110_0==External||(LA110_0>=Private && LA110_0<=Project)||LA110_0==Public||LA110_0==Static||LA110_0==Target||(LA110_0>=Async && LA110_0<=Await)||LA110_0==Union||(LA110_0>=Yield && LA110_0<=This)||LA110_0==From||LA110_0==Type||LA110_0==FullStopFullStopFullStop||(LA110_0>=Get && LA110_0<=Let)||(LA110_0>=Out && LA110_0<=Set)||LA110_0==As||LA110_0==Of||(LA110_0>=CommercialAt && LA110_0<=LeftSquareBracket)||LA110_0==LeftCurlyBracket||LA110_0==RULE_IDENTIFIER) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_57);
                    lv_fpars_1_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);
                        if ( (LA109_0==Comma) ) {
                            alt109=1;
                        }
                        switch (alt109) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_58); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_57);
                    	    lv_fpars_3_0=ruleFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop109;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_StrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( ((LA112_0>=Intersection && LA112_0<=Implements)||(LA112_0>=Promisify && LA112_0<=Abstract)||LA112_0==External||(LA112_0>=Private && LA112_0<=Project)||LA112_0==Public||LA112_0==Static||LA112_0==Target||(LA112_0>=Async && LA112_0<=Await)||LA112_0==Union||LA112_0==This||LA112_0==From||LA112_0==Type||LA112_0==FullStopFullStopFullStop||(LA112_0>=Get && LA112_0<=Let)||(LA112_0>=Out && LA112_0<=Set)||LA112_0==As||LA112_0==Of||(LA112_0>=CommercialAt && LA112_0<=LeftSquareBracket)||LA112_0==LeftCurlyBracket||LA112_0==RULE_IDENTIFIER) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_57);
                    lv_fpars_1_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);
                        if ( (LA111_0==Comma) ) {
                            alt111=1;
                        }
                        switch (alt111) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_58); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_57);
                    	    lv_fpars_3_0=norm1_FormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop111;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsFormalParameter=ruleBindingIdentifierAsFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlockMinusBraces = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockMinusBracesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlockMinusBraces=ruleBlockMinusBraces();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockMinusBraces; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);
                if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Function)||(LA113_0>=Private && LA113_0<=Delete)||(LA113_0>=Import && LA113_0<=Break)||(LA113_0>=Class && LA113_0<=This)||(LA113_0>=From && LA113_0<=With)||(LA113_0>=For && LA113_0<=Var)||LA113_0==PlusSignPlusSign||(LA113_0>=HyphenMinusHyphenMinus && LA113_0<=SolidusEqualsSign)||(LA113_0>=As && LA113_0<=If)||LA113_0==Of||LA113_0==ExclamationMark||LA113_0==LeftParenthesis||LA113_0==PlusSign||LA113_0==HyphenMinus||LA113_0==Solidus||(LA113_0>=Semicolon && LA113_0<=LessThanSign)||(LA113_0>=CommercialAt && LA113_0<=LeftSquareBracket)||LA113_0==LeftCurlyBracket||LA113_0==Tilde||(LA113_0>=RULE_TEMPLATE_HEAD && LA113_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA113_0==RULE_IDENTIFIER||LA113_0==RULE_INT||LA113_0==RULE_DOUBLE||(LA113_0>=RULE_BINARY_INT && LA113_0<=RULE_SCIENTIFIC_INT)||LA113_0==RULE_STRING) ) {
                    alt113=1;
                }
                switch (alt113) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop113;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( ((LA114_0>=Intersection && LA114_0<=Implements)||(LA114_0>=Promisify && LA114_0<=Function)||(LA114_0>=Private && LA114_0<=Delete)||(LA114_0>=Import && LA114_0<=Break)||(LA114_0>=Class && LA114_0<=This)||(LA114_0>=From && LA114_0<=With)||(LA114_0>=For && LA114_0<=Var)||LA114_0==PlusSignPlusSign||(LA114_0>=HyphenMinusHyphenMinus && LA114_0<=SolidusEqualsSign)||(LA114_0>=As && LA114_0<=If)||LA114_0==Of||LA114_0==ExclamationMark||LA114_0==LeftParenthesis||LA114_0==PlusSign||LA114_0==HyphenMinus||LA114_0==Solidus||(LA114_0>=Semicolon && LA114_0<=LessThanSign)||(LA114_0>=CommercialAt && LA114_0<=LeftSquareBracket)||LA114_0==LeftCurlyBracket||LA114_0==Tilde||(LA114_0>=RULE_TEMPLATE_HEAD && LA114_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA114_0==RULE_IDENTIFIER||LA114_0==RULE_INT||LA114_0==RULE_DOUBLE||(LA114_0>=RULE_BINARY_INT && LA114_0<=RULE_SCIENTIFIC_INT)||LA114_0==RULE_STRING) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop114;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionDisguisedAsBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionDisguisedAsBlock=ruleExpressionDisguisedAsBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionDisguisedAsBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=norm1_AssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpressionStatement=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExpression=ruleAnnotatedExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_59);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==Class) ) {
                alt117=1;
            }
            else if ( (LA117_0==Function||LA117_0==Async) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( ((LA115_0>=Intersection && LA115_0<=Constructor)||(LA115_0>=Promisify && LA115_0<=Abstract)||LA115_0==External||(LA115_0>=Private && LA115_0<=Project)||LA115_0==Public||LA115_0==Static||LA115_0==Target||(LA115_0>=Async && LA115_0<=Await)||LA115_0==Union||(LA115_0>=Yield && LA115_0<=This)||LA115_0==From||LA115_0==Type||(LA115_0>=Get && LA115_0<=Let)||(LA115_0>=Out && LA115_0<=Set)||LA115_0==As||LA115_0==Of||LA115_0==RULE_IDENTIFIER) ) {
                        alt115=1;
                    }
                    else if ( (LA115_0==Implements) ) {
                        int LA115_2 = input.LA(2);
                        if ( (LA115_2==Implements||LA115_2==Extends||LA115_2==LeftCurlyBracket) ) {
                            alt115=1;
                        }
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_13);
                            lv_name_3_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt116=2;
                    int LA116_0 = input.LA(1);
                    if ( (LA116_0==Implements||LA116_0==Extends) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_13);
                            this_ClassExtendsImplements_4=ruleClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_50);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_59);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==Class) ) {
                alt120=1;
            }
            else if ( (LA120_0==Function||LA120_0==Async) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);
                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_61); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( ((LA118_0>=Intersection && LA118_0<=Constructor)||(LA118_0>=Promisify && LA118_0<=Abstract)||LA118_0==External||(LA118_0>=Private && LA118_0<=Project)||LA118_0==Public||LA118_0==Static||LA118_0==Target||(LA118_0>=Async && LA118_0<=Await)||LA118_0==Union||LA118_0==This||LA118_0==From||LA118_0==Type||(LA118_0>=Get && LA118_0<=Let)||(LA118_0>=Out && LA118_0<=Set)||LA118_0==As||LA118_0==Of||LA118_0==RULE_IDENTIFIER) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==Implements) ) {
                        int LA118_2 = input.LA(2);
                        if ( (LA118_2==Implements||LA118_2==Extends||LA118_2==LeftCurlyBracket) ) {
                            alt118=1;
                        }
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_61);
                            lv_name_3_0=norm1_BindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);
                    if ( (LA119_0==Implements||LA119_0==Extends) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_61);
                            this_ClassExtendsImplements_4=norm1_ClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=norm1_Members(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_50);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4TypeVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4TypeVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4TypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4TypeVariable=ruleN4TypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4TypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4TypeVariable() throws RecognitionException {
        EObject current = null;
        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token otherlv_3=null;
        Token lv_declaredOptional_5_0=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_declaredUpperBoundNode_4_0 = null;
        EObject lv_declaredDefaultArgumentNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt121=3;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==Out) ) {
                alt121=1;
            }
            else if ( (LA121_0==In) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getN4TypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", lv_declaredCovariant_0_0 != null, "out");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getN4TypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", lv_declaredContravariant_1_0 != null, "in");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeVariableAccess().getNameIdentifierOrThisParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_2_0=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.N4JS.IdentifierOrThis");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==Extends) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getN4TypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4TypeVariableAccess().getDeclaredUpperBoundNodeTypeReferenceNodeParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_declaredUpperBoundNode_4_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBoundNode",
                      							lv_declaredUpperBoundNode_4_0,
                      							"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==EqualsSign) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredOptional_5_0=(Token)match(input,EqualsSign,FOLLOW_65); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredOptional_5_0, grammarAccess.getN4TypeVariableAccess().getDeclaredOptionalEqualsSignKeyword_3_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_5_0 != null, "=");
                    }
                    }
                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( ((LA123_0>=Intersection && LA123_0<=Constructor)||LA123_0==Promisify||LA123_0==Default||LA123_0==Target||LA123_0==Await||LA123_0==False||LA123_0==Union||LA123_0==This||(LA123_0>=This_1 && LA123_0<=Void)||LA123_0==LeftParenthesis||LA123_0==PlusSign||LA123_0==HyphenMinus||LA123_0==QuestionMark||LA123_0==LeftSquareBracket||LA123_0==LeftCurlyBracket||LA123_0==Tilde||LA123_0==RULE_IDENTIFIER||LA123_0==RULE_INT||LA123_0==RULE_DOUBLE||(LA123_0>=RULE_BINARY_INT && LA123_0<=RULE_SCIENTIFIC_INT)||LA123_0==RULE_STRING) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getN4TypeVariableAccess().getDeclaredDefaultArgumentNodeTypeReferenceNodeParserRuleCall_3_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_declaredDefaultArgumentNode_6_0=ruleTypeReferenceNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
                              						}
                              						set(
                              							current,
                              							"declaredDefaultArgumentNode",
                              							lv_declaredDefaultArgumentNode_6_0,
                              							"org.eclipse.n4js.N4JS.TypeReferenceNode");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormalParameter=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=ruleBindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=norm1_BindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_2_0=null;
        Token lv_hasInitializerAssignment_5_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_initializer_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( (LA128_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( ((LA128_0>=Intersection && LA128_0<=Implements)||(LA128_0>=Promisify && LA128_0<=Abstract)||LA128_0==External||(LA128_0>=Private && LA128_0<=Project)||LA128_0==Public||LA128_0==Static||LA128_0==Target||(LA128_0>=Async && LA128_0<=Await)||LA128_0==Union||(LA128_0>=Yield && LA128_0<=This)||LA128_0==From||LA128_0==Type||LA128_0==FullStopFullStopFullStop||(LA128_0>=Get && LA128_0<=Let)||(LA128_0>=Out && LA128_0<=Set)||LA128_0==As||LA128_0==Of||LA128_0==CommercialAt||LA128_0==RULE_IDENTIFIER) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);
                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);
                        if ( (LA125_0==CommercialAt) ) {
                            alt125=1;
                        }
                        switch (alt125) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_66);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop125;
                        }
                    } while (true);
                    int alt126=2;
                    int LA126_0 = input.LA(1);
                    if ( (LA126_0==FullStopFullStopFullStop) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            {
                            lv_variadic_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_12); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", lv_variadic_2_0 != null, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_2_0());
                    }
                    pushFollow(FOLLOW_67);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( (LA127_0==Colon) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3());
                            }
                            pushFollow(FOLLOW_64);
                            this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==EqualsSign) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_5_0=(Token)match(input,EqualsSign,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_5_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_5_0 != null, "=");
                    }
                    }
                    }
                    int alt129=2;
                    int LA129_0 = input.LA(1);
                    if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Abstract)||(LA129_0>=External && LA129_0<=Function)||(LA129_0>=Private && LA129_0<=Delete)||(LA129_0>=Import && LA129_0<=Public)||LA129_0==Static||(LA129_0>=Target && LA129_0<=Await)||LA129_0==Class||(LA129_0>=False && LA129_0<=Super)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||(LA129_0>=From && LA129_0<=Void)||(LA129_0>=Get && LA129_0<=Set)||LA129_0==PlusSignPlusSign||(LA129_0>=HyphenMinusHyphenMinus && LA129_0<=SolidusEqualsSign)||LA129_0==As||LA129_0==Of||LA129_0==ExclamationMark||LA129_0==LeftParenthesis||LA129_0==PlusSign||LA129_0==HyphenMinus||LA129_0==Solidus||LA129_0==LessThanSign||(LA129_0>=CommercialAt && LA129_0<=LeftSquareBracket)||LA129_0==LeftCurlyBracket||LA129_0==Tilde||(LA129_0>=RULE_TEMPLATE_HEAD && LA129_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA129_0==RULE_IDENTIFIER||LA129_0==RULE_INT||LA129_0==RULE_DOUBLE||(LA129_0>=RULE_BINARY_INT && LA129_0<=RULE_SCIENTIFIC_INT)||LA129_0==RULE_STRING) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_6_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_6_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_2_0=null;
        Token lv_hasInitializerAssignment_5_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_initializer_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt134=2;
            int LA134_0 = input.LA(1);
            if ( (LA134_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( (LA134_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Abstract)||LA134_0==External||(LA134_0>=Private && LA134_0<=Project)||LA134_0==Public||LA134_0==Static||LA134_0==Target||(LA134_0>=Async && LA134_0<=Await)||LA134_0==Union||LA134_0==This||LA134_0==From||LA134_0==Type||LA134_0==FullStopFullStopFullStop||(LA134_0>=Get && LA134_0<=Let)||(LA134_0>=Out && LA134_0<=Set)||LA134_0==As||LA134_0==Of||LA134_0==CommercialAt||LA134_0==RULE_IDENTIFIER) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);
                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);
                        if ( (LA131_0==CommercialAt) ) {
                            alt131=1;
                        }
                        switch (alt131) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_66);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( (LA132_0==FullStopFullStopFullStop) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            {
                            lv_variadic_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_12); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", lv_variadic_2_0 != null, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_2_0());
                    }
                    pushFollow(FOLLOW_67);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==Colon) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3());
                            }
                            pushFollow(FOLLOW_64);
                            this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==EqualsSign) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_5_0=(Token)match(input,EqualsSign,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_5_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_5_0 != null, "=");
                    }
                    }
                    }
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( ((LA135_0>=Intersection && LA135_0<=Implements)||(LA135_0>=Promisify && LA135_0<=Abstract)||(LA135_0>=External && LA135_0<=Function)||(LA135_0>=Private && LA135_0<=Delete)||(LA135_0>=Import && LA135_0<=Public)||LA135_0==Static||(LA135_0>=Target && LA135_0<=Await)||LA135_0==Class||(LA135_0>=False && LA135_0<=Super)||LA135_0==Union||(LA135_0>=Yield && LA135_0<=This)||(LA135_0>=From && LA135_0<=Void)||(LA135_0>=Get && LA135_0<=Set)||LA135_0==PlusSignPlusSign||(LA135_0>=HyphenMinusHyphenMinus && LA135_0<=SolidusEqualsSign)||LA135_0==As||LA135_0==Of||LA135_0==ExclamationMark||LA135_0==LeftParenthesis||LA135_0==PlusSign||LA135_0==HyphenMinus||LA135_0==Solidus||LA135_0==LessThanSign||(LA135_0>=CommercialAt && LA135_0<=LeftSquareBracket)||LA135_0==LeftCurlyBracket||LA135_0==Tilde||(LA135_0>=RULE_TEMPLATE_HEAD && LA135_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA135_0==RULE_IDENTIFIER||LA135_0==RULE_INT||LA135_0==RULE_DOUBLE||(LA135_0>=RULE_BINARY_INT && LA135_0<=RULE_SCIENTIFIC_INT)||LA135_0==RULE_STRING) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_6_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_6_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlock=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);
                if ( ((LA137_0>=Intersection && LA137_0<=Implements)||(LA137_0>=Promisify && LA137_0<=Function)||(LA137_0>=Private && LA137_0<=Delete)||(LA137_0>=Import && LA137_0<=Break)||(LA137_0>=Class && LA137_0<=This)||(LA137_0>=From && LA137_0<=With)||(LA137_0>=For && LA137_0<=Var)||LA137_0==PlusSignPlusSign||(LA137_0>=HyphenMinusHyphenMinus && LA137_0<=SolidusEqualsSign)||(LA137_0>=As && LA137_0<=If)||LA137_0==Of||LA137_0==ExclamationMark||LA137_0==LeftParenthesis||LA137_0==PlusSign||LA137_0==HyphenMinus||LA137_0==Solidus||(LA137_0>=Semicolon && LA137_0<=LessThanSign)||(LA137_0>=CommercialAt && LA137_0<=LeftSquareBracket)||LA137_0==LeftCurlyBracket||LA137_0==Tilde||(LA137_0>=RULE_TEMPLATE_HEAD && LA137_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA137_0==RULE_IDENTIFIER||LA137_0==RULE_INT||LA137_0==RULE_DOUBLE||(LA137_0>=RULE_BINARY_INT && LA137_0<=RULE_SCIENTIFIC_INT)||LA137_0==RULE_STRING) ) {
                    alt137=1;
                }
                switch (alt137) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_54);
            	    lv_statements_2_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop137;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Block() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);
                if ( ((LA138_0>=Intersection && LA138_0<=Implements)||(LA138_0>=Promisify && LA138_0<=Function)||(LA138_0>=Private && LA138_0<=Delete)||(LA138_0>=Import && LA138_0<=Break)||(LA138_0>=Class && LA138_0<=This)||(LA138_0>=From && LA138_0<=With)||(LA138_0>=For && LA138_0<=Var)||LA138_0==PlusSignPlusSign||(LA138_0>=HyphenMinusHyphenMinus && LA138_0<=SolidusEqualsSign)||(LA138_0>=As && LA138_0<=If)||LA138_0==Of||LA138_0==ExclamationMark||LA138_0==LeftParenthesis||LA138_0==PlusSign||LA138_0==HyphenMinus||LA138_0==Solidus||(LA138_0>=Semicolon && LA138_0<=LessThanSign)||(LA138_0>=CommercialAt && LA138_0<=LeftSquareBracket)||LA138_0==LeftCurlyBracket||LA138_0==Tilde||(LA138_0>=RULE_TEMPLATE_HEAD && LA138_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA138_0==RULE_IDENTIFIER||LA138_0==RULE_INT||LA138_0==RULE_DOUBLE||(LA138_0>=RULE_BINARY_INT && LA138_0<=RULE_SCIENTIFIC_INT)||LA138_0==RULE_STRING) ) {
                    alt138=1;
                }
                switch (alt138) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_54);
            	    lv_statements_2_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop138;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRootStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRootStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRootStatement=ruleRootStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRootStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt139=16;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm1_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=ruleLabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=ruleExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=ruleIfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=ruleIterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=ruleContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=ruleBreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=ruleReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=ruleWithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=ruleSwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=ruleThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=ruleTryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt140=16;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm3_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=norm1_LabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=norm1_ExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=norm1_IfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=norm1_IterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=norm1_ContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=norm1_BreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=norm1_ReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=norm1_WithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=norm1_SwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=norm1_ThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=norm1_TryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=ruleAnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Statement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=norm1_AnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=norm1_RootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_2_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);
                if ( (LA143_0==Comma) ) {
                    alt143=1;
                }
                switch (alt143) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_4_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop143;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_2_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);
                if ( (LA144_0==Comma) ) {
                    alt144=1;
                }
                switch (alt144) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_4_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop144;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableStatement=ruleExportedVariableStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        Enumerator lv_varStmtKeyword_2_0 = null;
        EObject lv_varDeclsOrBindings_3_0 = null;
        EObject lv_varDeclsOrBindings_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableStatementAccess().getExportedVariableStatementAction_0(),
              					current);
            }
            }
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop145;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_3_0=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);
                if ( (LA146_0==Comma) ) {
                    alt146=1;
                }
                switch (alt146) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_5_0=ruleExportedVariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop146;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableDeclarationOrBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclarationOrBinding=ruleVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==LeftCurlyBracket) && (synpred92_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( (LA147_0==LeftSquareBracket) && (synpred92_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( ((LA147_0>=Intersection && LA147_0<=Implements)||(LA147_0>=Promisify && LA147_0<=Abstract)||LA147_0==External||(LA147_0>=Private && LA147_0<=Project)||LA147_0==Public||LA147_0==Static||LA147_0==Target||(LA147_0>=Async && LA147_0<=Await)||LA147_0==Union||(LA147_0>=Yield && LA147_0<=This)||LA147_0==From||LA147_0==Type||(LA147_0>=Get && LA147_0<=Let)||(LA147_0>=Out && LA147_0<=Set)||LA147_0==As||LA147_0==Of||LA147_0==CommercialAt||LA147_0==RULE_IDENTIFIER) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);
                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=ruleVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==LeftCurlyBracket) && (synpred93_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( (LA148_0==LeftSquareBracket) && (synpred93_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( ((LA148_0>=Intersection && LA148_0<=Implements)||(LA148_0>=Promisify && LA148_0<=Abstract)||LA148_0==External||(LA148_0>=Private && LA148_0<=Project)||LA148_0==Public||LA148_0==Static||LA148_0==Target||(LA148_0>=Async && LA148_0<=Await)||LA148_0==Union||(LA148_0>=Yield && LA148_0<=This)||LA148_0==From||LA148_0==Type||(LA148_0>=Get && LA148_0<=Let)||(LA148_0>=Out && LA148_0<=Set)||LA148_0==As||LA148_0==Of||LA148_0==CommercialAt||LA148_0==RULE_IDENTIFIER) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm1_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==LeftCurlyBracket) && (synpred94_InternalN4JSParser())) {
                alt149=1;
            }
            else if ( (LA149_0==LeftSquareBracket) && (synpred94_InternalN4JSParser())) {
                alt149=1;
            }
            else if ( ((LA149_0>=Intersection && LA149_0<=Implements)||(LA149_0>=Promisify && LA149_0<=Abstract)||LA149_0==External||(LA149_0>=Private && LA149_0<=Project)||LA149_0==Public||LA149_0==Static||LA149_0==Target||(LA149_0>=Async && LA149_0<=Await)||LA149_0==Union||LA149_0==This||LA149_0==From||LA149_0==Type||(LA149_0>=Get && LA149_0<=Let)||(LA149_0>=Out && LA149_0<=Set)||LA149_0==As||LA149_0==Of||LA149_0==CommercialAt||LA149_0==RULE_IDENTIFIER) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm2_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==LeftCurlyBracket) && (synpred95_InternalN4JSParser())) {
                alt150=1;
            }
            else if ( (LA150_0==LeftSquareBracket) && (synpred95_InternalN4JSParser())) {
                alt150=1;
            }
            else if ( ((LA150_0>=Intersection && LA150_0<=Implements)||(LA150_0>=Promisify && LA150_0<=Abstract)||LA150_0==External||(LA150_0>=Private && LA150_0<=Project)||LA150_0==Public||LA150_0==Static||LA150_0==Target||(LA150_0>=Async && LA150_0<=Await)||LA150_0==Union||LA150_0==This||LA150_0==From||LA150_0==Type||(LA150_0>=Get && LA150_0<=Let)||(LA150_0>=Out && LA150_0<=Set)||LA150_0==As||LA150_0==Of||LA150_0==CommercialAt||LA150_0==RULE_IDENTIFIER) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm3_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==LeftCurlyBracket) && (synpred96_InternalN4JSParser())) {
                alt151=1;
            }
            else if ( (LA151_0==LeftSquareBracket) && (synpred96_InternalN4JSParser())) {
                alt151=1;
            }
            else if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Abstract)||LA151_0==External||(LA151_0>=Private && LA151_0<=Project)||LA151_0==Public||LA151_0==Static||LA151_0==Target||(LA151_0>=Async && LA151_0<=Await)||LA151_0==Union||(LA151_0>=Yield && LA151_0<=This)||LA151_0==From||LA151_0==Type||(LA151_0>=Get && LA151_0<=Let)||(LA151_0>=Out && LA151_0<=Set)||LA151_0==As||LA151_0==Of||LA151_0==CommercialAt||LA151_0==RULE_IDENTIFIER) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);
                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm4_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==LeftCurlyBracket) && (synpred97_InternalN4JSParser())) {
                alt152=1;
            }
            else if ( (LA152_0==LeftSquareBracket) && (synpred97_InternalN4JSParser())) {
                alt152=1;
            }
            else if ( ((LA152_0>=Intersection && LA152_0<=Implements)||(LA152_0>=Promisify && LA152_0<=Abstract)||LA152_0==External||(LA152_0>=Private && LA152_0<=Project)||LA152_0==Public||LA152_0==Static||LA152_0==Target||(LA152_0>=Async && LA152_0<=Await)||LA152_0==Union||LA152_0==This||LA152_0==From||LA152_0==Type||(LA152_0>=Get && LA152_0<=Let)||(LA152_0>=Out && LA152_0<=Set)||LA152_0==As||LA152_0==Of||LA152_0==CommercialAt||LA152_0==RULE_IDENTIFIER) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);
                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm6_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableBinding=ruleVariableBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==EqualsSign) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt155=2;
            int LA155_0 = input.LA(1);
            if ( (LA155_0==EqualsSign) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm1_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm3_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm4_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm6_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt158=2;
            int LA158_0 = input.LA(1);
            if ( (LA158_0==EqualsSign) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop159;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt160=2;
            int LA160_0 = input.LA(1);
            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop163:
            do {
                int alt163=2;
                alt163 = dfa163.predict(input);
                switch (alt163) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_64);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==EqualsSign) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop165:
            do {
                int alt165=2;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop165;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_67);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==Colon) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_64);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==EqualsSign) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop168:
            do {
                int alt168=2;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop168;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_67);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==Colon) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_64);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop171:
            do {
                int alt171=2;
                alt171 = dfa171.predict(input);
                switch (alt171) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop171;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_67);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==Colon) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_64);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt173=2;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==EqualsSign) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop174:
            do {
                int alt174=2;
                alt174 = dfa174.predict(input);
                switch (alt174) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_69);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop174;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_67);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt175=2;
            int LA175_0 = input.LA(1);
            if ( (LA175_0==Colon) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_64);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==EqualsSign) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableDeclarationOrBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclarationOrBinding=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_ExportedVariableBinding_0 = null;
        EObject this_ExportedVariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==LeftCurlyBracket) && (synpred114_InternalN4JSParser())) {
                alt177=1;
            }
            else if ( (LA177_0==LeftSquareBracket) && (synpred114_InternalN4JSParser())) {
                alt177=1;
            }
            else if ( ((LA177_0>=Intersection && LA177_0<=Implements)||(LA177_0>=Promisify && LA177_0<=Abstract)||LA177_0==External||(LA177_0>=Private && LA177_0<=Project)||LA177_0==Public||LA177_0==Static||LA177_0==Target||(LA177_0>=Async && LA177_0<=Await)||LA177_0==Union||(LA177_0>=Yield && LA177_0<=This)||LA177_0==From||LA177_0==Type||(LA177_0>=Get && LA177_0<=Let)||(LA177_0>=Out && LA177_0<=Set)||LA177_0==As||LA177_0==Of||LA177_0==CommercialAt||LA177_0==RULE_IDENTIFIER) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);
                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=ruleExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=ruleExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_ExportedVariableBinding_0 = null;
        EObject this_ExportedVariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==LeftCurlyBracket) && (synpred115_InternalN4JSParser())) {
                alt178=1;
            }
            else if ( (LA178_0==LeftSquareBracket) && (synpred115_InternalN4JSParser())) {
                alt178=1;
            }
            else if ( ((LA178_0>=Intersection && LA178_0<=Implements)||(LA178_0>=Promisify && LA178_0<=Abstract)||LA178_0==External||(LA178_0>=Private && LA178_0<=Project)||LA178_0==Public||LA178_0==Static||LA178_0==Target||(LA178_0>=Async && LA178_0<=Await)||LA178_0==Union||LA178_0==This||LA178_0==From||LA178_0==Type||(LA178_0>=Get && LA178_0<=Let)||(LA178_0>=Out && LA178_0<=Set)||LA178_0==As||LA178_0==Of||LA178_0==CommercialAt||LA178_0==RULE_IDENTIFIER) ) {
                alt178=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);
                throw nvae;
            }
            switch (alt178) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=norm1_ExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=norm1_ExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableBinding=ruleExportedVariableBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_20);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclaration=ruleExportedVariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyStatement=ruleEmptyStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionStatement=ruleExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_0_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_0_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIfStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_72);
            lv_ifStmt_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==Else) ) {
                int LA179_1 = input.LA(2);
                if ( (synpred118_InternalN4JSParser()) ) {
                    alt179=1;
                }
            }
            switch (alt179) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=ruleStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_72);
            lv_ifStmt_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==Else) ) {
                int LA180_1 = input.LA(2);
                if ( (synpred119_InternalN4JSParser()) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=norm1_Statement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIterationStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterationStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterationStatement=ruleIterationStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterationStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt181=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt181=1;
                }
                break;
            case While:
                {
                alt181=2;
                }
                break;
            case For:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);
                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=ruleDoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=ruleWhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=ruleForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt182=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt182=1;
                }
                break;
            case While:
                {
                alt182=2;
                }
                break;
            case For:
                {
                alt182=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);
                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=norm1_DoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=norm1_WhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=norm1_ForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoStatement=ruleDoStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_73);
            lv_statement_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_4_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt183=2;
            alt183 = dfa183.predict(input);
            switch (alt183) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_73);
            lv_statement_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_4_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==Semicolon) ) {
                int LA184_1 = input.LA(2);
                if ( (synpred121_InternalN4JSParser()) ) {
                    alt184=1;
                }
            }
            else if ( (LA184_0==EOF||LA184_0==RULE_ML_COMMENT||LA184_0==RULE_EOL) && (synpred121_InternalN4JSParser())) {
                alt184=1;
            }
            else if ( (LA184_0==RightCurlyBracket) ) {
                int LA184_3 = input.LA(2);
                if ( (synpred121_InternalN4JSParser()) ) {
                    alt184=1;
                }
            }
            switch (alt184) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWhileStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleForStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt185=2;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==Await) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", lv_await_2_0 != null, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt203=2;
            alt203 = dfa203.predict(input);
            switch (alt203) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_76);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", lv_forIn_5_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_expression_6_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt202=3;
                    alt202 = dfa202.predict(input);
                    switch (alt202) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_33);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt194=2;
                            alt194 = dfa194.predict(input);
                            switch (alt194) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_77);
                                    lv_varDeclsOrBindings_9_0=ruleBindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt186=2;
                                    int LA186_0 = input.LA(1);
                                    if ( (LA186_0==In) ) {
                                        alt186=1;
                                    }
                                    else if ( (LA186_0==Of) ) {
                                        alt186=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 186, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt186) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_10_0 != null, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_11_0 != null, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt187=2;
                                    alt187 = dfa187.predict(input);
                                    switch (alt187) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_12_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_79);
                                    lv_varDeclsOrBindings_13_0=norm4_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt193=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt193=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt193=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt193=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 193, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt193) {
                                        case 1 :
                                            {
                                            {
                                            loop188:
                                            do {
                                                int alt188=2;
                                                int LA188_0 = input.LA(1);
                                                if ( (LA188_0==Comma) ) {
                                                    alt188=1;
                                                }
                                                switch (alt188) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_80);
                                            	    lv_varDeclsOrBindings_15_0=ruleVariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop188;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt189=2;
                                            int LA189_0 = input.LA(1);
                                            if ( ((LA189_0>=Intersection && LA189_0<=Implements)||(LA189_0>=Promisify && LA189_0<=Abstract)||(LA189_0>=External && LA189_0<=Function)||(LA189_0>=Private && LA189_0<=Delete)||(LA189_0>=Import && LA189_0<=Public)||LA189_0==Static||(LA189_0>=Target && LA189_0<=Await)||LA189_0==Class||(LA189_0>=False && LA189_0<=Super)||LA189_0==Union||(LA189_0>=Yield && LA189_0<=This)||(LA189_0>=From && LA189_0<=Void)||(LA189_0>=Get && LA189_0<=Set)||LA189_0==PlusSignPlusSign||(LA189_0>=HyphenMinusHyphenMinus && LA189_0<=SolidusEqualsSign)||LA189_0==As||LA189_0==Of||LA189_0==ExclamationMark||LA189_0==LeftParenthesis||LA189_0==PlusSign||LA189_0==HyphenMinus||LA189_0==Solidus||LA189_0==LessThanSign||(LA189_0>=CommercialAt && LA189_0<=LeftSquareBracket)||LA189_0==LeftCurlyBracket||LA189_0==Tilde||(LA189_0>=RULE_TEMPLATE_HEAD && LA189_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA189_0==RULE_IDENTIFIER||LA189_0==RULE_INT||LA189_0==RULE_DOUBLE||(LA189_0>=RULE_BINARY_INT && LA189_0<=RULE_SCIENTIFIC_INT)||LA189_0==RULE_STRING) ) {
                                                alt189=1;
                                            }
                                            switch (alt189) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_82);
                                                    lv_expression_17_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt190=2;
                                            int LA190_0 = input.LA(1);
                                            if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||(LA190_0>=Import && LA190_0<=Public)||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||(LA190_0>=HyphenMinusHyphenMinus && LA190_0<=SolidusEqualsSign)||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_INT||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_BINARY_INT && LA190_0<=RULE_SCIENTIFIC_INT)||LA190_0==RULE_STRING) ) {
                                                alt190=1;
                                            }
                                            switch (alt190) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_updateExpr_19_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_20_0 != null, "in");
                                            }
                                            }
                                            }
                                            int alt191=2;
                                            int LA191_0 = input.LA(1);
                                            if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||(LA191_0>=Import && LA191_0<=Public)||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||(LA191_0>=HyphenMinusHyphenMinus && LA191_0<=SolidusEqualsSign)||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_INT||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_BINARY_INT && LA191_0<=RULE_SCIENTIFIC_INT)||LA191_0==RULE_STRING) ) {
                                                alt191=1;
                                            }
                                            switch (alt191) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_expression_21_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_22_0 != null, "of");
                                            }
                                            }
                                            }
                                            int alt192=2;
                                            int LA192_0 = input.LA(1);
                                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||(LA192_0>=Import && LA192_0<=Public)||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||(LA192_0>=HyphenMinusHyphenMinus && LA192_0<=SolidusEqualsSign)||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_INT||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_BINARY_INT && LA192_0<=RULE_SCIENTIFIC_INT)||LA192_0==RULE_STRING) ) {
                                                alt192=1;
                                            }
                                            switch (alt192) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_expression_23_0=norm1_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_83);
                            lv_initExpr_24_0=ruleExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt199=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt199=1;
                                }
                                break;
                            case In:
                                {
                                alt199=2;
                                }
                                break;
                            case Of:
                                {
                                alt199=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 0, input);
                                throw nvae;
                            }
                            switch (alt199) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt195=2;
                                    int LA195_0 = input.LA(1);
                                    if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||(LA195_0>=Import && LA195_0<=Public)||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||(LA195_0>=HyphenMinusHyphenMinus && LA195_0<=SolidusEqualsSign)||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_INT||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_BINARY_INT && LA195_0<=RULE_SCIENTIFIC_INT)||LA195_0==RULE_STRING) ) {
                                        alt195=1;
                                    }
                                    switch (alt195) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_82);
                                            lv_expression_26_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt196=2;
                                    int LA196_0 = input.LA(1);
                                    if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||(LA196_0>=Import && LA196_0<=Public)||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||(LA196_0>=HyphenMinusHyphenMinus && LA196_0<=SolidusEqualsSign)||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_INT||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_BINARY_INT && LA196_0<=RULE_SCIENTIFIC_INT)||LA196_0==RULE_STRING) ) {
                                        alt196=1;
                                    }
                                    switch (alt196) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_updateExpr_28_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", lv_forIn_29_0 != null, "in");
                                    }
                                    }
                                    }
                                    int alt197=2;
                                    int LA197_0 = input.LA(1);
                                    if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||(LA197_0>=Import && LA197_0<=Public)||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||(LA197_0>=Get && LA197_0<=Set)||LA197_0==PlusSignPlusSign||(LA197_0>=HyphenMinusHyphenMinus && LA197_0<=SolidusEqualsSign)||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_INT||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_BINARY_INT && LA197_0<=RULE_SCIENTIFIC_INT)||LA197_0==RULE_STRING) ) {
                                        alt197=1;
                                    }
                                    switch (alt197) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_30_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", lv_forOf_31_0 != null, "of");
                                    }
                                    }
                                    }
                                    int alt198=2;
                                    int LA198_0 = input.LA(1);
                                    if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||(LA198_0>=Import && LA198_0<=Public)||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||(LA198_0>=HyphenMinusHyphenMinus && LA198_0<=SolidusEqualsSign)||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_INT||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_BINARY_INT && LA198_0<=RULE_SCIENTIFIC_INT)||LA198_0==RULE_STRING) ) {
                                        alt198=1;
                                    }
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_32_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt200=2;
                            int LA200_0 = input.LA(1);
                            if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||(LA200_0>=Import && LA200_0<=Public)||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||(LA200_0>=HyphenMinusHyphenMinus && LA200_0<=SolidusEqualsSign)||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_INT||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_BINARY_INT && LA200_0<=RULE_SCIENTIFIC_INT)||LA200_0==RULE_STRING) ) {
                                alt200=1;
                            }
                            switch (alt200) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_82);
                                    lv_expression_34_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt201=2;
                            int LA201_0 = input.LA(1);
                            if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||(LA201_0>=Import && LA201_0<=Public)||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||(LA201_0>=HyphenMinusHyphenMinus && LA201_0<=SolidusEqualsSign)||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_INT||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_BINARY_INT && LA201_0<=RULE_SCIENTIFIC_INT)||LA201_0==RULE_STRING) ) {
                                alt201=1;
                            }
                            switch (alt201) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_70);
                                    lv_updateExpr_36_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==Await) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", lv_await_2_0 != null, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt222=2;
            alt222 = dfa222.predict(input);
            switch (alt222) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_76);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", lv_forIn_5_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_expression_6_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt221=3;
                    alt221 = dfa221.predict(input);
                    switch (alt221) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_33);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt213=2;
                            alt213 = dfa213.predict(input);
                            switch (alt213) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_77);
                                    lv_varDeclsOrBindings_9_0=norm2_BindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt205=2;
                                    int LA205_0 = input.LA(1);
                                    if ( (LA205_0==In) ) {
                                        alt205=1;
                                    }
                                    else if ( (LA205_0==Of) ) {
                                        alt205=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 205, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt205) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_10_0 != null, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_11_0 != null, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt206=2;
                                    alt206 = dfa206.predict(input);
                                    switch (alt206) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_12_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_79);
                                    lv_varDeclsOrBindings_13_0=norm6_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt212=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt212=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt212=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt212=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 212, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt212) {
                                        case 1 :
                                            {
                                            {
                                            loop207:
                                            do {
                                                int alt207=2;
                                                int LA207_0 = input.LA(1);
                                                if ( (LA207_0==Comma) ) {
                                                    alt207=1;
                                                }
                                                switch (alt207) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_80);
                                            	    lv_varDeclsOrBindings_15_0=norm2_VariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop207;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt208=2;
                                            int LA208_0 = input.LA(1);
                                            if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||(LA208_0>=Import && LA208_0<=Public)||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||(LA208_0>=Get && LA208_0<=Set)||LA208_0==PlusSignPlusSign||(LA208_0>=HyphenMinusHyphenMinus && LA208_0<=SolidusEqualsSign)||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_INT||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_BINARY_INT && LA208_0<=RULE_SCIENTIFIC_INT)||LA208_0==RULE_STRING) ) {
                                                alt208=1;
                                            }
                                            switch (alt208) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_82);
                                                    lv_expression_17_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt209=2;
                                            int LA209_0 = input.LA(1);
                                            if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||(LA209_0>=Import && LA209_0<=Public)||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||(LA209_0>=HyphenMinusHyphenMinus && LA209_0<=SolidusEqualsSign)||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_INT||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_BINARY_INT && LA209_0<=RULE_SCIENTIFIC_INT)||LA209_0==RULE_STRING) ) {
                                                alt209=1;
                                            }
                                            switch (alt209) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_updateExpr_19_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_20_0 != null, "in");
                                            }
                                            }
                                            }
                                            int alt210=2;
                                            int LA210_0 = input.LA(1);
                                            if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||(LA210_0>=Import && LA210_0<=Public)||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||(LA210_0>=HyphenMinusHyphenMinus && LA210_0<=SolidusEqualsSign)||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_INT||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_BINARY_INT && LA210_0<=RULE_SCIENTIFIC_INT)||LA210_0==RULE_STRING) ) {
                                                alt210=1;
                                            }
                                            switch (alt210) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_expression_21_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_22_0 != null, "of");
                                            }
                                            }
                                            }
                                            int alt211=2;
                                            int LA211_0 = input.LA(1);
                                            if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Import && LA211_0<=Public)||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||(LA211_0>=HyphenMinusHyphenMinus && LA211_0<=SolidusEqualsSign)||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_INT||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_BINARY_INT && LA211_0<=RULE_SCIENTIFIC_INT)||LA211_0==RULE_STRING) ) {
                                                alt211=1;
                                            }
                                            switch (alt211) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_70);
                                                    lv_expression_23_0=norm3_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_83);
                            lv_initExpr_24_0=norm2_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt218=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt218=1;
                                }
                                break;
                            case In:
                                {
                                alt218=2;
                                }
                                break;
                            case Of:
                                {
                                alt218=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 218, 0, input);
                                throw nvae;
                            }
                            switch (alt218) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt214=2;
                                    int LA214_0 = input.LA(1);
                                    if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||(LA214_0>=Import && LA214_0<=Public)||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||(LA214_0>=HyphenMinusHyphenMinus && LA214_0<=SolidusEqualsSign)||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_INT||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_BINARY_INT && LA214_0<=RULE_SCIENTIFIC_INT)||LA214_0==RULE_STRING) ) {
                                        alt214=1;
                                    }
                                    switch (alt214) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_82);
                                            lv_expression_26_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt215=2;
                                    int LA215_0 = input.LA(1);
                                    if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||(LA215_0>=Import && LA215_0<=Public)||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||(LA215_0>=HyphenMinusHyphenMinus && LA215_0<=SolidusEqualsSign)||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_INT||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_BINARY_INT && LA215_0<=RULE_SCIENTIFIC_INT)||LA215_0==RULE_STRING) ) {
                                        alt215=1;
                                    }
                                    switch (alt215) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_updateExpr_28_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", lv_forIn_29_0 != null, "in");
                                    }
                                    }
                                    }
                                    int alt216=2;
                                    int LA216_0 = input.LA(1);
                                    if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||(LA216_0>=Import && LA216_0<=Public)||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||(LA216_0>=HyphenMinusHyphenMinus && LA216_0<=SolidusEqualsSign)||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_INT||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_BINARY_INT && LA216_0<=RULE_SCIENTIFIC_INT)||LA216_0==RULE_STRING) ) {
                                        alt216=1;
                                    }
                                    switch (alt216) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_30_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_78); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", lv_forOf_31_0 != null, "of");
                                    }
                                    }
                                    }
                                    int alt217=2;
                                    int LA217_0 = input.LA(1);
                                    if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||(LA217_0>=External && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||(LA217_0>=Import && LA217_0<=Public)||LA217_0==Static||(LA217_0>=Target && LA217_0<=Await)||LA217_0==Class||(LA217_0>=False && LA217_0<=Super)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||(LA217_0>=From && LA217_0<=Void)||(LA217_0>=Get && LA217_0<=Set)||LA217_0==PlusSignPlusSign||(LA217_0>=HyphenMinusHyphenMinus && LA217_0<=SolidusEqualsSign)||LA217_0==As||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||LA217_0==PlusSign||LA217_0==HyphenMinus||LA217_0==Solidus||LA217_0==LessThanSign||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_INT||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_BINARY_INT && LA217_0<=RULE_SCIENTIFIC_INT)||LA217_0==RULE_STRING) ) {
                                        alt217=1;
                                    }
                                    switch (alt217) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_70);
                                            lv_expression_32_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt219=2;
                            int LA219_0 = input.LA(1);
                            if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||(LA219_0>=External && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||(LA219_0>=Import && LA219_0<=Public)||LA219_0==Static||(LA219_0>=Target && LA219_0<=Await)||LA219_0==Class||(LA219_0>=False && LA219_0<=Super)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||(LA219_0>=From && LA219_0<=Void)||(LA219_0>=Get && LA219_0<=Set)||LA219_0==PlusSignPlusSign||(LA219_0>=HyphenMinusHyphenMinus && LA219_0<=SolidusEqualsSign)||LA219_0==As||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||LA219_0==LessThanSign||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_INT||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_BINARY_INT && LA219_0<=RULE_SCIENTIFIC_INT)||LA219_0==RULE_STRING) ) {
                                alt219=1;
                            }
                            switch (alt219) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_82);
                                    lv_expression_34_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt220=2;
                            int LA220_0 = input.LA(1);
                            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||(LA220_0>=External && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||(LA220_0>=Import && LA220_0<=Public)||LA220_0==Static||(LA220_0>=Target && LA220_0<=Await)||LA220_0==Class||(LA220_0>=False && LA220_0<=Super)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||(LA220_0>=From && LA220_0<=Void)||(LA220_0>=Get && LA220_0<=Set)||LA220_0==PlusSignPlusSign||(LA220_0>=HyphenMinusHyphenMinus && LA220_0<=SolidusEqualsSign)||LA220_0==As||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||LA220_0==LessThanSign||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_INT||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_BINARY_INT && LA220_0<=RULE_SCIENTIFIC_INT)||LA220_0==RULE_STRING) ) {
                                alt220=1;
                            }
                            switch (alt220) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_70);
                                    lv_updateExpr_36_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLetIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetIdentifierRef=ruleLetIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLetIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLetAsIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLetAsIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetAsIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetAsIdentifier=ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetAsIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLetAsIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsVariableDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsVariableDeclaration=ruleBindingIdentifierAsVariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleContinueStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleContinueStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContinueStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContinueStatement=ruleContinueStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContinueStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt223=2;
            int LA223_0 = input.LA(1);
            if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||LA223_0==External||(LA223_0>=Private && LA223_0<=Project)||LA223_0==Public||LA223_0==Static||LA223_0==Target||(LA223_0>=Async && LA223_0<=Await)||LA223_0==Union||(LA223_0>=Yield && LA223_0<=This)||LA223_0==From||LA223_0==Type||(LA223_0>=Get && LA223_0<=Let)||(LA223_0>=Out && LA223_0<=Set)||LA223_0==As||LA223_0==Of||LA223_0==RULE_IDENTIFIER) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||LA224_0==External||(LA224_0>=Private && LA224_0<=Project)||LA224_0==Public||LA224_0==Static||LA224_0==Target||(LA224_0>=Async && LA224_0<=Await)||LA224_0==Union||LA224_0==This||LA224_0==From||LA224_0==Type||(LA224_0>=Get && LA224_0<=Let)||(LA224_0>=Out && LA224_0<=Set)||LA224_0==As||LA224_0==Of||LA224_0==RULE_IDENTIFIER) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBreakStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBreakStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBreakStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBreakStatement=ruleBreakStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBreakStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt225=2;
            int LA225_0 = input.LA(1);
            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||LA225_0==External||(LA225_0>=Private && LA225_0<=Project)||LA225_0==Public||LA225_0==Static||LA225_0==Target||(LA225_0>=Async && LA225_0<=Await)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||LA225_0==From||LA225_0==Type||(LA225_0>=Get && LA225_0<=Let)||(LA225_0>=Out && LA225_0<=Set)||LA225_0==As||LA225_0==Of||LA225_0==RULE_IDENTIFIER) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( ((LA226_0>=Intersection && LA226_0<=Implements)||(LA226_0>=Promisify && LA226_0<=Abstract)||LA226_0==External||(LA226_0>=Private && LA226_0<=Project)||LA226_0==Public||LA226_0==Static||LA226_0==Target||(LA226_0>=Async && LA226_0<=Await)||LA226_0==Union||LA226_0==This||LA226_0==From||LA226_0==Type||(LA226_0>=Get && LA226_0<=Let)||(LA226_0>=Out && LA226_0<=Set)||LA226_0==As||LA226_0==Of||LA226_0==RULE_IDENTIFIER) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleReturnStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt227=2;
            int LA227_0 = input.LA(1);
            if ( ((LA227_0>=Intersection && LA227_0<=Implements)||(LA227_0>=Promisify && LA227_0<=Abstract)||(LA227_0>=External && LA227_0<=Function)||(LA227_0>=Private && LA227_0<=Delete)||(LA227_0>=Import && LA227_0<=Public)||LA227_0==Static||(LA227_0>=Target && LA227_0<=Await)||LA227_0==Class||(LA227_0>=False && LA227_0<=Super)||LA227_0==Union||(LA227_0>=Yield && LA227_0<=This)||(LA227_0>=From && LA227_0<=Void)||(LA227_0>=Get && LA227_0<=Set)||LA227_0==PlusSignPlusSign||(LA227_0>=HyphenMinusHyphenMinus && LA227_0<=SolidusEqualsSign)||LA227_0==As||LA227_0==Of||LA227_0==ExclamationMark||LA227_0==LeftParenthesis||LA227_0==PlusSign||LA227_0==HyphenMinus||LA227_0==Solidus||LA227_0==LessThanSign||(LA227_0>=CommercialAt && LA227_0<=LeftSquareBracket)||LA227_0==LeftCurlyBracket||LA227_0==Tilde||(LA227_0>=RULE_TEMPLATE_HEAD && LA227_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA227_0==RULE_IDENTIFIER||LA227_0==RULE_INT||LA227_0==RULE_DOUBLE||(LA227_0>=RULE_BINARY_INT && LA227_0<=RULE_SCIENTIFIC_INT)||LA227_0==RULE_STRING) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||(LA228_0>=External && LA228_0<=Function)||(LA228_0>=Private && LA228_0<=Delete)||(LA228_0>=Import && LA228_0<=Public)||LA228_0==Static||(LA228_0>=Target && LA228_0<=Await)||LA228_0==Class||(LA228_0>=False && LA228_0<=Super)||LA228_0==Union||(LA228_0>=Yield && LA228_0<=This)||(LA228_0>=From && LA228_0<=Void)||(LA228_0>=Get && LA228_0<=Set)||LA228_0==PlusSignPlusSign||(LA228_0>=HyphenMinusHyphenMinus && LA228_0<=SolidusEqualsSign)||LA228_0==As||LA228_0==Of||LA228_0==ExclamationMark||LA228_0==LeftParenthesis||LA228_0==PlusSign||LA228_0==HyphenMinus||LA228_0==Solidus||LA228_0==LessThanSign||(LA228_0>=CommercialAt && LA228_0<=LeftSquareBracket)||LA228_0==LeftCurlyBracket||LA228_0==Tilde||(LA228_0>=RULE_TEMPLATE_HEAD && LA228_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_0==RULE_IDENTIFIER||LA228_0==RULE_INT||LA228_0==RULE_DOUBLE||(LA228_0>=RULE_BINARY_INT && LA228_0<=RULE_SCIENTIFIC_INT)||LA228_0==RULE_STRING) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWithStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWithStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithStatement=ruleWithStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSwitchStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSwitchStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSwitchStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSwitchStatement=ruleSwitchStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSwitchStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);
                if ( (LA229_0==Case) ) {
                    alt229=1;
                }
                switch (alt229) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_cases_5_0=ruleCaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop229;
                }
            } while (true);
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==Default) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_cases_6_0=ruleDefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);
                        if ( (LA230_0==Case) ) {
                            alt230=1;
                        }
                        switch (alt230) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_cases_7_0=ruleCaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop230;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);
                if ( (LA232_0==Case) ) {
                    alt232=1;
                }
                switch (alt232) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_cases_5_0=norm1_CaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop232;
                }
            } while (true);
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==Default) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_cases_6_0=norm1_DefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);
                        if ( (LA233_0==Case) ) {
                            alt233=1;
                        }
                        switch (alt233) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_cases_7_0=norm1_CaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop233;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCaseClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCaseClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseClause=ruleCaseClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_88);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);
                if ( ((LA235_0>=Intersection && LA235_0<=Implements)||(LA235_0>=Promisify && LA235_0<=Function)||(LA235_0>=Private && LA235_0<=Delete)||(LA235_0>=Import && LA235_0<=Break)||(LA235_0>=Class && LA235_0<=This)||(LA235_0>=From && LA235_0<=With)||(LA235_0>=For && LA235_0<=Var)||LA235_0==PlusSignPlusSign||(LA235_0>=HyphenMinusHyphenMinus && LA235_0<=SolidusEqualsSign)||(LA235_0>=As && LA235_0<=If)||LA235_0==Of||LA235_0==ExclamationMark||LA235_0==LeftParenthesis||LA235_0==PlusSign||LA235_0==HyphenMinus||LA235_0==Solidus||(LA235_0>=Semicolon && LA235_0<=LessThanSign)||(LA235_0>=CommercialAt && LA235_0<=LeftSquareBracket)||LA235_0==LeftCurlyBracket||LA235_0==Tilde||(LA235_0>=RULE_TEMPLATE_HEAD && LA235_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA235_0==RULE_IDENTIFIER||LA235_0==RULE_INT||LA235_0==RULE_DOUBLE||(LA235_0>=RULE_BINARY_INT && LA235_0<=RULE_SCIENTIFIC_INT)||LA235_0==RULE_STRING) ) {
                    alt235=1;
                }
                switch (alt235) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop235;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_88);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);
                if ( ((LA236_0>=Intersection && LA236_0<=Implements)||(LA236_0>=Promisify && LA236_0<=Function)||(LA236_0>=Private && LA236_0<=Delete)||(LA236_0>=Import && LA236_0<=Break)||(LA236_0>=Class && LA236_0<=This)||(LA236_0>=From && LA236_0<=With)||(LA236_0>=For && LA236_0<=Var)||LA236_0==PlusSignPlusSign||(LA236_0>=HyphenMinusHyphenMinus && LA236_0<=SolidusEqualsSign)||(LA236_0>=As && LA236_0<=If)||LA236_0==Of||LA236_0==ExclamationMark||LA236_0==LeftParenthesis||LA236_0==PlusSign||LA236_0==HyphenMinus||LA236_0==Solidus||(LA236_0>=Semicolon && LA236_0<=LessThanSign)||(LA236_0>=CommercialAt && LA236_0<=LeftSquareBracket)||LA236_0==LeftCurlyBracket||LA236_0==Tilde||(LA236_0>=RULE_TEMPLATE_HEAD && LA236_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA236_0==RULE_IDENTIFIER||LA236_0==RULE_INT||LA236_0==RULE_DOUBLE||(LA236_0>=RULE_BINARY_INT && LA236_0<=RULE_SCIENTIFIC_INT)||LA236_0==RULE_STRING) ) {
                    alt236=1;
                }
                switch (alt236) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop236;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultClause=ruleDefaultClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_88); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);
                if ( ((LA237_0>=Intersection && LA237_0<=Implements)||(LA237_0>=Promisify && LA237_0<=Function)||(LA237_0>=Private && LA237_0<=Delete)||(LA237_0>=Import && LA237_0<=Break)||(LA237_0>=Class && LA237_0<=This)||(LA237_0>=From && LA237_0<=With)||(LA237_0>=For && LA237_0<=Var)||LA237_0==PlusSignPlusSign||(LA237_0>=HyphenMinusHyphenMinus && LA237_0<=SolidusEqualsSign)||(LA237_0>=As && LA237_0<=If)||LA237_0==Of||LA237_0==ExclamationMark||LA237_0==LeftParenthesis||LA237_0==PlusSign||LA237_0==HyphenMinus||LA237_0==Solidus||(LA237_0>=Semicolon && LA237_0<=LessThanSign)||(LA237_0>=CommercialAt && LA237_0<=LeftSquareBracket)||LA237_0==LeftCurlyBracket||LA237_0==Tilde||(LA237_0>=RULE_TEMPLATE_HEAD && LA237_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA237_0==RULE_IDENTIFIER||LA237_0==RULE_INT||LA237_0==RULE_DOUBLE||(LA237_0>=RULE_BINARY_INT && LA237_0<=RULE_SCIENTIFIC_INT)||LA237_0==RULE_STRING) ) {
                    alt237=1;
                }
                switch (alt237) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop237;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_88); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);
                if ( ((LA238_0>=Intersection && LA238_0<=Implements)||(LA238_0>=Promisify && LA238_0<=Function)||(LA238_0>=Private && LA238_0<=Delete)||(LA238_0>=Import && LA238_0<=Break)||(LA238_0>=Class && LA238_0<=This)||(LA238_0>=From && LA238_0<=With)||(LA238_0>=For && LA238_0<=Var)||LA238_0==PlusSignPlusSign||(LA238_0>=HyphenMinusHyphenMinus && LA238_0<=SolidusEqualsSign)||(LA238_0>=As && LA238_0<=If)||LA238_0==Of||LA238_0==ExclamationMark||LA238_0==LeftParenthesis||LA238_0==PlusSign||LA238_0==HyphenMinus||LA238_0==Solidus||(LA238_0>=Semicolon && LA238_0<=LessThanSign)||(LA238_0>=CommercialAt && LA238_0<=LeftSquareBracket)||LA238_0==LeftCurlyBracket||LA238_0==Tilde||(LA238_0>=RULE_TEMPLATE_HEAD && LA238_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA238_0==RULE_IDENTIFIER||LA238_0==RULE_INT||LA238_0==RULE_DOUBLE||(LA238_0>=RULE_BINARY_INT && LA238_0<=RULE_SCIENTIFIC_INT)||LA238_0==RULE_STRING) ) {
                    alt238=1;
                }
                switch (alt238) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop238;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLabelledStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLabelledStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelledStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelledStatement=ruleLabelledStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelledStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_88);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_88);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThrowStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThrowStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThrowStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThrowStatement=ruleThrowStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThrowStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTryStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTryStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTryStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTryStatement=ruleTryStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTryStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_89);
            lv_block_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==Catch) ) {
                alt240=1;
            }
            else if ( (LA240_0==Finally) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);
                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_90);
                    lv_catch_2_0=ruleCatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt239=2;
                    int LA239_0 = input.LA(1);
                    if ( (LA239_0==Finally) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=ruleFinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=ruleFinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_89);
            lv_block_1_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==Catch) ) {
                alt242=1;
            }
            else if ( (LA242_0==Finally) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);
                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_90);
                    lv_catch_2_0=norm1_CatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt241=2;
                    int LA241_0 = input.LA(1);
                    if ( (LA241_0==Finally) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=norm1_FinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=norm1_FinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchBlock=ruleCatchBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_catchVariable_3_0=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_catchVariable_3_0=norm1_CatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchVariable=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        	enterRule();
        try {
            {
            int alt243=3;
            alt243 = dfa243.predict(input);
            switch (alt243) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_3_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        	enterRule();
        try {
            {
            int alt244=3;
            alt244 = dfa244.predict(input);
            switch (alt244) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_3_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFinallyBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFinallyBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFinallyBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFinallyBlock=ruleFinallyBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFinallyBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDebuggerStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDebuggerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDebuggerStatement=ruleDebuggerStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDebuggerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDebuggerStatementAccess().getDebuggerStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Debugger,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        enterRule();
        try { 
        	{
            int alt245=16;
            // REPLACEMENT rulePrimaryExpression.java.replacement START
            try {
                alt245 = dfa245.predict(input);
            } catch (NoViableAltException re) {
            	int as = input.LA(1);
            	if (as==Async) { alt245=3; }
            	else throw re;
            }
            // REPLACEMENT rulePrimaryExpression.java.replacement END
            switch (alt245) {
                case 1 : 
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=ruleIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=ruleImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=ruleParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=ruleArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=ruleObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=ruleParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=ruleAnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=ruleN4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=ruleTemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        	enterRule();
        try {
            {
            int alt246=16;
            alt246 = dfa246.predict(input);
            switch (alt246) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=norm1_IdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=norm1_ImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=norm1_ParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=norm1_ArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=norm1_ObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=norm1_ParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=norm1_AnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=norm1_N4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=norm1_TemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParenExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParenExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenExpression=ruleParenExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_70);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierRef=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSuperLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSuperLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuperLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuperLiteral=ruleSuperLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuperLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSuperLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayLiteral=ruleArrayLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);
                if ( (LA247_0==Comma) ) {
                    alt247=1;
                }
                switch (alt247) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop247;
                }
            } while (true);
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( ((LA252_0>=Intersection && LA252_0<=Implements)||(LA252_0>=Promisify && LA252_0<=Abstract)||(LA252_0>=External && LA252_0<=Function)||(LA252_0>=Private && LA252_0<=Delete)||(LA252_0>=Import && LA252_0<=Public)||LA252_0==Static||(LA252_0>=Target && LA252_0<=Await)||LA252_0==Class||(LA252_0>=False && LA252_0<=Super)||LA252_0==Union||(LA252_0>=Yield && LA252_0<=This)||(LA252_0>=From && LA252_0<=Void)||LA252_0==FullStopFullStopFullStop||(LA252_0>=Get && LA252_0<=Set)||LA252_0==PlusSignPlusSign||(LA252_0>=HyphenMinusHyphenMinus && LA252_0<=SolidusEqualsSign)||LA252_0==As||LA252_0==Of||LA252_0==ExclamationMark||LA252_0==LeftParenthesis||LA252_0==PlusSign||LA252_0==HyphenMinus||LA252_0==Solidus||LA252_0==LessThanSign||(LA252_0>=CommercialAt && LA252_0<=LeftSquareBracket)||LA252_0==LeftCurlyBracket||LA252_0==Tilde||(LA252_0>=RULE_TEMPLATE_HEAD && LA252_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA252_0==RULE_IDENTIFIER||LA252_0==RULE_INT||LA252_0==RULE_DOUBLE||(LA252_0>=RULE_BINARY_INT && LA252_0<=RULE_SCIENTIFIC_INT)||LA252_0==RULE_STRING) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_93);
                    lv_elements_3_0=ruleArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop249:
                    do {
                        int alt249=2;
                        alt249 = dfa249.predict(input);
                        switch (alt249) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_94); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop248:
                    	    do {
                    	        int alt248=2;
                    	        int LA248_0 = input.LA(1);
                    	        if ( (LA248_0==Comma) ) {
                    	            alt248=1;
                    	        }
                    	        switch (alt248) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_94);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop248;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_elements_6_0=ruleArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop249;
                        }
                    } while (true);
                    int alt251=2;
                    int LA251_0 = input.LA(1);
                    if ( (LA251_0==Comma) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", lv_trailingComma_7_0 != null, ",");
                            }
                            }
                            }
                            loop250:
                            do {
                                int alt250=2;
                                int LA250_0 = input.LA(1);
                                if ( (LA250_0==Comma) ) {
                                    alt250=1;
                                }
                                switch (alt250) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_93);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop250;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);
                if ( (LA253_0==Comma) ) {
                    alt253=1;
                }
                switch (alt253) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop253;
                }
            } while (true);
            int alt258=2;
            int LA258_0 = input.LA(1);
            if ( ((LA258_0>=Intersection && LA258_0<=Implements)||(LA258_0>=Promisify && LA258_0<=Abstract)||(LA258_0>=External && LA258_0<=Function)||(LA258_0>=Private && LA258_0<=Delete)||(LA258_0>=Import && LA258_0<=Public)||LA258_0==Static||(LA258_0>=Target && LA258_0<=Await)||LA258_0==Class||(LA258_0>=False && LA258_0<=Super)||LA258_0==Union||(LA258_0>=Yield && LA258_0<=This)||(LA258_0>=From && LA258_0<=Void)||LA258_0==FullStopFullStopFullStop||(LA258_0>=Get && LA258_0<=Set)||LA258_0==PlusSignPlusSign||(LA258_0>=HyphenMinusHyphenMinus && LA258_0<=SolidusEqualsSign)||LA258_0==As||LA258_0==Of||LA258_0==ExclamationMark||LA258_0==LeftParenthesis||LA258_0==PlusSign||LA258_0==HyphenMinus||LA258_0==Solidus||LA258_0==LessThanSign||(LA258_0>=CommercialAt && LA258_0<=LeftSquareBracket)||LA258_0==LeftCurlyBracket||LA258_0==Tilde||(LA258_0>=RULE_TEMPLATE_HEAD && LA258_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA258_0==RULE_IDENTIFIER||LA258_0==RULE_INT||LA258_0==RULE_DOUBLE||(LA258_0>=RULE_BINARY_INT && LA258_0<=RULE_SCIENTIFIC_INT)||LA258_0==RULE_STRING) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_93);
                    lv_elements_3_0=norm1_ArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop255:
                    do {
                        int alt255=2;
                        alt255 = dfa255.predict(input);
                        switch (alt255) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_94); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop254:
                    	    do {
                    	        int alt254=2;
                    	        int LA254_0 = input.LA(1);
                    	        if ( (LA254_0==Comma) ) {
                    	            alt254=1;
                    	        }
                    	        switch (alt254) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_94);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop254;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_elements_6_0=norm1_ArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop255;
                        }
                    } while (true);
                    int alt257=2;
                    int LA257_0 = input.LA(1);
                    if ( (LA257_0==Comma) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", lv_trailingComma_7_0 != null, ",");
                            }
                            }
                            }
                            loop256:
                            do {
                                int alt256=2;
                                int LA256_0 = input.LA(1);
                                if ( (LA256_0==Comma) ) {
                                    alt256=1;
                                }
                                switch (alt256) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_93);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop256;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayPadding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayPadding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayPaddingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayPadding=ruleArrayPadding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayPadding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayPadding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayPaddingAccess().getArrayPaddingAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayElement=ruleArrayElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==FullStopFullStopFullStop) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_1_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt260=2;
            int LA260_0 = input.LA(1);
            if ( (LA260_0==FullStopFullStopFullStop) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_1_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectLiteral=ruleObjectLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( ((LA263_0>=Intersection && LA263_0<=With)||LA263_0==FullStopFullStopFullStop||(LA263_0>=For && LA263_0<=Var)||(LA263_0>=As && LA263_0<=Of)||LA263_0==LeftParenthesis||(LA263_0>=Asterisk && LA263_0<=PlusSign)||LA263_0==HyphenMinus||LA263_0==LessThanSign||(LA263_0>=QuestionMark && LA263_0<=LeftSquareBracket)||LA263_0==LeftCurlyBracket||LA263_0==Tilde||LA263_0==RULE_IDENTIFIER||LA263_0==RULE_INT||LA263_0==RULE_DOUBLE||(LA263_0>=RULE_BINARY_INT && LA263_0<=RULE_SCIENTIFIC_INT)||LA263_0==RULE_STRING) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_propertyAssignments_2_0=rulePropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop261:
                    do {
                        int alt261=2;
                        int LA261_0 = input.LA(1);
                        if ( (LA261_0==Comma) ) {
                            int LA261_1 = input.LA(2);
                            if ( ((LA261_1>=Intersection && LA261_1<=With)||LA261_1==FullStopFullStopFullStop||(LA261_1>=For && LA261_1<=Var)||(LA261_1>=As && LA261_1<=Of)||LA261_1==LeftParenthesis||(LA261_1>=Asterisk && LA261_1<=PlusSign)||LA261_1==HyphenMinus||LA261_1==LessThanSign||(LA261_1>=QuestionMark && LA261_1<=LeftSquareBracket)||LA261_1==LeftCurlyBracket||LA261_1==Tilde||LA261_1==RULE_IDENTIFIER||LA261_1==RULE_INT||LA261_1==RULE_DOUBLE||(LA261_1>=RULE_BINARY_INT && LA261_1<=RULE_SCIENTIFIC_INT)||LA261_1==RULE_STRING) ) {
                                alt261=1;
                            }
                        }
                        switch (alt261) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_propertyAssignments_4_0=rulePropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop261;
                        }
                    } while (true);
                    int alt262=2;
                    int LA262_0 = input.LA(1);
                    if ( (LA262_0==Comma) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( ((LA266_0>=Intersection && LA266_0<=With)||LA266_0==FullStopFullStopFullStop||(LA266_0>=For && LA266_0<=Var)||(LA266_0>=As && LA266_0<=Of)||LA266_0==LeftParenthesis||(LA266_0>=Asterisk && LA266_0<=PlusSign)||LA266_0==HyphenMinus||LA266_0==LessThanSign||(LA266_0>=QuestionMark && LA266_0<=LeftSquareBracket)||LA266_0==LeftCurlyBracket||LA266_0==Tilde||LA266_0==RULE_IDENTIFIER||LA266_0==RULE_INT||LA266_0==RULE_DOUBLE||(LA266_0>=RULE_BINARY_INT && LA266_0<=RULE_SCIENTIFIC_INT)||LA266_0==RULE_STRING) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_propertyAssignments_2_0=norm1_PropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop264:
                    do {
                        int alt264=2;
                        int LA264_0 = input.LA(1);
                        if ( (LA264_0==Comma) ) {
                            int LA264_1 = input.LA(2);
                            if ( ((LA264_1>=Intersection && LA264_1<=With)||LA264_1==FullStopFullStopFullStop||(LA264_1>=For && LA264_1<=Var)||(LA264_1>=As && LA264_1<=Of)||LA264_1==LeftParenthesis||(LA264_1>=Asterisk && LA264_1<=PlusSign)||LA264_1==HyphenMinus||LA264_1==LessThanSign||(LA264_1>=QuestionMark && LA264_1<=LeftSquareBracket)||LA264_1==LeftCurlyBracket||LA264_1==Tilde||LA264_1==RULE_IDENTIFIER||LA264_1==RULE_INT||LA264_1==RULE_DOUBLE||(LA264_1>=RULE_BINARY_INT && LA264_1<=RULE_SCIENTIFIC_INT)||LA264_1==RULE_STRING) ) {
                                alt264=1;
                            }
                        }
                        switch (alt264) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_propertyAssignments_4_0=norm1_PropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop264;
                        }
                    } while (true);
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==Comma) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignment=rulePropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt267=7;
            alt267 = dfa267.predict(input);
            switch (alt267) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=ruleAnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=rulePropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=rulePropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=rulePropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=rulePropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=rulePropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=rulePropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt268=7;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=norm1_AnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=norm1_PropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=norm1_PropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=norm1_PropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=norm1_PropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=norm1_PropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=norm1_PropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedPropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedPropertyAssignment=ruleAnnotatedPropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedPropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRefNode_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredReturnTypeRefNode_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRefNode_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_97);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt276=6;
            alt276 = dfa276.predict(input);
            switch (alt276) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt269=2;
                    alt269 = dfa269.predict(input);
                    switch (alt269) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_98);
                            lv_declaredTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRefNode",
                              										lv_declaredTypeRefNode_2_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_GetterHeader_7=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredName_11_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==QuestionMark) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_12_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_fpar_14_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==LessThanSign) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_100);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt272=2;
                    alt272 = dfa272.predict(input);
                    switch (alt272) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_declaredReturnTypeRefNode_19_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredReturnTypeRefNode",
                              										lv_declaredReturnTypeRefNode_19_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt273=2;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==Asterisk) ) {
                        alt273=1;
                    }
                    else if ( ((LA273_0>=Intersection && LA273_0<=With)||(LA273_0>=For && LA273_0<=Var)||(LA273_0>=As && LA273_0<=Of)||LA273_0==LeftSquareBracket||LA273_0==RULE_IDENTIFIER||LA273_0==RULE_INT||LA273_0==RULE_DOUBLE||(LA273_0>=RULE_BINARY_INT && LA273_0<=RULE_OCTAL_INT)||(LA273_0>=RULE_HEX_INT && LA273_0<=RULE_SCIENTIFIC_INT)||LA273_0==RULE_STRING) ) {
                        alt273=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 273, 0, input);
                        throw nvae;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_20_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_45);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_47);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt274=2;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==Semicolon) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt275=2;
                    alt275 = dfa275.predict(input);
                    switch (alt275) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_102);
                            lv_declaredTypeRefNode_27_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRefNode",
                              								lv_declaredTypeRefNode_27_0,
                              								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=rulePropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRefNode_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredReturnTypeRefNode_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRefNode_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_97);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt284=6;
            alt284 = dfa284.predict(input);
            switch (alt284) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt277=2;
                    alt277 = dfa277.predict(input);
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_98);
                            lv_declaredTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRefNode",
                              										lv_declaredTypeRefNode_2_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_GetterHeader_7=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredName_11_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==QuestionMark) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_12_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_fpar_14_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==LessThanSign) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_100);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt280=2;
                    alt280 = dfa280.predict(input);
                    switch (alt280) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_declaredReturnTypeRefNode_19_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredReturnTypeRefNode",
                              										lv_declaredReturnTypeRefNode_19_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt281=2;
                    int LA281_0 = input.LA(1);
                    if ( (LA281_0==Asterisk) ) {
                        alt281=1;
                    }
                    else if ( ((LA281_0>=Intersection && LA281_0<=With)||(LA281_0>=For && LA281_0<=Var)||(LA281_0>=As && LA281_0<=Of)||LA281_0==LeftSquareBracket||LA281_0==RULE_IDENTIFIER||LA281_0==RULE_INT||LA281_0==RULE_DOUBLE||(LA281_0>=RULE_BINARY_INT && LA281_0<=RULE_OCTAL_INT)||(LA281_0>=RULE_HEX_INT && LA281_0<=RULE_SCIENTIFIC_INT)||LA281_0==RULE_STRING) ) {
                        alt281=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 281, 0, input);
                        throw nvae;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_20_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_45);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_47);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt282=2;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==Semicolon) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_102);
                            lv_declaredTypeRefNode_27_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRefNode",
                              								lv_declaredTypeRefNode_27_0,
                              								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=norm1_PropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyMethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyMethodDeclaration=rulePropertyMethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeParameters_1 = null;
        EObject lv_declaredReturnTypeRefNode_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==LessThanSign) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_TypeParameters_1=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt286=2;
            alt286 = dfa286.predict(input);
            switch (alt286) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_declaredReturnTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"declaredReturnTypeRefNode",
                      								lv_declaredReturnTypeRefNode_2_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_100);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==Asterisk) ) {
                alt287=1;
            }
            else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_INT||LA287_0==RULE_DOUBLE||(LA287_0>=RULE_BINARY_INT && LA287_0<=RULE_OCTAL_INT)||(LA287_0>=RULE_HEX_INT && LA287_0<=RULE_SCIENTIFIC_INT)||LA287_0==RULE_STRING) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==Semicolon) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeParameters_1 = null;
        EObject lv_declaredReturnTypeRefNode_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt289=2;
            int LA289_0 = input.LA(1);
            if ( (LA289_0==LessThanSign) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_TypeParameters_1=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt290=2;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_declaredReturnTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"declaredReturnTypeRefNode",
                      								lv_declaredReturnTypeRefNode_2_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_100);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt291=2;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==Asterisk) ) {
                alt291=1;
            }
            else if ( ((LA291_0>=Intersection && LA291_0<=With)||(LA291_0>=For && LA291_0<=Var)||(LA291_0>=As && LA291_0<=Of)||LA291_0==LeftSquareBracket||LA291_0==RULE_IDENTIFIER||LA291_0==RULE_INT||LA291_0==RULE_DOUBLE||(LA291_0>=RULE_BINARY_INT && LA291_0<=RULE_OCTAL_INT)||(LA291_0>=RULE_HEX_INT && LA291_0<=RULE_SCIENTIFIC_INT)||LA291_0==RULE_STRING) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==Semicolon) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePair = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePair=rulePropertyNameValuePair();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePair; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt293=2;
            alt293 = dfa293.predict(input);
            switch (alt293) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredTypeRefNode_1_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_1_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_103);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==QuestionMark) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_88); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt295=2;
            alt295 = dfa295.predict(input);
            switch (alt295) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredTypeRefNode_1_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_1_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_103);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==QuestionMark) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_88); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleName=rulePropertyNameValuePairSingleName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRefNode_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt297=2;
            alt297 = dfa297.predict(input);
            switch (alt297) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_102);
                    lv_declaredTypeRefNode_0_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRefNode",
                      						lv_declaredTypeRefNode_0_0,
                      						"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRefNode_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt298=2;
            alt298 = dfa298.predict(input);
            switch (alt298) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_102);
                    lv_declaredTypeRefNode_0_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRefNode",
                      						lv_declaredTypeRefNode_0_0,
                      						"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_PropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleNamePart = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleNamePart=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleNamePart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_64);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==EqualsSign) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_53);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_64);
            this_IdentifierRef_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt300=2;
            int LA300_0 = input.LA(1);
            if ( (LA300_0==EqualsSign) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_53);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyGetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyGetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyGetterDeclaration=rulePropertyGetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyGetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_6);
            this_GetterHeader_1=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_6);
            this_GetterHeader_1=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySetterDeclaration=rulePropertySetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==QuestionMark) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_fpar_5_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( (LA302_0==QuestionMark) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_fpar_5_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySpread() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySpread = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySpreadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySpread=rulePropertySpread();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySpread; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedCallExpression=ruleParameterizedCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_12);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_104);
            lv_target_1_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==QuestionMarkFullStop) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_12);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_104);
            lv_target_1_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==QuestionMarkFullStop) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConcreteTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_105);
            lv_typeArgs_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);
                if ( (LA305_0==Comma) ) {
                    alt305=1;
                }
                switch (alt305) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeReferenceNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_105);
            	    lv_typeArgs_3_0=ruleTypeReferenceNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.N4JS.TypeReferenceNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop305;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRefNode_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredTypeRefRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_declaredReturnTypeRefNode_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getDeclaredReturnTypeRefNodeTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_declaredReturnTypeRefNode_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredReturnTypeRefRule());
              					}
              					set(
              						current,
              						"declaredReturnTypeRefNode",
              						lv_declaredReturnTypeRefNode_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeReferenceNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeReferenceNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceNode=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReferenceNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeReferenceNodeAccess().getTypeRefInASTTypeRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeReferenceNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.TypeRef");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeReferenceWithModifiersNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeReferenceWithModifiersNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceWithModifiersNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceWithModifiersNode=ruleTypeReferenceWithModifiersNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceWithModifiersNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReferenceWithModifiersNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeReferenceWithModifiersNodeAccess().getTypeRefInASTTypeRefWithModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeReferenceWithModifiersNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.TypeRefWithModifiers");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominalNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefNominalNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominalNode=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominalNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominalNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalNodeAccess().getTypeRefInASTParameterizedTypeRefNominalParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getParameterizedTypeRefNominalNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.ParameterizedTypeRefNominal");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpressionNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayTypeExpressionNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpressionNode=ruleArrayTypeExpressionNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpressionNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpressionNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getArrayTypeExpressionNodeAccess().getTypeRefInASTArrayTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getArrayTypeExpressionNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.ArrayTypeExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportCallExpression=ruleImportCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLeftHandSideExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftHandSideExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftHandSideExpression=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftHandSideExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_106);
            this_MemberExpression_0=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==QuestionMarkFullStop||LA310_0==LeftParenthesis) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt306=2;
                    int LA306_0 = input.LA(1);
                    if ( (LA306_0==QuestionMarkFullStop) ) {
                        alt306=1;
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_107);
                    this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop309:
                    do {
                        int alt309=5;
                        int LA309_0 = input.LA(1);
                        if ( (LA309_0==QuestionMarkFullStop) ) {
                            int LA309_2 = input.LA(2);
                            if ( ((LA309_2>=Intersection && LA309_2<=With)||(LA309_2>=For && LA309_2<=Var)||(LA309_2>=As && LA309_2<=Of)||LA309_2==LessThanSign||LA309_2==RULE_IDENTIFIER) ) {
                                alt309=3;
                            }
                            else if ( (LA309_2==LeftSquareBracket) ) {
                                alt309=2;
                            }
                            else if ( (LA309_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred190_InternalN4JSParser())) {
                                alt309=4;
                            }
                            else if ( (LA309_2==RULE_TEMPLATE_HEAD) && (synpred190_InternalN4JSParser())) {
                                alt309=4;
                            }
                            else if ( (LA309_2==LeftParenthesis) ) {
                                alt309=1;
                            }
                        }
                        else if ( (LA309_0==LeftParenthesis) ) {
                            alt309=1;
                        }
                        else if ( (LA309_0==LeftSquareBracket) ) {
                            alt309=2;
                        }
                        else if ( (LA309_0==FullStop) ) {
                            alt309=3;
                        }
                        else if ( (LA309_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred190_InternalN4JSParser())) {
                            alt309=4;
                        }
                        else if ( (LA309_0==RULE_TEMPLATE_HEAD) && (synpred190_InternalN4JSParser())) {
                            alt309=4;
                        }
                        switch (alt309) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt307=2;
                    	    int LA307_0 = input.LA(1);
                    	    if ( (LA307_0==QuestionMarkFullStop) ) {
                    	        alt307=1;
                    	    }
                    	    switch (alt307) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_5_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ArgumentsWithParentheses_6=ruleArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_IndexedAccessExpressionTail_8=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt308=2;
                    	    int LA308_0 = input.LA(1);
                    	    if ( (LA308_0==QuestionMarkFullStop) ) {
                    	        alt308=1;
                    	    }
                    	    switch (alt308) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_12_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    lv_template_13_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop309;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_106);
            this_MemberExpression_0=norm1_MemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==QuestionMarkFullStop||LA315_0==LeftParenthesis) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt311=2;
                    int LA311_0 = input.LA(1);
                    if ( (LA311_0==QuestionMarkFullStop) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_107);
                    this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop314:
                    do {
                        int alt314=5;
                        int LA314_0 = input.LA(1);
                        if ( (LA314_0==QuestionMarkFullStop) ) {
                            int LA314_2 = input.LA(2);
                            if ( (LA314_2==LeftSquareBracket) ) {
                                alt314=2;
                            }
                            else if ( ((LA314_2>=Intersection && LA314_2<=With)||(LA314_2>=For && LA314_2<=Var)||(LA314_2>=As && LA314_2<=Of)||LA314_2==LessThanSign||LA314_2==RULE_IDENTIFIER) ) {
                                alt314=3;
                            }
                            else if ( (LA314_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred191_InternalN4JSParser())) {
                                alt314=4;
                            }
                            else if ( (LA314_2==RULE_TEMPLATE_HEAD) && (synpred191_InternalN4JSParser())) {
                                alt314=4;
                            }
                            else if ( (LA314_2==LeftParenthesis) ) {
                                alt314=1;
                            }
                        }
                        else if ( (LA314_0==LeftParenthesis) ) {
                            alt314=1;
                        }
                        else if ( (LA314_0==LeftSquareBracket) ) {
                            alt314=2;
                        }
                        else if ( (LA314_0==FullStop) ) {
                            alt314=3;
                        }
                        else if ( (LA314_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred191_InternalN4JSParser())) {
                            alt314=4;
                        }
                        else if ( (LA314_0==RULE_TEMPLATE_HEAD) && (synpred191_InternalN4JSParser())) {
                            alt314=4;
                        }
                        switch (alt314) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt312=2;
                    	    int LA312_0 = input.LA(1);
                    	    if ( (LA312_0==QuestionMarkFullStop) ) {
                    	        alt312=1;
                    	    }
                    	    switch (alt312) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_104); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_5_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ArgumentsWithParentheses_6=norm1_ArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_IndexedAccessExpressionTail_8=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt313=2;
                    	    int LA313_0 = input.LA(1);
                    	    if ( (LA313_0==QuestionMarkFullStop) ) {
                    	        alt313=1;
                    	    }
                    	    switch (alt313) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_12_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    lv_template_13_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop314;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_109); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( ((LA316_0>=Intersection && LA316_0<=Implements)||(LA316_0>=Promisify && LA316_0<=Abstract)||(LA316_0>=External && LA316_0<=Function)||(LA316_0>=Private && LA316_0<=Delete)||(LA316_0>=Import && LA316_0<=Public)||LA316_0==Static||(LA316_0>=Target && LA316_0<=Await)||LA316_0==Class||(LA316_0>=False && LA316_0<=Super)||LA316_0==Union||(LA316_0>=Yield && LA316_0<=This)||(LA316_0>=From && LA316_0<=Void)||LA316_0==FullStopFullStopFullStop||(LA316_0>=Get && LA316_0<=Set)||LA316_0==PlusSignPlusSign||(LA316_0>=HyphenMinusHyphenMinus && LA316_0<=SolidusEqualsSign)||LA316_0==As||LA316_0==Of||LA316_0==ExclamationMark||LA316_0==LeftParenthesis||LA316_0==PlusSign||LA316_0==HyphenMinus||LA316_0==Solidus||LA316_0==LessThanSign||(LA316_0>=CommercialAt && LA316_0<=LeftSquareBracket)||LA316_0==LeftCurlyBracket||LA316_0==Tilde||(LA316_0>=RULE_TEMPLATE_HEAD && LA316_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA316_0==RULE_IDENTIFIER||LA316_0==RULE_INT||LA316_0==RULE_DOUBLE||(LA316_0>=RULE_BINARY_INT && LA316_0<=RULE_SCIENTIFIC_INT)||LA316_0==RULE_STRING) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_70);
                    this_Arguments_1=ruleArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_109); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( ((LA317_0>=Intersection && LA317_0<=Implements)||(LA317_0>=Promisify && LA317_0<=Abstract)||(LA317_0>=External && LA317_0<=Function)||(LA317_0>=Private && LA317_0<=Delete)||(LA317_0>=Import && LA317_0<=Public)||LA317_0==Static||(LA317_0>=Target && LA317_0<=Await)||LA317_0==Class||(LA317_0>=False && LA317_0<=Super)||LA317_0==Union||(LA317_0>=Yield && LA317_0<=This)||(LA317_0>=From && LA317_0<=Void)||LA317_0==FullStopFullStopFullStop||(LA317_0>=Get && LA317_0<=Set)||LA317_0==PlusSignPlusSign||(LA317_0>=HyphenMinusHyphenMinus && LA317_0<=SolidusEqualsSign)||LA317_0==As||LA317_0==Of||LA317_0==ExclamationMark||LA317_0==LeftParenthesis||LA317_0==PlusSign||LA317_0==HyphenMinus||LA317_0==Solidus||LA317_0==LessThanSign||(LA317_0>=CommercialAt && LA317_0<=LeftSquareBracket)||LA317_0==LeftCurlyBracket||LA317_0==Tilde||(LA317_0>=RULE_TEMPLATE_HEAD && LA317_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA317_0==RULE_IDENTIFIER||LA317_0==RULE_INT||LA317_0==RULE_DOUBLE||(LA317_0>=RULE_BINARY_INT && LA317_0<=RULE_SCIENTIFIC_INT)||LA317_0==RULE_STRING) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_70);
                    this_Arguments_1=norm1_Arguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_36);
            lv_arguments_0_0=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop318:
            do {
                int alt318=2;
                int LA318_0 = input.LA(1);
                if ( (LA318_0==Comma) ) {
                    alt318=1;
                }
                switch (alt318) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_110); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_arguments_2_0=ruleArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop318;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Arguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_36);
            lv_arguments_0_0=norm1_Argument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);
                if ( (LA319_0==Comma) ) {
                    alt319=1;
                }
                switch (alt319) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_110); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_arguments_2_0=norm1_Argument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop319;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArgument=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==FullStopFullStopFullStop) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Argument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt321=2;
            int LA321_0 = input.LA(1);
            if ( (LA321_0==FullStopFullStopFullStop) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMemberExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMemberExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMemberExpression=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMemberExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt329=3;
            alt329 = dfa329.predict(input);
            switch (alt329) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_113);
                    lv_callee_6_0=ruleMemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt322=2;
                    int LA322_0 = input.LA(1);
                    if ( (LA322_0==LessThanSign) ) {
                        int LA322_1 = input.LA(2);
                        if ( (synpred194_InternalN4JSParser()) ) {
                            alt322=1;
                        }
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_114);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==LeftParenthesis) ) {
                        int LA326_1 = input.LA(2);
                        if ( (synpred195_InternalN4JSParser()) ) {
                            alt326=1;
                        }
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_109); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", lv_withArgs_8_0 != null, "(");
                            }
                            }
                            }
                            int alt323=2;
                            int LA323_0 = input.LA(1);
                            if ( ((LA323_0>=Intersection && LA323_0<=Implements)||(LA323_0>=Promisify && LA323_0<=Abstract)||(LA323_0>=External && LA323_0<=Function)||(LA323_0>=Private && LA323_0<=Delete)||(LA323_0>=Import && LA323_0<=Public)||LA323_0==Static||(LA323_0>=Target && LA323_0<=Await)||LA323_0==Class||(LA323_0>=False && LA323_0<=Super)||LA323_0==Union||(LA323_0>=Yield && LA323_0<=This)||(LA323_0>=From && LA323_0<=Void)||LA323_0==FullStopFullStopFullStop||(LA323_0>=Get && LA323_0<=Set)||LA323_0==PlusSignPlusSign||(LA323_0>=HyphenMinusHyphenMinus && LA323_0<=SolidusEqualsSign)||LA323_0==As||LA323_0==Of||LA323_0==ExclamationMark||LA323_0==LeftParenthesis||LA323_0==PlusSign||LA323_0==HyphenMinus||LA323_0==Solidus||LA323_0==LessThanSign||(LA323_0>=CommercialAt && LA323_0<=LeftSquareBracket)||LA323_0==LeftCurlyBracket||LA323_0==Tilde||(LA323_0>=RULE_TEMPLATE_HEAD && LA323_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA323_0==RULE_IDENTIFIER||LA323_0==RULE_INT||LA323_0==RULE_DOUBLE||(LA323_0>=RULE_BINARY_INT && LA323_0<=RULE_SCIENTIFIC_INT)||LA323_0==RULE_STRING) ) {
                                alt323=1;
                            }
                            switch (alt323) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_70);
                                    this_Arguments_9=ruleArguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop325:
                            do {
                                int alt325=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case LeftSquareBracket:
                                        {
                                        alt325=1;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt325=3;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Namespace:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt325=2;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt325=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt325=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt325=3;
                                    }
                                    break;
                                }
                                switch (alt325) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    this_IndexedAccessExpressionTail_12=ruleIndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=ruleParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt324=2;
                            	    int LA324_0 = input.LA(1);
                            	    if ( (LA324_0==QuestionMarkFullStop) ) {
                            	        alt324=1;
                            	    }
                            	    switch (alt324) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_16_0 != null, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    lv_template_17_0=ruleTemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop325;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_107);
                    this_PrimaryExpression_18=rulePrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop328:
                    do {
                        int alt328=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case LeftSquareBracket:
                                {
                                alt328=1;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt328=3;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Namespace:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt328=2;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt328=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt328=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt328=3;
                            }
                            break;
                        }
                        switch (alt328) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_IndexedAccessExpressionTail_20=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt327=2;
                    	    int LA327_0 = input.LA(1);
                    	    if ( (LA327_0==QuestionMarkFullStop) ) {
                    	        alt327=1;
                    	    }
                    	    switch (alt327) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_24_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    lv_template_25_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop328;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt337=3;
            alt337 = dfa337.predict(input);
            switch (alt337) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_113);
                    lv_callee_6_0=norm1_MemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt330=2;
                    int LA330_0 = input.LA(1);
                    if ( (LA330_0==LessThanSign) ) {
                        int LA330_1 = input.LA(2);
                        if ( (synpred198_InternalN4JSParser()) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_114);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt334=2;
                    int LA334_0 = input.LA(1);
                    if ( (LA334_0==LeftParenthesis) ) {
                        int LA334_1 = input.LA(2);
                        if ( (synpred199_InternalN4JSParser()) ) {
                            alt334=1;
                        }
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_109); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", lv_withArgs_8_0 != null, "(");
                            }
                            }
                            }
                            int alt331=2;
                            int LA331_0 = input.LA(1);
                            if ( ((LA331_0>=Intersection && LA331_0<=Implements)||(LA331_0>=Promisify && LA331_0<=Abstract)||(LA331_0>=External && LA331_0<=Function)||(LA331_0>=Private && LA331_0<=Delete)||(LA331_0>=Import && LA331_0<=Public)||LA331_0==Static||(LA331_0>=Target && LA331_0<=Await)||LA331_0==Class||(LA331_0>=False && LA331_0<=Super)||LA331_0==Union||(LA331_0>=Yield && LA331_0<=This)||(LA331_0>=From && LA331_0<=Void)||LA331_0==FullStopFullStopFullStop||(LA331_0>=Get && LA331_0<=Set)||LA331_0==PlusSignPlusSign||(LA331_0>=HyphenMinusHyphenMinus && LA331_0<=SolidusEqualsSign)||LA331_0==As||LA331_0==Of||LA331_0==ExclamationMark||LA331_0==LeftParenthesis||LA331_0==PlusSign||LA331_0==HyphenMinus||LA331_0==Solidus||LA331_0==LessThanSign||(LA331_0>=CommercialAt && LA331_0<=LeftSquareBracket)||LA331_0==LeftCurlyBracket||LA331_0==Tilde||(LA331_0>=RULE_TEMPLATE_HEAD && LA331_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA331_0==RULE_IDENTIFIER||LA331_0==RULE_INT||LA331_0==RULE_DOUBLE||(LA331_0>=RULE_BINARY_INT && LA331_0<=RULE_SCIENTIFIC_INT)||LA331_0==RULE_STRING) ) {
                                alt331=1;
                            }
                            switch (alt331) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_70);
                                    this_Arguments_9=norm1_Arguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop333:
                            do {
                                int alt333=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case LeftSquareBracket:
                                        {
                                        alt333=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Namespace:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt333=2;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt333=3;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt333=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt333=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt333=3;
                                    }
                                    break;
                                }
                                switch (alt333) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    this_IndexedAccessExpressionTail_12=norm1_IndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=norm1_ParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt332=2;
                            	    int LA332_0 = input.LA(1);
                            	    if ( (LA332_0==QuestionMarkFullStop) ) {
                            	        alt332=1;
                            	    }
                            	    switch (alt332) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_16_0 != null, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_107);
                            	    lv_template_17_0=norm1_TemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop333;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_107);
                    this_PrimaryExpression_18=norm1_PrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop336:
                    do {
                        int alt336=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case LeftSquareBracket:
                                {
                                alt336=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Namespace:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt336=2;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt336=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt336=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt336=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt336=3;
                            }
                            break;
                        }
                        switch (alt336) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_IndexedAccessExpressionTail_20=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt335=2;
                    	    int LA335_0 = input.LA(1);
                    	    if ( (LA335_0==QuestionMarkFullStop) ) {
                    	        alt335=1;
                    	    }
                    	    switch (alt335) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_108); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_24_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_107);
                    	    lv_template_25_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop336;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt338=2;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==QuestionMarkFullStop) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_0_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_116);
            lv_index_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==QuestionMarkFullStop) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_0_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_116);
            lv_index_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==FullStop) ) {
                alt340=1;
            }
            else if ( (LA340_0==QuestionMarkFullStop) ) {
                alt340=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);
                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_1_0 != null, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==LessThanSign) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_16);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==FullStop) ) {
                alt342=1;
            }
            else if ( (LA342_0==QuestionMarkFullStop) ) {
                alt342=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);
                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_1_0 != null, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==LessThanSign) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_16);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePostfixExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_118);
            this_LeftHandSideExpression_0=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt344=2;
            int LA344_0 = input.LA(1);
            if ( (LA344_0==PlusSignPlusSign) && (synpred200_InternalN4JSParser())) {
                alt344=1;
            }
            else if ( (LA344_0==HyphenMinusHyphenMinus) && (synpred200_InternalN4JSParser())) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_118);
            this_LeftHandSideExpression_0=norm1_LeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( (LA345_0==PlusSignPlusSign) && (synpred201_InternalN4JSParser())) {
                alt345=1;
            }
            else if ( (LA345_0==HyphenMinusHyphenMinus) && (synpred201_InternalN4JSParser())) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCastExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCastExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCastExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCastExpression=ruleCastExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCastExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRefNode_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_PostfixExpression_0=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt346=2;
            int LA346_0 = input.LA(1);
            if ( (LA346_0==As) && (synpred202_InternalN4JSParser())) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefNodeArrayTypeExpressionNodeParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRefNode_3_0=ruleArrayTypeExpressionNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRefNode",
                      							lv_targetTypeRefNode_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayTypeExpressionNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRefNode_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_PostfixExpression_0=norm1_PostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt347=2;
            int LA347_0 = input.LA(1);
            if ( (LA347_0==As) && (synpred203_InternalN4JSParser())) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefNodeArrayTypeExpressionNodeParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRefNode_3_0=ruleArrayTypeExpressionNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRefNode",
                      							lv_targetTypeRefNode_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayTypeExpressionNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExpression=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt348=2;
            int LA348_0 = input.LA(1);
            if ( ((LA348_0>=Intersection && LA348_0<=Implements)||(LA348_0>=Promisify && LA348_0<=Abstract)||(LA348_0>=External && LA348_0<=Function)||(LA348_0>=Private && LA348_0<=Project)||(LA348_0>=Import && LA348_0<=Public)||LA348_0==Static||LA348_0==Target||(LA348_0>=Async && LA348_0<=Await)||LA348_0==Class||(LA348_0>=False && LA348_0<=Super)||LA348_0==Union||(LA348_0>=Yield && LA348_0<=This)||(LA348_0>=From && LA348_0<=Type)||(LA348_0>=Get && LA348_0<=Set)||LA348_0==SolidusEqualsSign||LA348_0==As||LA348_0==Of||LA348_0==LeftParenthesis||LA348_0==Solidus||LA348_0==LessThanSign||(LA348_0>=CommercialAt && LA348_0<=LeftSquareBracket)||LA348_0==LeftCurlyBracket||(LA348_0>=RULE_TEMPLATE_HEAD && LA348_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA348_0==RULE_IDENTIFIER||LA348_0==RULE_INT||LA348_0==RULE_DOUBLE||(LA348_0>=RULE_BINARY_INT && LA348_0<=RULE_SCIENTIFIC_INT)||LA348_0==RULE_STRING) ) {
                alt348=1;
            }
            else if ( (LA348_0==Delete||LA348_0==Typeof||LA348_0==Void||LA348_0==PlusSignPlusSign||LA348_0==HyphenMinusHyphenMinus||LA348_0==ExclamationMark||LA348_0==PlusSign||LA348_0==HyphenMinus||LA348_0==Tilde) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);
                throw nvae;
            }
            switch (alt348) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=ruleCastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_53);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleUnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_UnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt349=2;
            int LA349_0 = input.LA(1);
            if ( ((LA349_0>=Intersection && LA349_0<=Implements)||(LA349_0>=Promisify && LA349_0<=Abstract)||(LA349_0>=External && LA349_0<=Function)||(LA349_0>=Private && LA349_0<=Project)||(LA349_0>=Import && LA349_0<=Public)||LA349_0==Static||LA349_0==Target||(LA349_0>=Async && LA349_0<=Await)||LA349_0==Class||(LA349_0>=False && LA349_0<=Super)||LA349_0==Union||LA349_0==This||(LA349_0>=From && LA349_0<=Type)||(LA349_0>=Get && LA349_0<=Set)||LA349_0==SolidusEqualsSign||LA349_0==As||LA349_0==Of||LA349_0==LeftParenthesis||LA349_0==Solidus||LA349_0==LessThanSign||(LA349_0>=CommercialAt && LA349_0<=LeftSquareBracket)||LA349_0==LeftCurlyBracket||(LA349_0>=RULE_TEMPLATE_HEAD && LA349_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA349_0==RULE_IDENTIFIER||LA349_0==RULE_INT||LA349_0==RULE_DOUBLE||(LA349_0>=RULE_BINARY_INT && LA349_0<=RULE_SCIENTIFIC_INT)||LA349_0==RULE_STRING) ) {
                alt349=1;
            }
            else if ( (LA349_0==Delete||LA349_0==Typeof||LA349_0==Void||LA349_0==PlusSignPlusSign||LA349_0==HyphenMinusHyphenMinus||LA349_0==ExclamationMark||LA349_0==PlusSign||LA349_0==HyphenMinus||LA349_0==Tilde) ) {
                alt349=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);
                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=norm1_CastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_53);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_UnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMultiplicativeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_119);
            this_UnaryExpression_0=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);
                if ( (LA350_0==Asterisk) && (synpred204_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==Solidus) && (synpred204_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==PercentSign) && (synpred204_InternalN4JSParser())) {
                    alt350=1;
                }
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=ruleUnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop350;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_119);
            this_UnaryExpression_0=norm1_UnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);
                if ( (LA351_0==Asterisk) && (synpred205_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==Solidus) && (synpred205_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==PercentSign) && (synpred205_InternalN4JSParser())) {
                    alt351=1;
                }
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=norm1_UnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop351;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAdditiveExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_120);
            this_MultiplicativeExpression_0=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop352:
            do {
                int alt352=2;
                alt352 = dfa352.predict(input);
                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=ruleMultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop352;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_120);
            this_MultiplicativeExpression_0=norm1_MultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop353:
            do {
                int alt353=2;
                alt353 = dfa353.predict(input);
                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=norm1_MultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop353;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleShiftExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftExpression=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_121);
            this_AdditiveExpression_0=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop354:
            do {
                int alt354=2;
                alt354 = dfa354.predict(input);
                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=ruleAdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop354;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_121);
            this_AdditiveExpression_0=norm1_AdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop355:
            do {
                int alt355=2;
                alt355 = dfa355.predict(input);
                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=norm1_AdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop355;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleShiftOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleShiftOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftOperator=ruleShiftOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleShiftOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt357=2;
            int LA357_0 = input.LA(1);
            if ( (LA357_0==GreaterThanSign) ) {
                alt357=1;
            }
            else if ( (LA357_0==LessThanSignLessThanSign) ) {
                alt357=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);
                throw nvae;
            }
            switch (alt357) {
                case 1 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_123); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                    }
                    int alt356=2;
                    int LA356_0 = input.LA(1);
                    if ( (LA356_0==GreaterThanSign) ) {
                        alt356=1;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRelationalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExpression=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_124);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop358:
            do {
                int alt358=2;
                alt358 = dfa358.predict(input);
                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_124);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop358;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop359:
            do {
                int alt359=2;
                alt359 = dfa359.predict(input);
                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop359;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_124);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop360:
            do {
                int alt360=2;
                alt360 = dfa360.predict(input);
                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_124);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop360;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop361:
            do {
                int alt361=2;
                alt361 = dfa361.predict(input);
                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop361;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleRelationalOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleRelationalOperator = null;
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalOperator=ruleRelationalOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleRelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            int alt363=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt363=1;
                }
                break;
            case GreaterThanSign:
                {
                alt363=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt363=3;
                }
                break;
            case Instanceof:
                {
                alt363=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt362=2;
                    int LA362_0 = input.LA(1);
                    if ( (LA362_0==EqualsSign) ) {
                        alt362=1;
                    }
                    switch (alt362) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_RelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            int alt365=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt365=1;
                }
                break;
            case GreaterThanSign:
                {
                alt365=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt365=3;
                }
                break;
            case Instanceof:
                {
                alt365=4;
                }
                break;
            case In:
                {
                alt365=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt364=2;
                    int LA364_0 = input.LA(1);
                    if ( (LA364_0==EqualsSign) ) {
                        alt364=1;
                    }
                    switch (alt364) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEqualityExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEqualityExpression=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_RelationalExpression_0=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==EqualsSignEqualsSignEqualsSign) && (synpred220_InternalN4JSParser())) {
                    alt366=1;
                }
                else if ( (LA366_0==ExclamationMarkEqualsSignEqualsSign) && (synpred220_InternalN4JSParser())) {
                    alt366=1;
                }
                else if ( (LA366_0==EqualsSignEqualsSign) && (synpred220_InternalN4JSParser())) {
                    alt366=1;
                }
                else if ( (LA366_0==ExclamationMarkEqualsSign) && (synpred220_InternalN4JSParser())) {
                    alt366=1;
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=ruleRelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_RelationalExpression_0=norm1_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);
                if ( (LA367_0==EqualsSignEqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt367=1;
                }
                else if ( (LA367_0==ExclamationMarkEqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt367=1;
                }
                else if ( (LA367_0==EqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt367=1;
                }
                else if ( (LA367_0==ExclamationMarkEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt367=1;
                }
                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm1_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_RelationalExpression_0=norm2_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==EqualsSignEqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt368=1;
                }
                else if ( (LA368_0==ExclamationMarkEqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt368=1;
                }
                else if ( (LA368_0==EqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt368=1;
                }
                else if ( (LA368_0==ExclamationMarkEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm2_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_RelationalExpression_0=norm3_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);
                if ( (LA369_0==EqualsSignEqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt369=1;
                }
                else if ( (LA369_0==ExclamationMarkEqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt369=1;
                }
                else if ( (LA369_0==EqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt369=1;
                }
                else if ( (LA369_0==ExclamationMarkEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt369=1;
                }
                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm3_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop369;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDExpression=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_EqualityExpression_0=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);
                if ( (LA370_0==Ampersand) && (synpred224_InternalN4JSParser())) {
                    alt370=1;
                }
                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=ruleEqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop370;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_EqualityExpression_0=norm1_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);
                if ( (LA371_0==Ampersand) && (synpred225_InternalN4JSParser())) {
                    alt371=1;
                }
                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm1_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop371;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_EqualityExpression_0=norm2_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);
                if ( (LA372_0==Ampersand) && (synpred226_InternalN4JSParser())) {
                    alt372=1;
                }
                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm2_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop372;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_EqualityExpression_0=norm3_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);
                if ( (LA373_0==Ampersand) && (synpred227_InternalN4JSParser())) {
                    alt373=1;
                }
                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm3_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop373;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDOperator=ruleBitwiseANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseXORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXORExpression=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseANDExpression_0=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);
                if ( (LA374_0==CircumflexAccent) && (synpred228_InternalN4JSParser())) {
                    alt374=1;
                }
                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=ruleBitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseANDExpression_0=norm1_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);
                if ( (LA375_0==CircumflexAccent) && (synpred229_InternalN4JSParser())) {
                    alt375=1;
                }
                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm1_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseANDExpression_0=norm2_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==CircumflexAccent) && (synpred230_InternalN4JSParser())) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm2_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseANDExpression_0=norm3_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==CircumflexAccent) && (synpred231_InternalN4JSParser())) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm3_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseXOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseXOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXOROperator=ruleBitwiseXOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseXOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseORExpression=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseXORExpression_0=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);
                if ( (LA378_0==VerticalLine) && (synpred232_InternalN4JSParser())) {
                    alt378=1;
                }
                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=ruleBitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop378;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseXORExpression_0=norm1_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);
                if ( (LA379_0==VerticalLine) && (synpred233_InternalN4JSParser())) {
                    alt379=1;
                }
                switch (alt379) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm1_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop379;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseXORExpression_0=norm2_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);
                if ( (LA380_0==VerticalLine) && (synpred234_InternalN4JSParser())) {
                    alt380=1;
                }
                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm2_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop380;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseXORExpression_0=norm3_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);
                if ( (LA381_0==VerticalLine) && (synpred235_InternalN4JSParser())) {
                    alt381=1;
                }
                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm3_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop381;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseOROperator=ruleBitwiseOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDExpression=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_BitwiseORExpression_0=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);
                if ( (LA382_0==AmpersandAmpersand) && (synpred236_InternalN4JSParser())) {
                    alt382=1;
                }
                switch (alt382) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=ruleBitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop382;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_BitwiseORExpression_0=norm1_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);
                if ( (LA383_0==AmpersandAmpersand) && (synpred237_InternalN4JSParser())) {
                    alt383=1;
                }
                switch (alt383) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm1_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop383;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_BitwiseORExpression_0=norm2_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop384:
            do {
                int alt384=2;
                int LA384_0 = input.LA(1);
                if ( (LA384_0==AmpersandAmpersand) && (synpred238_InternalN4JSParser())) {
                    alt384=1;
                }
                switch (alt384) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm2_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop384;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_BitwiseORExpression_0=norm3_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop385:
            do {
                int alt385=2;
                int LA385_0 = input.LA(1);
                if ( (LA385_0==AmpersandAmpersand) && (synpred239_InternalN4JSParser())) {
                    alt385=1;
                }
                switch (alt385) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm3_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop385;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDOperator=ruleLogicalANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalORExpression=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalANDExpression_0=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop386:
            do {
                int alt386=2;
                int LA386_0 = input.LA(1);
                if ( (LA386_0==VerticalLineVerticalLine) && (synpred240_InternalN4JSParser())) {
                    alt386=1;
                }
                switch (alt386) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=ruleLogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop386;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalANDExpression_0=norm1_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop387:
            do {
                int alt387=2;
                int LA387_0 = input.LA(1);
                if ( (LA387_0==VerticalLineVerticalLine) && (synpred241_InternalN4JSParser())) {
                    alt387=1;
                }
                switch (alt387) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=norm1_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop387;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalANDExpression_0=norm2_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop388:
            do {
                int alt388=2;
                int LA388_0 = input.LA(1);
                if ( (LA388_0==VerticalLineVerticalLine) && (synpred242_InternalN4JSParser())) {
                    alt388=1;
                }
                switch (alt388) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=norm2_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop388;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalANDExpression_0=norm3_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop389:
            do {
                int alt389=2;
                int LA389_0 = input.LA(1);
                if ( (LA389_0==VerticalLineVerticalLine) && (synpred243_InternalN4JSParser())) {
                    alt389=1;
                }
                switch (alt389) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=norm3_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop389;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOROperator=ruleLogicalOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCoalesceExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCoalesceExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCoalesceExpression=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCoalesceExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_LogicalORExpression_0=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop390:
            do {
                int alt390=2;
                int LA390_0 = input.LA(1);
                if ( (LA390_0==QuestionMarkQuestionMark) && (synpred244_InternalN4JSParser())) {
                    alt390=1;
                }
                switch (alt390) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_defaultExpression_3_0=ruleLogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop390;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_LogicalORExpression_0=norm1_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop391:
            do {
                int alt391=2;
                int LA391_0 = input.LA(1);
                if ( (LA391_0==QuestionMarkQuestionMark) && (synpred245_InternalN4JSParser())) {
                    alt391=1;
                }
                switch (alt391) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_defaultExpression_3_0=norm1_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop391;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_LogicalORExpression_0=norm2_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop392:
            do {
                int alt392=2;
                int LA392_0 = input.LA(1);
                if ( (LA392_0==QuestionMarkQuestionMark) && (synpred246_InternalN4JSParser())) {
                    alt392=1;
                }
                switch (alt392) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_defaultExpression_3_0=norm2_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop392;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_LogicalORExpression_0=norm3_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop393:
            do {
                int alt393=2;
                int LA393_0 = input.LA(1);
                if ( (LA393_0==QuestionMarkQuestionMark) && (synpred247_InternalN4JSParser())) {
                    alt393=1;
                }
                switch (alt393) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_defaultExpression_3_0=norm3_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop393;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleConditionalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleConditionalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConditionalExpression=ruleConditionalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConditionalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_CoalesceExpression_0=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt394=2;
            int LA394_0 = input.LA(1);
            if ( (LA394_0==QuestionMark) && (synpred248_InternalN4JSParser())) {
                alt394=1;
            }
            switch (alt394) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_CoalesceExpression_0=norm1_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt395=2;
            int LA395_0 = input.LA(1);
            if ( (LA395_0==QuestionMark) && (synpred249_InternalN4JSParser())) {
                alt395=1;
            }
            switch (alt395) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_CoalesceExpression_0=norm2_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt396=2;
            int LA396_0 = input.LA(1);
            if ( (LA396_0==QuestionMark) && (synpred250_InternalN4JSParser())) {
                alt396=1;
            }
            switch (alt396) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_CoalesceExpression_0=norm3_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt397=2;
            int LA397_0 = input.LA(1);
            if ( (LA397_0==QuestionMark) && (synpred251_InternalN4JSParser())) {
                alt397=1;
            }
            switch (alt397) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpression=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt399=4;
            alt399 = dfa399.predict(input);
            switch (alt399) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=ruleAwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=rulePromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=ruleArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_134);
                    this_ConditionalExpression_3=ruleConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt398=2;
                    alt398 = dfa398.predict(input);
                    switch (alt398) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_53);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt401=4;
            alt401 = dfa401.predict(input);
            switch (alt401) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm1_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm1_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm1_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_134);
                    this_ConditionalExpression_3=norm1_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt400=2;
                    alt400 = dfa400.predict(input);
                    switch (alt400) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_53);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt403=5;
            alt403 = dfa403.predict(input);
            switch (alt403) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm2_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm2_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm2_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=ruleYieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_134);
                    this_ConditionalExpression_4=norm2_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt402=2;
                    alt402 = dfa402.predict(input);
                    switch (alt402) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_53);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm2_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt405=5;
            alt405 = dfa405.predict(input);
            switch (alt405) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm3_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm3_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm3_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=norm1_YieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_134);
                    this_ConditionalExpression_4=norm3_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt404=2;
                    alt404 = dfa404.predict(input);
                    switch (alt404) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_53);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleYieldExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleYieldExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldExpression=ruleYieldExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleYieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_135); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt406=2;
            int LA406_0 = input.LA(1);
            if ( (LA406_0==Asterisk) && (synpred276_InternalN4JSParser())) {
                alt406=1;
            }
            switch (alt406) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", lv_many_2_0 != null, "*");
                    }
                    }
                    }
                    break;
            }
            int alt407=2;
            alt407 = dfa407.predict(input);
            switch (alt407) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_YieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_135); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt408=2;
            int LA408_0 = input.LA(1);
            if ( (LA408_0==Asterisk) && (synpred278_InternalN4JSParser())) {
                alt408=1;
            }
            switch (alt408) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", lv_many_2_0 != null, "*");
                    }
                    }
                    }
                    break;
            }
            int alt409=2;
            alt409 = dfa409.predict(input);
            switch (alt409) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperator=ruleAssignmentOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt411=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt411=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt411=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt411=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt411=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt411=5;
                }
                break;
            case HyphenMinus:
                {
                alt411=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt411=7;
                }
                break;
            case GreaterThanSign:
                {
                alt411=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt411=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt411=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt411=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);
                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    {
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_136); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                    }
                    int alt410=2;
                    int LA410_0 = input.LA(1);
                    if ( (LA410_0==GreaterThanSign) ) {
                        alt410=1;
                    }
                    switch (alt410) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_20); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                            }
                            }
                            break;
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperatorOnlyAssign() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperatorOnlyAssign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorOnlyAssignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperatorOnlyAssign=ruleAssignmentOperatorOnlyAssign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperatorOnlyAssign.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperatorOnlyAssign() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getAssignmentOperatorOnlyAssignAccess().getEqualsSignKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAwaitExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAwaitExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAwaitExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAwaitExpression=ruleAwaitExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAwaitExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePromisifyExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPromisifyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePromisifyExpression=rulePromisifyExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePromisifyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_137); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_137); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_137); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_137); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt413=2;
            int LA413_0 = input.LA(1);
            if ( (LA413_0==Comma) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop412:
                    do {
                        int alt412=2;
                        int LA412_0 = input.LA(1);
                        if ( (LA412_0==Comma) ) {
                            alt412=1;
                        }
                        switch (alt412) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=ruleAssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop412;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt415=2;
            int LA415_0 = input.LA(1);
            if ( (LA415_0==Comma) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop414:
                    do {
                        int alt414=2;
                        int LA414_0 = input.LA(1);
                        if ( (LA414_0==Comma) ) {
                            alt414=1;
                        }
                        switch (alt414) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm1_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop414;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt417=2;
            int LA417_0 = input.LA(1);
            if ( (LA417_0==Comma) ) {
                alt417=1;
            }
            switch (alt417) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop416:
                    do {
                        int alt416=2;
                        int LA416_0 = input.LA(1);
                        if ( (LA416_0==Comma) ) {
                            alt416=1;
                        }
                        switch (alt416) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm2_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop416;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==Comma) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop418:
                    do {
                        int alt418=2;
                        int LA418_0 = input.LA(1);
                        if ( (LA418_0==Comma) ) {
                            alt418=1;
                        }
                        switch (alt418) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm3_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop418;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateLiteral=ruleTemplateLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt423=2;
            int LA423_0 = input.LA(1);
            if ( (LA423_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt423=1;
            }
            else if ( (LA423_0==RULE_TEMPLATE_HEAD) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_138);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt420=2;
                    int LA420_0 = input.LA(1);
                    if ( ((LA420_0>=Intersection && LA420_0<=Implements)||(LA420_0>=Promisify && LA420_0<=Abstract)||(LA420_0>=External && LA420_0<=Function)||(LA420_0>=Private && LA420_0<=Delete)||(LA420_0>=Import && LA420_0<=Public)||LA420_0==Static||(LA420_0>=Target && LA420_0<=Await)||LA420_0==Class||(LA420_0>=False && LA420_0<=Super)||LA420_0==Union||(LA420_0>=Yield && LA420_0<=This)||(LA420_0>=From && LA420_0<=Void)||(LA420_0>=Get && LA420_0<=Set)||LA420_0==PlusSignPlusSign||(LA420_0>=HyphenMinusHyphenMinus && LA420_0<=SolidusEqualsSign)||LA420_0==As||LA420_0==Of||LA420_0==ExclamationMark||LA420_0==LeftParenthesis||LA420_0==PlusSign||LA420_0==HyphenMinus||LA420_0==Solidus||LA420_0==LessThanSign||(LA420_0>=CommercialAt && LA420_0<=LeftSquareBracket)||LA420_0==LeftCurlyBracket||LA420_0==Tilde||(LA420_0>=RULE_TEMPLATE_HEAD && LA420_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA420_0==RULE_IDENTIFIER||LA420_0==RULE_INT||LA420_0==RULE_DOUBLE||(LA420_0>=RULE_BINARY_INT && LA420_0<=RULE_SCIENTIFIC_INT)||LA420_0==RULE_STRING) ) {
                        alt420=1;
                    }
                    switch (alt420) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_138);
                            lv_segments_3_0=norm1_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_139);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop422:
                    do {
                        int alt422=2;
                        int LA422_0 = input.LA(1);
                        if ( (LA422_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt422=1;
                        }
                        switch (alt422) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_138);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt421=2;
                    	    int LA421_0 = input.LA(1);
                    	    if ( ((LA421_0>=Intersection && LA421_0<=Implements)||(LA421_0>=Promisify && LA421_0<=Abstract)||(LA421_0>=External && LA421_0<=Function)||(LA421_0>=Private && LA421_0<=Delete)||(LA421_0>=Import && LA421_0<=Public)||LA421_0==Static||(LA421_0>=Target && LA421_0<=Await)||LA421_0==Class||(LA421_0>=False && LA421_0<=Super)||LA421_0==Union||(LA421_0>=Yield && LA421_0<=This)||(LA421_0>=From && LA421_0<=Void)||(LA421_0>=Get && LA421_0<=Set)||LA421_0==PlusSignPlusSign||(LA421_0>=HyphenMinusHyphenMinus && LA421_0<=SolidusEqualsSign)||LA421_0==As||LA421_0==Of||LA421_0==ExclamationMark||LA421_0==LeftParenthesis||LA421_0==PlusSign||LA421_0==HyphenMinus||LA421_0==Solidus||LA421_0==LessThanSign||(LA421_0>=CommercialAt && LA421_0<=LeftSquareBracket)||LA421_0==LeftCurlyBracket||LA421_0==Tilde||(LA421_0>=RULE_TEMPLATE_HEAD && LA421_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_0==RULE_IDENTIFIER||LA421_0==RULE_INT||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_BINARY_INT && LA421_0<=RULE_SCIENTIFIC_INT)||LA421_0==RULE_STRING) ) {
                    	        alt421=1;
                    	    }
                    	    switch (alt421) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_138);
                    	            lv_segments_6_0=norm1_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_139);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop422;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt427=2;
            int LA427_0 = input.LA(1);
            if ( (LA427_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt427=1;
            }
            else if ( (LA427_0==RULE_TEMPLATE_HEAD) ) {
                alt427=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_138);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt424=2;
                    int LA424_0 = input.LA(1);
                    if ( ((LA424_0>=Intersection && LA424_0<=Implements)||(LA424_0>=Promisify && LA424_0<=Abstract)||(LA424_0>=External && LA424_0<=Function)||(LA424_0>=Private && LA424_0<=Delete)||(LA424_0>=Import && LA424_0<=Public)||LA424_0==Static||(LA424_0>=Target && LA424_0<=Await)||LA424_0==Class||(LA424_0>=False && LA424_0<=Super)||LA424_0==Union||(LA424_0>=Yield && LA424_0<=This)||(LA424_0>=From && LA424_0<=Void)||(LA424_0>=Get && LA424_0<=Set)||LA424_0==PlusSignPlusSign||(LA424_0>=HyphenMinusHyphenMinus && LA424_0<=SolidusEqualsSign)||LA424_0==As||LA424_0==Of||LA424_0==ExclamationMark||LA424_0==LeftParenthesis||LA424_0==PlusSign||LA424_0==HyphenMinus||LA424_0==Solidus||LA424_0==LessThanSign||(LA424_0>=CommercialAt && LA424_0<=LeftSquareBracket)||LA424_0==LeftCurlyBracket||LA424_0==Tilde||(LA424_0>=RULE_TEMPLATE_HEAD && LA424_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA424_0==RULE_IDENTIFIER||LA424_0==RULE_INT||LA424_0==RULE_DOUBLE||(LA424_0>=RULE_BINARY_INT && LA424_0<=RULE_SCIENTIFIC_INT)||LA424_0==RULE_STRING) ) {
                        alt424=1;
                    }
                    switch (alt424) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_138);
                            lv_segments_3_0=norm3_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_139);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop426:
                    do {
                        int alt426=2;
                        int LA426_0 = input.LA(1);
                        if ( (LA426_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt426=1;
                        }
                        switch (alt426) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_138);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt425=2;
                    	    int LA425_0 = input.LA(1);
                    	    if ( ((LA425_0>=Intersection && LA425_0<=Implements)||(LA425_0>=Promisify && LA425_0<=Abstract)||(LA425_0>=External && LA425_0<=Function)||(LA425_0>=Private && LA425_0<=Delete)||(LA425_0>=Import && LA425_0<=Public)||LA425_0==Static||(LA425_0>=Target && LA425_0<=Await)||LA425_0==Class||(LA425_0>=False && LA425_0<=Super)||LA425_0==Union||(LA425_0>=Yield && LA425_0<=This)||(LA425_0>=From && LA425_0<=Void)||(LA425_0>=Get && LA425_0<=Set)||LA425_0==PlusSignPlusSign||(LA425_0>=HyphenMinusHyphenMinus && LA425_0<=SolidusEqualsSign)||LA425_0==As||LA425_0==Of||LA425_0==ExclamationMark||LA425_0==LeftParenthesis||LA425_0==PlusSign||LA425_0==HyphenMinus||LA425_0==Solidus||LA425_0==LessThanSign||(LA425_0>=CommercialAt && LA425_0<=LeftSquareBracket)||LA425_0==LeftCurlyBracket||LA425_0==Tilde||(LA425_0>=RULE_TEMPLATE_HEAD && LA425_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA425_0==RULE_IDENTIFIER||LA425_0==RULE_INT||LA425_0==RULE_DOUBLE||(LA425_0>=RULE_BINARY_INT && LA425_0<=RULE_SCIENTIFIC_INT)||LA425_0==RULE_STRING) ) {
                    	        alt425=1;
                    	    }
                    	    switch (alt425) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_138);
                    	            lv_segments_6_0=norm3_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_139);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop426;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateExpressionEnd() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateExpressionEnd = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateExpressionEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateExpressionEnd=ruleTemplateExpressionEnd();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateExpressionEnd.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateExpressionEnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	setInTemplateSegment();
        try {
            {
            kw=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNoSubstitutionTemplate = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoSubstitutionTemplateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNoSubstitutionTemplate=ruleNoSubstitutionTemplate();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoSubstitutionTemplate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNoSubstitutionTemplateAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getNoSubstitutionTemplateRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.NO_SUBSTITUTION_TEMPLATE_LITERAL");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateHead() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateHead = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateHead=ruleTemplateHead();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateHead; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateHead() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateHeadAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getTemplateHeadAccess().getValueTEMPLATE_HEADTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTemplateHeadRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TEMPLATE_HEAD");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTail=ruleTemplateTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateTail() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateTailAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateTailAccess().getValueTemplateTailLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateTailRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateTailLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateMiddle = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddle=ruleTemplateMiddle();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddle; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateMiddleAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateMiddleAccess().getValueTemplateMiddleLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateMiddleRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateMiddleLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_NumericLiteral_0 = null;
        EObject this_BooleanLiteral_1 = null;
        EObject this_StringLiteral_2 = null;
        EObject this_NullLiteral_3 = null;
        EObject this_RegularExpressionLiteral_4 = null;
        	enterRule();
        try {
            {
            int alt428=5;
            switch ( input.LA(1) ) {
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt428=1;
                }
                break;
            case False:
            case True:
                {
                alt428=2;
                }
                break;
            case RULE_STRING:
                {
                alt428=3;
                }
                break;
            case Null:
                {
                alt428=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt428=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteral_0=ruleNumericLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NumericLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_1=ruleBooleanLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BooleanLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_2=ruleStringLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_StringLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_3=ruleNullLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NullLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularExpressionLiteral_4=ruleRegularExpressionLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RegularExpressionLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNullLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBooleanLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_true_1_0=null;
        Token otherlv_2=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
            }
            }
            int alt429=2;
            int LA429_0 = input.LA(1);
            if ( (LA429_0==True) ) {
                alt429=1;
            }
            else if ( (LA429_0==False) ) {
                alt429=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    {
                    {
                    lv_true_1_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "true", lv_true_1_0 != null, "true");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStringLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.STRING");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNumericLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteral=ruleNumericLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_DoubleLiteral_0 = null;
        EObject this_IntLiteral_1 = null;
        EObject this_BinaryIntLiteral_2 = null;
        EObject this_OctalIntLiteral_3 = null;
        EObject this_LegacyOctalIntLiteral_4 = null;
        EObject this_HexIntLiteral_5 = null;
        EObject this_ScientificIntLiteral_6 = null;
        	enterRule();
        try {
            {
            int alt430=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt430=1;
                }
                break;
            case RULE_INT:
                {
                alt430=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt430=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt430=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt430=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt430=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt430=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);
                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoubleLiteral_0=ruleDoubleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoubleLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntLiteral_1=ruleIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_BinaryIntLiteral_2=ruleBinaryIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BinaryIntLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_OctalIntLiteral_3=ruleOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_OctalIntLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyOctalIntLiteral_4=ruleLegacyOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LegacyOctalIntLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_HexIntLiteral_5=ruleHexIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_HexIntLiteral_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ScientificIntLiteral_6=ruleScientificIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ScientificIntLiteral_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoubleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoubleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoubleLiteral=ruleDoubleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoubleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getDoubleLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.DOUBLE");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntLiteral=ruleIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOctalIntLiteral=ruleOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLegacyOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyOctalIntLiteral=ruleLegacyOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLegacyOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.LEGACY_OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleHexIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHexIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHexIntLiteral=ruleHexIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHexIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getHexIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.HEX_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBinaryIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBinaryIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBinaryIntLiteral=ruleBinaryIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBinaryIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getBinaryIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.BINARY_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScientificIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScientificIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScientificIntLiteral=ruleScientificIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScientificIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getScientificIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.SCIENTIFIC_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRegularExpressionLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularExpressionLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getRegularExpressionLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.REGEX_LITERAL");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleNumericLiteralAsString() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleNumericLiteralAsString = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralAsStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralAsString=ruleNumericLiteralAsString();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralAsString.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleNumericLiteralAsString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_DOUBLE_0=null;
        Token this_INT_1=null;
        Token this_BINARY_INT_2=null;
        Token this_OCTAL_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_SCIENTIFIC_INT_5=null;
        	enterRule();
        try {
            {
            int alt431=6;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt431=1;
                }
                break;
            case RULE_INT:
                {
                alt431=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt431=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt431=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt431=5;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt431=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);
                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    {
                    this_DOUBLE_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_DOUBLE_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_DOUBLE_0, grammarAccess.getNumericLiteralAsStringAccess().getDOUBLETerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_INT_1);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_INT_1, grammarAccess.getNumericLiteralAsStringAccess().getINTTerminalRuleCall_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    this_BINARY_INT_2=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_BINARY_INT_2);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_BINARY_INT_2, grammarAccess.getNumericLiteralAsStringAccess().getBINARY_INTTerminalRuleCall_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    this_OCTAL_INT_3=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_OCTAL_INT_3);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_OCTAL_INT_3, grammarAccess.getNumericLiteralAsStringAccess().getOCTAL_INTTerminalRuleCall_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_HEX_INT_4);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_HEX_INT_4, grammarAccess.getNumericLiteralAsStringAccess().getHEX_INTTerminalRuleCall_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    this_SCIENTIFIC_INT_5=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_SCIENTIFIC_INT_5);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_SCIENTIFIC_INT_5, grammarAccess.getNumericLiteralAsStringAccess().getSCIENTIFIC_INTTerminalRuleCall_5());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierOrThis() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierOrThis = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierOrThisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierOrThis=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierOrThis.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierOrThis() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt432=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt432=1;
                }
                break;
            case This:
                {
                alt432=2;
                }
                break;
            case Promisify:
                {
                alt432=3;
                }
                break;
            case Target:
                {
                alt432=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);
                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierOrThisAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAnnotationName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAnnotationName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationName=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAnnotationName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt433=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt433=1;
                }
                break;
            case This:
                {
                alt433=2;
                }
                break;
            case Target:
                {
                alt433=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);
                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAnnotationNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleREGEX_LITERAL() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleREGEX_LITERAL = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getREGEX_LITERALRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleREGEX_LITERAL=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleREGEX_LITERAL.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleREGEX_LITERAL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_REGEX_TAIL_2=null;
        	enterRule();
        	setInRegularExpression();
        try {
            {
            {
            int alt434=2;
            int LA434_0 = input.LA(1);
            if ( (LA434_0==Solidus) ) {
                alt434=1;
            }
            else if ( (LA434_0==SolidusEqualsSign) ) {
                alt434=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);
                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    {
                    kw=(Token)match(input,Solidus,FOLLOW_140); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_140); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                    }
                    }
                    break;
            }
            int alt435=2;
            int LA435_0 = input.LA(1);
            if ( (LA435_0==RULE_REGEX_TAIL) ) {
                alt435=1;
            }
            switch (alt435) {
                case 1 :
                    {
                    this_REGEX_TAIL_2=(Token)match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_REGEX_TAIL_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_REGEX_TAIL_2, grammarAccess.getREGEX_LITERALAccess().getREGEX_TAILTerminalRuleCall_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateTailLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateTailLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTailLiteral=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTailLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateTailLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_END_0=null;
        	enterRule();
        try {
            {
            int alt436=2;
            int LA436_0 = input.LA(1);
            if ( (LA436_0==RULE_TEMPLATE_END) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    {
                    this_TEMPLATE_END_0=(Token)match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_TEMPLATE_END_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_TEMPLATE_END_0, grammarAccess.getTemplateTailLiteralAccess().getTEMPLATE_ENDTerminalRuleCall());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateMiddleLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateMiddleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddleLiteral=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateMiddleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_MIDDLE_0=null;
        	enterRule();
        try {
            {
            this_TEMPLATE_MIDDLE_0=(Token)match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_TEMPLATE_MIDDLE_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_TEMPLATE_MIDDLE_0, grammarAccess.getTemplateMiddleLiteralAccess().getTEMPLATE_MIDDLETerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleSemi() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleSemi = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSemiRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSemi=ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSemi.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleSemi() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
         enterRule();
        		int position = input.index();
        		promoteEOL();    
        try {
            int alt437=3;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt437=1;
                }
                break;
            case EOF:
            case RULE_ML_COMMENT:
            case RULE_EOL:
                {
                alt437=2;
                }
                break;
            case RightCurlyBracket:
                {
                alt437=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 437, 0, input);
                throw nvae;
            }
            switch (alt437) {
                case 1 :
                    {
                    kw=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)input.LT(1);
                    if ( input.LA(1)==EOF||input.LA(1)==RULE_ML_COMMENT||input.LA(1)==RULE_EOL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }
                    if ( state.backtracking==0 ) {
                              addASIMessage();
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( !(( forcedRewind(position) )) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(position) ");
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              		leaveRule(); 
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement START
 public final EObject ruleNoLineTerminator(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedEOL()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement END
    public final EObject entryRuleAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotation=ruleAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_141); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptAnnotation=ruleScriptAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_141); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationNoAtSign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNoAtSignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationNoAtSign=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationNoAtSign; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_args_2_0 = null;
        EObject lv_args_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNameAnnotationNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_114);
            lv_name_0_0=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt441=2;
            alt441 = dfa441.predict(input);
            switch (alt441) {
                case 1 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_142); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_1, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                    }
                    }
                    int alt440=2;
                    int LA440_0 = input.LA(1);
                    if ( ((LA440_0>=Intersection && LA440_0<=Constructor)||LA440_0==Promisify||LA440_0==Default||LA440_0==Target||LA440_0==Await||LA440_0==False||LA440_0==Union||LA440_0==This||(LA440_0>=Null && LA440_0<=Void)||LA440_0==SolidusEqualsSign||LA440_0==LeftParenthesis||LA440_0==PlusSign||LA440_0==HyphenMinus||LA440_0==Solidus||LA440_0==QuestionMark||LA440_0==LeftSquareBracket||LA440_0==LeftCurlyBracket||LA440_0==Tilde||LA440_0==RULE_IDENTIFIER||LA440_0==RULE_INT||LA440_0==RULE_DOUBLE||(LA440_0>=RULE_BINARY_INT && LA440_0<=RULE_SCIENTIFIC_INT)||LA440_0==RULE_STRING) ) {
                        alt440=1;
                    }
                    switch (alt440) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_57);
                            lv_args_2_0=ruleAnnotationArgument();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_2_0,
                              								"org.eclipse.n4js.N4JS.AnnotationArgument");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop439:
                            do {
                                int alt439=2;
                                int LA439_0 = input.LA(1);
                                if ( (LA439_0==Comma) ) {
                                    alt439=1;
                                }
                                switch (alt439) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_143); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_3, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_57);
                            	    lv_args_4_0=ruleAnnotationArgument();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_4_0,
                            	      									"org.eclipse.n4js.N4JS.AnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop439;
                                }
                            } while (true);
                            }
                            break;
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationArgument=ruleAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject this_LiteralAnnotationArgument_0 = null;
        EObject this_TypeRefAnnotationArgument_1 = null;
        	enterRule();
        try {
            {
            int alt442=2;
            alt442 = dfa442.predict(input);
            switch (alt442) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralAnnotationArgument_0=ruleLiteralAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LiteralAnnotationArgument_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefAnnotationArgument_1=ruleTypeRefAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefAnnotationArgument_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralAnnotationArgument=ruleLiteralAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_literal_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_literal_0_0=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getLiteralAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"literal",
              					lv_literal_0_0,
              					"org.eclipse.n4js.N4JS.Literal");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefAnnotationArgument=ruleTypeRefAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefNode_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefNodeTypeReferenceNodeParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefNode_0_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeRefAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"typeRefNode",
              					lv_typeRefNode_0_0,
              					"org.eclipse.n4js.N4JS.TypeReferenceNode");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationList=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationList() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_annotations_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAnnotationListAccess().getAnnotationListAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_141); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_144);
            lv_annotations_2_0=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getAnnotationListRule());
              							}
              							add(
              								current,
              								"annotations",
              								lv_annotations_2_0,
              								"org.eclipse.n4js.N4JS.AnnotationNoAtSign");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            loop443:
            do {
                int alt443=2;
                int LA443_0 = input.LA(1);
                if ( (LA443_0==CommercialAt) ) {
                    alt443=1;
                }
                switch (alt443) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_3_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_3_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop443;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnnotationList=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionAnnotationListAccess().getExpressionAnnotationListAction_0(),
              					current);
            }
            }
            int cnt444=0;
            loop444:
            do {
                int alt444=2;
                int LA444_0 = input.LA(1);
                if ( (LA444_0==CommercialAt) ) {
                    alt444=1;
                }
                switch (alt444) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpressionAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt444 >= 1 ) break loop444;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(444, input);
                        throw eee;
                }
                cnt444++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignmentAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignmentAnnotationList=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignmentAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getPropertyAssignmentAnnotationListAccess().getPropertyAssignmentAnnotationListAction_0(),
              					current);
            }
            }
            int cnt445=0;
            loop445:
            do {
                int alt445=2;
                int LA445_0 = input.LA(1);
                if ( (LA445_0==CommercialAt) ) {
                    alt445=1;
                }
                switch (alt445) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyAssignmentAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt445 >= 1 ) break loop445;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(445, input);
                        throw eee;
                }
                cnt445++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberAnnotationList=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4MemberAnnotationListAccess().getN4MemberAnnotationListAction_0(),
              					current);
            }
            }
            int cnt446=0;
            loop446:
            do {
                int alt446=2;
                int LA446_0 = input.LA(1);
                if ( (LA446_0==CommercialAt) ) {
                    alt446=1;
                }
                switch (alt446) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4MemberAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt446 >= 1 ) break loop446;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(446, input);
                        throw eee;
                }
                cnt446++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassDeclaration=ruleN4ClassDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_ClassExtendsImplements_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop447:
            do {
                int alt447=2;
                int LA447_0 = input.LA(1);
                if ( ((LA447_0>=Protected && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Const) ) {
                    alt447=1;
                }
                switch (alt447) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop447;
                }
            } while (true);
            otherlv_1=(Token)match(input,Class,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt448=2;
            int LA448_0 = input.LA(1);
            if ( (LA448_0==Tilde) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt449=2;
            int LA449_0 = input.LA(1);
            if ( ((LA449_0>=Intersection && LA449_0<=Constructor)||(LA449_0>=Promisify && LA449_0<=Abstract)||LA449_0==External||(LA449_0>=Private && LA449_0<=Project)||LA449_0==Public||LA449_0==Static||LA449_0==Target||(LA449_0>=Async && LA449_0<=Await)||LA449_0==Union||(LA449_0>=Yield && LA449_0<=This)||LA449_0==From||LA449_0==Type||(LA449_0>=Get && LA449_0<=Let)||(LA449_0>=Out && LA449_0<=Set)||LA449_0==As||LA449_0==Of||LA449_0==RULE_IDENTIFIER) ) {
                alt449=1;
            }
            else if ( (LA449_0==Implements) ) {
                int LA449_2 = input.LA(2);
                if ( (LA449_2==Implements||LA449_2==Extends||LA449_2==LessThanSign||LA449_2==LeftCurlyBracket) ) {
                    alt449=1;
                }
            }
            switch (alt449) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt450=2;
            int LA450_0 = input.LA(1);
            if ( (LA450_0==LessThanSign) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt451=2;
            int LA451_0 = input.LA(1);
            if ( (LA451_0==Implements||LA451_0==Extends) ) {
                alt451=1;
            }
            switch (alt451) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_13);
                    this_ClassExtendsImplements_5=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_ClassExtendsImplements_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop452:
            do {
                int alt452=2;
                int LA452_0 = input.LA(1);
                if ( ((LA452_0>=Protected && LA452_0<=Abstract)||LA452_0==External||(LA452_0>=Private && LA452_0<=Project)||LA452_0==Public||LA452_0==Static||LA452_0==Const) ) {
                    alt452=1;
                }
                switch (alt452) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop452;
                }
            } while (true);
            otherlv_1=(Token)match(input,Class,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt453=2;
            int LA453_0 = input.LA(1);
            if ( (LA453_0==Tilde) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt454=2;
            int LA454_0 = input.LA(1);
            if ( ((LA454_0>=Intersection && LA454_0<=Constructor)||(LA454_0>=Promisify && LA454_0<=Abstract)||LA454_0==External||(LA454_0>=Private && LA454_0<=Project)||LA454_0==Public||LA454_0==Static||LA454_0==Target||(LA454_0>=Async && LA454_0<=Await)||LA454_0==Union||LA454_0==This||LA454_0==From||LA454_0==Type||(LA454_0>=Get && LA454_0<=Let)||(LA454_0>=Out && LA454_0<=Set)||LA454_0==As||LA454_0==Of||LA454_0==RULE_IDENTIFIER) ) {
                alt454=1;
            }
            else if ( (LA454_0==Implements) ) {
                int LA454_2 = input.LA(2);
                if ( (LA454_2==Implements||LA454_2==Extends||LA454_2==LessThanSign||LA454_2==LeftCurlyBracket) ) {
                    alt454=1;
                }
            }
            switch (alt454) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt455=2;
            int LA455_0 = input.LA(1);
            if ( (LA455_0==LessThanSign) ) {
                alt455=1;
            }
            switch (alt455) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_61);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt456=2;
            int LA456_0 = input.LA(1);
            if ( (LA456_0==Implements||LA456_0==Extends) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassExtendsImplements_5=norm1_ClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;
        EObject lv_typeVars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_146); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeVarsN4TypeVariableParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_105);
            lv_typeVars_1_0=ruleN4TypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeParametersRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.N4JS.N4TypeVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop457:
            do {
                int alt457=2;
                int LA457_0 = input.LA(1);
                if ( (LA457_0==Comma) ) {
                    alt457=1;
                }
                switch (alt457) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_146); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeVarsN4TypeVariableParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_105);
            	    lv_typeVars_3_0=ruleN4TypeVariable();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeParametersRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.N4JS.N4TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop457;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMembers(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop458:
            do {
                int alt458=2;
                int LA458_0 = input.LA(1);
                if ( ((LA458_0>=Intersection && LA458_0<=With)||(LA458_0>=For && LA458_0<=Var)||(LA458_0>=As && LA458_0<=Of)||LA458_0==LeftParenthesis||LA458_0==Asterisk||LA458_0==LessThanSign||(LA458_0>=CommercialAt && LA458_0<=LeftSquareBracket)||LA458_0==RULE_IDENTIFIER||LA458_0==RULE_INT||LA458_0==RULE_DOUBLE||(LA458_0>=RULE_BINARY_INT && LA458_0<=RULE_OCTAL_INT)||(LA458_0>=RULE_HEX_INT && LA458_0<=RULE_SCIENTIFIC_INT)||LA458_0==RULE_STRING) ) {
                    alt458=1;
                }
                switch (alt458) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_147);
            	    lv_ownedMembersRaw_1_0=ruleN4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop458;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Members(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop459:
            do {
                int alt459=2;
                int LA459_0 = input.LA(1);
                if ( ((LA459_0>=Intersection && LA459_0<=With)||(LA459_0>=For && LA459_0<=Var)||(LA459_0>=As && LA459_0<=Of)||LA459_0==LeftParenthesis||LA459_0==Asterisk||LA459_0==LessThanSign||(LA459_0>=CommercialAt && LA459_0<=LeftSquareBracket)||LA459_0==RULE_IDENTIFIER||LA459_0==RULE_INT||LA459_0==RULE_DOUBLE||(LA459_0>=RULE_BINARY_INT && LA459_0<=RULE_OCTAL_INT)||(LA459_0>=RULE_HEX_INT && LA459_0<=RULE_SCIENTIFIC_INT)||LA459_0==RULE_STRING) ) {
                    alt459=1;
                }
                switch (alt459) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_147);
            	    lv_ownedMembersRaw_1_0=norm1_N4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop459;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt462=2;
            int LA462_0 = input.LA(1);
            if ( (LA462_0==Extends) ) {
                alt462=1;
            }
            else if ( (LA462_0==Implements) ) {
                alt462=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 462, 0, input);
                throw nvae;
            }
            switch (alt462) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_148);
                    this_ClassExtendsClause_0=ruleClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt460=2;
                    int LA460_0 = input.LA(1);
                    if ( (LA460_0==Implements) ) {
                        alt460=1;
                    }
                    switch (alt460) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_149);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt461=2;
                    int LA461_0 = input.LA(1);
                    if ( (LA461_0==Extends) ) {
                        alt461=1;
                    }
                    switch (alt461) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=ruleClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt465=2;
            int LA465_0 = input.LA(1);
            if ( (LA465_0==Extends) ) {
                alt465=1;
            }
            else if ( (LA465_0==Implements) ) {
                alt465=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 465, 0, input);
                throw nvae;
            }
            switch (alt465) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_148);
                    this_ClassExtendsClause_0=norm1_ClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt463=2;
                    int LA463_0 = input.LA(1);
                    if ( (LA463_0==Implements) ) {
                        alt463=1;
                    }
                    switch (alt463) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_149);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt464=2;
                    int LA464_0 = input.LA(1);
                    if ( (LA464_0==Extends) ) {
                        alt464=1;
                    }
                    switch (alt464) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=norm1_ClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_150); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt466=2;
            int LA466_0 = input.LA(1);
            if ( (LA466_0==RULE_IDENTIFIER) ) {
                int LA466_1 = input.LA(2);
                if ( (synpred294_InternalN4JSParser()) ) {
                    alt466=1;
                }
                else if ( (true) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA466_0==Void) && (synpred294_InternalN4JSParser())) {
                alt466=1;
            }
            else if ( (LA466_0==This) ) {
                int LA466_3 = input.LA(2);
                if ( (synpred294_InternalN4JSParser()) ) {
                    alt466=1;
                }
                else if ( (true) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA466_0==Await) ) {
                int LA466_4 = input.LA(2);
                if ( (synpred294_InternalN4JSParser()) ) {
                    alt466=1;
                }
                else if ( (true) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA466_0==Promisify) ) {
                int LA466_5 = input.LA(2);
                if ( (synpred294_InternalN4JSParser()) ) {
                    alt466=1;
                }
                else if ( (true) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA466_0==Target) ) {
                int LA466_6 = input.LA(2);
                if ( (synpred294_InternalN4JSParser()) ) {
                    alt466=1;
                }
                else if ( (true) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA466_0==Default) && (synpred294_InternalN4JSParser())) {
                alt466=1;
            }
            else if ( ((LA466_0>=Intersection && LA466_0<=Implements)||(LA466_0>=Interface && LA466_0<=Abstract)||(LA466_0>=External && LA466_0<=Function)||(LA466_0>=Private && LA466_0<=Project)||(LA466_0>=Import && LA466_0<=Public)||LA466_0==Static||LA466_0==Async||LA466_0==Class||(LA466_0>=False && LA466_0<=Super)||LA466_0==Union||LA466_0==Yield||(LA466_0>=From && LA466_0<=Type)||(LA466_0>=Get && LA466_0<=Set)||LA466_0==SolidusEqualsSign||LA466_0==As||LA466_0==Of||LA466_0==LeftParenthesis||LA466_0==Solidus||LA466_0==LessThanSign||(LA466_0>=CommercialAt && LA466_0<=LeftSquareBracket)||LA466_0==LeftCurlyBracket||(LA466_0>=RULE_TEMPLATE_HEAD && LA466_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA466_0==RULE_INT||LA466_0==RULE_DOUBLE||(LA466_0>=RULE_BINARY_INT && LA466_0<=RULE_SCIENTIFIC_INT)||LA466_0==RULE_STRING) ) {
                alt466=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 466, 0, input);
                throw nvae;
            }
            switch (alt466) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalNodeParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominalNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=ruleLeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_150); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt467=2;
            int LA467_0 = input.LA(1);
            if ( (LA467_0==RULE_IDENTIFIER) ) {
                int LA467_1 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt467=1;
                }
                else if ( (true) ) {
                    alt467=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA467_0==Void) && (synpred295_InternalN4JSParser())) {
                alt467=1;
            }
            else if ( (LA467_0==This) ) {
                int LA467_3 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt467=1;
                }
                else if ( (true) ) {
                    alt467=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA467_0==Await) ) {
                int LA467_4 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt467=1;
                }
                else if ( (true) ) {
                    alt467=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA467_0==Promisify) ) {
                int LA467_5 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt467=1;
                }
                else if ( (true) ) {
                    alt467=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA467_0==Target) ) {
                int LA467_6 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt467=1;
                }
                else if ( (true) ) {
                    alt467=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA467_0==Default) && (synpred295_InternalN4JSParser())) {
                alt467=1;
            }
            else if ( ((LA467_0>=Intersection && LA467_0<=Implements)||(LA467_0>=Interface && LA467_0<=Abstract)||(LA467_0>=External && LA467_0<=Function)||(LA467_0>=Private && LA467_0<=Project)||(LA467_0>=Import && LA467_0<=Public)||LA467_0==Static||LA467_0==Async||LA467_0==Class||(LA467_0>=False && LA467_0<=Super)||LA467_0==Union||(LA467_0>=From && LA467_0<=Type)||(LA467_0>=Get && LA467_0<=Set)||LA467_0==SolidusEqualsSign||LA467_0==As||LA467_0==Of||LA467_0==LeftParenthesis||LA467_0==Solidus||LA467_0==LessThanSign||(LA467_0>=CommercialAt && LA467_0<=LeftSquareBracket)||LA467_0==LeftCurlyBracket||(LA467_0>=RULE_TEMPLATE_HEAD && LA467_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA467_0==RULE_INT||LA467_0==RULE_DOUBLE||(LA467_0>=RULE_BINARY_INT && LA467_0<=RULE_SCIENTIFIC_INT)||LA467_0==RULE_STRING) ) {
                alt467=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 467, 0, input);
                throw nvae;
            }
            switch (alt467) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalNodeParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominalNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=norm1_LeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_implementedInterfaceRefs_1_0 = null;
        EObject lv_implementedInterfaceRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Implements,FOLLOW_151); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_36);
            lv_implementedInterfaceRefs_1_0=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
              					}
              					add(
              						current,
              						"implementedInterfaceRefs",
              						lv_implementedInterfaceRefs_1_0,
              						"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop468:
            do {
                int alt468=2;
                int LA468_0 = input.LA(1);
                if ( (LA468_0==Comma) ) {
                    alt468=1;
                }
                switch (alt468) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_implementedInterfaceRefs_3_0=ruleParameterizedTypeRefNominalNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"implementedInterfaceRefs",
            	      							lv_implementedInterfaceRefs_3_0,
            	      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop468;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassExpression=ruleN4ClassExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt469=2;
            int LA469_0 = input.LA(1);
            if ( ((LA469_0>=Intersection && LA469_0<=Constructor)||(LA469_0>=Promisify && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Target||(LA469_0>=Async && LA469_0<=Await)||LA469_0==Union||(LA469_0>=Yield && LA469_0<=This)||LA469_0==From||LA469_0==Type||(LA469_0>=Get && LA469_0<=Let)||(LA469_0>=Out && LA469_0<=Set)||LA469_0==As||LA469_0==Of||LA469_0==RULE_IDENTIFIER) ) {
                alt469=1;
            }
            else if ( (LA469_0==Implements) ) {
                int LA469_2 = input.LA(2);
                if ( (LA469_2==Implements||LA469_2==Extends||LA469_2==LeftCurlyBracket) ) {
                    alt469=1;
                }
            }
            switch (alt469) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt470=2;
            int LA470_0 = input.LA(1);
            if ( (LA470_0==Implements||LA470_0==Extends) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_13);
                    this_ClassExtendsImplements_3=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt471=2;
            int LA471_0 = input.LA(1);
            if ( ((LA471_0>=Intersection && LA471_0<=Constructor)||(LA471_0>=Promisify && LA471_0<=Abstract)||LA471_0==External||(LA471_0>=Private && LA471_0<=Project)||LA471_0==Public||LA471_0==Static||LA471_0==Target||(LA471_0>=Async && LA471_0<=Await)||LA471_0==Union||LA471_0==This||LA471_0==From||LA471_0==Type||(LA471_0>=Get && LA471_0<=Let)||(LA471_0>=Out && LA471_0<=Set)||LA471_0==As||LA471_0==Of||LA471_0==RULE_IDENTIFIER) ) {
                alt471=1;
            }
            else if ( (LA471_0==Implements) ) {
                int LA471_2 = input.LA(2);
                if ( (LA471_2==Implements||LA471_2==Extends||LA471_2==LeftCurlyBracket) ) {
                    alt471=1;
                }
            }
            switch (alt471) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_61);
                    lv_name_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt472=2;
            int LA472_0 = input.LA(1);
            if ( (LA472_0==Implements||LA472_0==Extends) ) {
                alt472=1;
            }
            switch (alt472) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassExtendsImplements_3=norm1_ClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4InterfaceDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4InterfaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4InterfaceDeclaration=ruleN4InterfaceDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4InterfaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_InterfaceExtendsList_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop473:
            do {
                int alt473=2;
                int LA473_0 = input.LA(1);
                if ( ((LA473_0>=Protected && LA473_0<=Abstract)||LA473_0==External||(LA473_0>=Private && LA473_0<=Project)||LA473_0==Public||LA473_0==Static||LA473_0==Const) ) {
                    alt473=1;
                }
                switch (alt473) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop473;
                }
            } while (true);
            otherlv_1=(Token)match(input,Interface,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt474=2;
            int LA474_0 = input.LA(1);
            if ( (LA474_0==Tilde) ) {
                alt474=1;
            }
            switch (alt474) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt475=2;
            int LA475_0 = input.LA(1);
            if ( ((LA475_0>=Intersection && LA475_0<=Constructor)||(LA475_0>=Promisify && LA475_0<=Abstract)||LA475_0==External||(LA475_0>=Private && LA475_0<=Project)||LA475_0==Public||LA475_0==Static||LA475_0==Target||(LA475_0>=Async && LA475_0<=Await)||LA475_0==Union||(LA475_0>=Yield && LA475_0<=This)||LA475_0==From||LA475_0==Type||(LA475_0>=Get && LA475_0<=Let)||(LA475_0>=Out && LA475_0<=Set)||LA475_0==As||LA475_0==Of||LA475_0==RULE_IDENTIFIER) ) {
                alt475=1;
            }
            else if ( (LA475_0==Implements) ) {
                int LA475_2 = input.LA(2);
                if ( (LA475_2==Implements||LA475_2==Extends||LA475_2==LessThanSign||LA475_2==LeftCurlyBracket) ) {
                    alt475=1;
                }
            }
            switch (alt475) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt476=2;
            int LA476_0 = input.LA(1);
            if ( (LA476_0==LessThanSign) ) {
                alt476=1;
            }
            switch (alt476) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt477=2;
            int LA477_0 = input.LA(1);
            if ( (LA477_0==Implements||LA477_0==Extends) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_13);
                    this_InterfaceExtendsList_5=ruleInterfaceExtendsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_InterfaceExtendsList_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_InterfaceExtendsList_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop478:
            do {
                int alt478=2;
                int LA478_0 = input.LA(1);
                if ( ((LA478_0>=Protected && LA478_0<=Abstract)||LA478_0==External||(LA478_0>=Private && LA478_0<=Project)||LA478_0==Public||LA478_0==Static||LA478_0==Const) ) {
                    alt478=1;
                }
                switch (alt478) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop478;
                }
            } while (true);
            otherlv_1=(Token)match(input,Interface,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt479=2;
            int LA479_0 = input.LA(1);
            if ( (LA479_0==Tilde) ) {
                alt479=1;
            }
            switch (alt479) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt480=2;
            int LA480_0 = input.LA(1);
            if ( ((LA480_0>=Intersection && LA480_0<=Constructor)||(LA480_0>=Promisify && LA480_0<=Abstract)||LA480_0==External||(LA480_0>=Private && LA480_0<=Project)||LA480_0==Public||LA480_0==Static||LA480_0==Target||(LA480_0>=Async && LA480_0<=Await)||LA480_0==Union||LA480_0==This||LA480_0==From||LA480_0==Type||(LA480_0>=Get && LA480_0<=Let)||(LA480_0>=Out && LA480_0<=Set)||LA480_0==As||LA480_0==Of||LA480_0==RULE_IDENTIFIER) ) {
                alt480=1;
            }
            else if ( (LA480_0==Implements) ) {
                int LA480_2 = input.LA(2);
                if ( (LA480_2==Implements||LA480_2==Extends||LA480_2==LessThanSign||LA480_2==LeftCurlyBracket) ) {
                    alt480=1;
                }
            }
            switch (alt480) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt481=2;
            int LA481_0 = input.LA(1);
            if ( (LA481_0==LessThanSign) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_61);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt482=2;
            int LA482_0 = input.LA(1);
            if ( (LA482_0==Implements||LA482_0==Extends) ) {
                alt482=1;
            }
            switch (alt482) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_61);
                    this_InterfaceExtendsList_5=ruleInterfaceExtendsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_InterfaceExtendsList_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleInterfaceExtendsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_superInterfaceRefs_2_0 = null;
        EObject lv_superInterfaceRefs_4_0 = null;
        	enterRule();
        try {
            {
            {
            int alt483=2;
            int LA483_0 = input.LA(1);
            if ( (LA483_0==Extends) ) {
                alt483=1;
            }
            else if ( (LA483_0==Implements) ) {
                alt483=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 483, 0, input);
                throw nvae;
            }
            switch (alt483) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_1=(Token)match(input,Implements,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_36);
            lv_superInterfaceRefs_2_0=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
              					}
              					add(
              						current,
              						"superInterfaceRefs",
              						lv_superInterfaceRefs_2_0,
              						"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop484:
            do {
                int alt484=2;
                int LA484_0 = input.LA(1);
                if ( (LA484_0==Comma) ) {
                    alt484=1;
                }
                switch (alt484) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_superInterfaceRefs_4_0=ruleParameterizedTypeRefNominalNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"superInterfaceRefs",
            	      							lv_superInterfaceRefs_4_0,
            	      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop484;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumDeclaration=ruleN4EnumDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_literals_5_0 = null;
        EObject lv_literals_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop485:
            do {
                int alt485=2;
                int LA485_0 = input.LA(1);
                if ( ((LA485_0>=Protected && LA485_0<=Abstract)||LA485_0==External||(LA485_0>=Private && LA485_0<=Project)||LA485_0==Public||LA485_0==Static||LA485_0==Const) ) {
                    alt485=1;
                }
                switch (alt485) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop485;
                }
            } while (true);
            otherlv_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt486=2;
            int LA486_0 = input.LA(1);
            if ( ((LA486_0>=Intersection && LA486_0<=Implements)||(LA486_0>=Promisify && LA486_0<=Abstract)||LA486_0==External||(LA486_0>=Private && LA486_0<=Project)||LA486_0==Public||LA486_0==Static||LA486_0==Target||(LA486_0>=Async && LA486_0<=Await)||LA486_0==Union||(LA486_0>=Yield && LA486_0<=This)||LA486_0==From||LA486_0==Type||(LA486_0>=Get && LA486_0<=Let)||(LA486_0>=Out && LA486_0<=Set)||LA486_0==As||LA486_0==Of||LA486_0==RULE_IDENTIFIER) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt488=2;
            int LA488_0 = input.LA(1);
            if ( ((LA488_0>=Intersection && LA488_0<=With)||(LA488_0>=For && LA488_0<=Var)||(LA488_0>=As && LA488_0<=Of)||LA488_0==RULE_IDENTIFIER) ) {
                alt488=1;
            }
            switch (alt488) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_literals_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_5_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop487:
                    do {
                        int alt487=2;
                        int LA487_0 = input.LA(1);
                        if ( (LA487_0==Comma) ) {
                            alt487=1;
                        }
                        switch (alt487) {
                    	case 1 :
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_6, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_literals_7_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_7_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop487;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_literals_5_0 = null;
        EObject lv_literals_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop489:
            do {
                int alt489=2;
                int LA489_0 = input.LA(1);
                if ( ((LA489_0>=Protected && LA489_0<=Abstract)||LA489_0==External||(LA489_0>=Private && LA489_0<=Project)||LA489_0==Public||LA489_0==Static||LA489_0==Const) ) {
                    alt489=1;
                }
                switch (alt489) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop489;
                }
            } while (true);
            otherlv_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt490=2;
            int LA490_0 = input.LA(1);
            if ( ((LA490_0>=Intersection && LA490_0<=Implements)||(LA490_0>=Promisify && LA490_0<=Abstract)||LA490_0==External||(LA490_0>=Private && LA490_0<=Project)||LA490_0==Public||LA490_0==Static||LA490_0==Target||(LA490_0>=Async && LA490_0<=Await)||LA490_0==Union||LA490_0==This||LA490_0==From||LA490_0==Type||(LA490_0>=Get && LA490_0<=Let)||(LA490_0>=Out && LA490_0<=Set)||LA490_0==As||LA490_0==Of||LA490_0==RULE_IDENTIFIER) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt492=2;
            int LA492_0 = input.LA(1);
            if ( ((LA492_0>=Intersection && LA492_0<=With)||(LA492_0>=For && LA492_0<=Var)||(LA492_0>=As && LA492_0<=Of)||LA492_0==RULE_IDENTIFIER) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_literals_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_5_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop491:
                    do {
                        int alt491=2;
                        int LA491_0 = input.LA(1);
                        if ( (LA491_0==Comma) ) {
                            alt491=1;
                        }
                        switch (alt491) {
                    	case 1 :
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_6, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_literals_7_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_7_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop491;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumLiteral=ruleN4EnumLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_valueExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_48);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt493=2;
            int LA493_0 = input.LA(1);
            if ( (LA493_0==Colon) ) {
                alt493=1;
            }
            switch (alt493) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getValueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_valueExpression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
                      						}
                      						set(
                      							current,
                      							"valueExpression",
                      							lv_valueExpression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4TypeAliasDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4TypeAliasDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4TypeAliasDeclaration=ruleN4TypeAliasDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4TypeAliasDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject lv_declaredTypeRefNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4TypeAliasDeclarationAccess().getN4TypeAliasDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop494:
            do {
                int alt494=2;
                int LA494_0 = input.LA(1);
                if ( ((LA494_0>=Protected && LA494_0<=Abstract)||LA494_0==External||(LA494_0>=Private && LA494_0<=Project)||LA494_0==Public||LA494_0==Static) ) {
                    alt494=1;
                }
                switch (alt494) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_18);
            	    lv_declaredModifiers_1_0=ruleN4ModifierWithoutConst();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop494;
                }
            } while (true);
            otherlv_2=(Token)match(input,Type,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4TypeAliasDeclarationAccess().getTypeKeyword_0_0_2());
            }
            int alt495=2;
            int LA495_0 = input.LA(1);
            if ( ((LA495_0>=Intersection && LA495_0<=Implements)||(LA495_0>=Promisify && LA495_0<=Abstract)||LA495_0==External||(LA495_0>=Private && LA495_0<=Project)||LA495_0==Public||LA495_0==Static||LA495_0==Target||(LA495_0>=Async && LA495_0<=Await)||LA495_0==Union||(LA495_0>=Yield && LA495_0<=This)||LA495_0==From||LA495_0==Type||(LA495_0>=Get && LA495_0<=Let)||(LA495_0>=Out && LA495_0<=Set)||LA495_0==As||LA495_0==Of||LA495_0==RULE_IDENTIFIER) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_19);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt496=2;
            int LA496_0 = input.LA(1);
            if ( (LA496_0==LessThanSign) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4TypeAliasDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_20);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,EqualsSign,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4TypeAliasDeclarationAccess().getEqualsSignKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_24);
            lv_declaredTypeRefNode_6_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_6_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getSemiParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject lv_declaredTypeRefNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4TypeAliasDeclarationAccess().getN4TypeAliasDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop497:
            do {
                int alt497=2;
                int LA497_0 = input.LA(1);
                if ( ((LA497_0>=Protected && LA497_0<=Abstract)||LA497_0==External||(LA497_0>=Private && LA497_0<=Project)||LA497_0==Public||LA497_0==Static) ) {
                    alt497=1;
                }
                switch (alt497) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_18);
            	    lv_declaredModifiers_1_0=ruleN4ModifierWithoutConst();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop497;
                }
            } while (true);
            otherlv_2=(Token)match(input,Type,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4TypeAliasDeclarationAccess().getTypeKeyword_0_0_2());
            }
            int alt498=2;
            int LA498_0 = input.LA(1);
            if ( ((LA498_0>=Intersection && LA498_0<=Implements)||(LA498_0>=Promisify && LA498_0<=Abstract)||LA498_0==External||(LA498_0>=Private && LA498_0<=Project)||LA498_0==Public||LA498_0==Static||LA498_0==Target||(LA498_0>=Async && LA498_0<=Await)||LA498_0==Union||LA498_0==This||LA498_0==From||LA498_0==Type||(LA498_0>=Get && LA498_0<=Let)||(LA498_0>=Out && LA498_0<=Set)||LA498_0==As||LA498_0==Of||LA498_0==RULE_IDENTIFIER) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_19);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt499=2;
            int LA499_0 = input.LA(1);
            if ( (LA499_0==LessThanSign) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4TypeAliasDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_20);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,EqualsSign,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4TypeAliasDeclarationAccess().getEqualsSignKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_24);
            lv_declaredTypeRefNode_6_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_6_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getSemiParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberDeclaration=ruleN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4FieldDeclaration_4 = null;
        EObject this_N4CallableConstructorDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt500=6;
            alt500 = dfa500.predict(input);
            switch (alt500) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=ruleAnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=ruleN4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=ruleN4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=ruleN4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=ruleN4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=ruleN4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4FieldDeclaration_4 = null;
        EObject this_N4CallableConstructorDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt501=6;
            alt501 = dfa501.predict(input);
            switch (alt501) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=norm1_AnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=norm1_N4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=norm1_N4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=norm1_N4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=norm1_N4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=norm1_N4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedN4MemberDeclaration=ruleAnnotatedN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_19_0=null;
        Token otherlv_25=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredName_20_0 = null;
        EObject this_MethodParamsReturnAndBody_21 = null;
        EObject this_AsyncNoTrailingLineBreak_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsReturnAndBody_24 = null;
        EObject this_FieldDeclarationImpl_27 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_153);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt513=4;
            alt513 = dfa513.predict(input);
            switch (alt513) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop502:
                    do {
                        int alt502=2;
                        int LA502_0 = input.LA(1);
                        if ( ((LA502_0>=Protected && LA502_0<=Abstract)||LA502_0==External||(LA502_0>=Private && LA502_0<=Project)||LA502_0==Public||LA502_0==Static||LA502_0==Const) ) {
                            alt502=1;
                        }
                        switch (alt502) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_154);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop502;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_155);
                    this_GetterHeader_3=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt503=2;
                    int LA503_0 = input.LA(1);
                    if ( (LA503_0==LeftCurlyBracket) && (synpred309_InternalN4JSParser())) {
                        alt503=1;
                    }
                    switch (alt503) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_body_4_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt504=2;
                    int LA504_0 = input.LA(1);
                    if ( (LA504_0==Semicolon) ) {
                        alt504=1;
                    }
                    switch (alt504) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop505:
                    do {
                        int alt505=2;
                        int LA505_0 = input.LA(1);
                        if ( ((LA505_0>=Protected && LA505_0<=Abstract)||LA505_0==External||(LA505_0>=Private && LA505_0<=Project)||LA505_0==Public||LA505_0==Static||LA505_0==Const) ) {
                            alt505=1;
                        }
                        switch (alt505) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_156);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop505;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredName_9_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt506=2;
                    int LA506_0 = input.LA(1);
                    if ( (LA506_0==QuestionMark) ) {
                        alt506=1;
                    }
                    switch (alt506) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_10_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_fpar_12_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_155); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt507=2;
                    int LA507_0 = input.LA(1);
                    if ( (LA507_0==LeftCurlyBracket) && (synpred312_InternalN4JSParser())) {
                        alt507=1;
                    }
                    switch (alt507) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_body_14_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt508=2;
                    int LA508_0 = input.LA(1);
                    if ( (LA508_0==Semicolon) ) {
                        alt508=1;
                    }
                    switch (alt508) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop509:
                    do {
                        int alt509=2;
                        alt509 = dfa509.predict(input);
                        switch (alt509) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_153);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop509;
                        }
                    } while (true);
                    int alt510=2;
                    int LA510_0 = input.LA(1);
                    if ( (LA510_0==LessThanSign) ) {
                        alt510=1;
                    }
                    switch (alt510) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt511=2;
                    int LA511_0 = input.LA(1);
                    if ( (LA511_0==Asterisk) ) {
                        alt511=1;
                    }
                    else if ( ((LA511_0>=Intersection && LA511_0<=With)||(LA511_0>=For && LA511_0<=Var)||(LA511_0>=As && LA511_0<=Of)||LA511_0==LeftSquareBracket||LA511_0==RULE_IDENTIFIER||LA511_0==RULE_INT||LA511_0==RULE_DOUBLE||(LA511_0>=RULE_BINARY_INT && LA511_0<=RULE_OCTAL_INT)||(LA511_0>=RULE_HEX_INT && LA511_0<=RULE_SCIENTIFIC_INT)||LA511_0==RULE_STRING) ) {
                        alt511=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 511, 0, input);
                        throw nvae;
                    }
                    switch (alt511) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_19_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_19_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_19_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_45);
                            lv_declaredName_20_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_20_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsReturnAndBody_21=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_21;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0());
                            }
                            pushFollow(FOLLOW_98);
                            this_AsyncNoTrailingLineBreak_22=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_22;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0());
                            }
                            pushFollow(FOLLOW_157);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsReturnAndBody_24=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt512=2;
                    int LA512_0 = input.LA(1);
                    if ( (LA512_0==Semicolon) ) {
                        alt512=1;
                    }
                    switch (alt512) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_27=ruleFieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_27;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_19_0=null;
        Token otherlv_25=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredName_20_0 = null;
        EObject this_MethodParamsReturnAndBody_21 = null;
        EObject this_AsyncNoTrailingLineBreak_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsReturnAndBody_24 = null;
        EObject this_FieldDeclarationImpl_27 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_153);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt525=4;
            alt525 = dfa525.predict(input);
            switch (alt525) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop514:
                    do {
                        int alt514=2;
                        int LA514_0 = input.LA(1);
                        if ( ((LA514_0>=Protected && LA514_0<=Abstract)||LA514_0==External||(LA514_0>=Private && LA514_0<=Project)||LA514_0==Public||LA514_0==Static||LA514_0==Const) ) {
                            alt514=1;
                        }
                        switch (alt514) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_154);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop514;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_155);
                    this_GetterHeader_3=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt515=2;
                    int LA515_0 = input.LA(1);
                    if ( (LA515_0==LeftCurlyBracket) && (synpred317_InternalN4JSParser())) {
                        alt515=1;
                    }
                    switch (alt515) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_body_4_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt516=2;
                    int LA516_0 = input.LA(1);
                    if ( (LA516_0==Semicolon) ) {
                        alt516=1;
                    }
                    switch (alt516) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop517:
                    do {
                        int alt517=2;
                        int LA517_0 = input.LA(1);
                        if ( ((LA517_0>=Protected && LA517_0<=Abstract)||LA517_0==External||(LA517_0>=Private && LA517_0<=Project)||LA517_0==Public||LA517_0==Static||LA517_0==Const) ) {
                            alt517=1;
                        }
                        switch (alt517) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_156);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop517;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredName_9_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt518=2;
                    int LA518_0 = input.LA(1);
                    if ( (LA518_0==QuestionMark) ) {
                        alt518=1;
                    }
                    switch (alt518) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_10_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_fpar_12_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_155); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt519=2;
                    int LA519_0 = input.LA(1);
                    if ( (LA519_0==LeftCurlyBracket) && (synpred320_InternalN4JSParser())) {
                        alt519=1;
                    }
                    switch (alt519) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_body_14_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt520=2;
                    int LA520_0 = input.LA(1);
                    if ( (LA520_0==Semicolon) ) {
                        alt520=1;
                    }
                    switch (alt520) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop521:
                    do {
                        int alt521=2;
                        alt521 = dfa521.predict(input);
                        switch (alt521) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_153);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop521;
                        }
                    } while (true);
                    int alt522=2;
                    int LA522_0 = input.LA(1);
                    if ( (LA522_0==LessThanSign) ) {
                        alt522=1;
                    }
                    switch (alt522) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt523=2;
                    int LA523_0 = input.LA(1);
                    if ( (LA523_0==Asterisk) ) {
                        alt523=1;
                    }
                    else if ( ((LA523_0>=Intersection && LA523_0<=With)||(LA523_0>=For && LA523_0<=Var)||(LA523_0>=As && LA523_0<=Of)||LA523_0==LeftSquareBracket||LA523_0==RULE_IDENTIFIER||LA523_0==RULE_INT||LA523_0==RULE_DOUBLE||(LA523_0>=RULE_BINARY_INT && LA523_0<=RULE_OCTAL_INT)||(LA523_0>=RULE_HEX_INT && LA523_0<=RULE_SCIENTIFIC_INT)||LA523_0==RULE_STRING) ) {
                        alt523=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 523, 0, input);
                        throw nvae;
                    }
                    switch (alt523) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_19_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_19_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_19_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_45);
                            lv_declaredName_20_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_20_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsReturnAndBody_21=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_21;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0());
                            }
                            pushFollow(FOLLOW_98);
                            this_AsyncNoTrailingLineBreak_22=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_22;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0());
                            }
                            pushFollow(FOLLOW_157);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2());
                            }
                            pushFollow(FOLLOW_101);
                            this_MethodParamsReturnAndBody_24=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt524=2;
                    int LA524_0 = input.LA(1);
                    if ( (LA524_0==Semicolon) ) {
                        alt524=1;
                    }
                    switch (alt524) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_27=norm1_FieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_27;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_3 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            loop526:
            do {
                int alt526=2;
                alt526 = dfa526.predict(input);
                switch (alt526) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop526;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_158);
            lv_declaredName_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt527=2;
            int LA527_0 = input.LA(1);
            if ( (LA527_0==QuestionMark) ) {
                alt527=1;
            }
            switch (alt527) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt528=2;
            int LA528_0 = input.LA(1);
            if ( (LA528_0==Colon) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_160);
                    this_ColonSepDeclaredTypeRef_3=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt529=2;
            int LA529_0 = input.LA(1);
            if ( (LA529_0==EqualsSign) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_5_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_3 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            loop530:
            do {
                int alt530=2;
                alt530 = dfa530.predict(input);
                switch (alt530) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop530;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_158);
            lv_declaredName_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt531=2;
            int LA531_0 = input.LA(1);
            if ( (LA531_0==QuestionMark) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt532=2;
            int LA532_0 = input.LA(1);
            if ( (LA532_0==Colon) ) {
                alt532=1;
            }
            switch (alt532) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_160);
                    this_ColonSepDeclaredTypeRef_3=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt533=2;
            int LA533_0 = input.LA(1);
            if ( (LA533_0==EqualsSign) ) {
                alt533=1;
            }
            switch (alt533) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_5_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4FieldDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4FieldDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4FieldDeclaration=ruleN4FieldDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4FieldDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=ruleFieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=norm1_FieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MethodDeclaration=ruleN4MethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeParameters_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop534:
            do {
                int alt534=2;
                alt534 = dfa534.predict(input);
                switch (alt534) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_153);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop534;
                }
            } while (true);
            int alt535=2;
            int LA535_0 = input.LA(1);
            if ( (LA535_0==LessThanSign) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_TypeParameters_2=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_100);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt536=2;
            int LA536_0 = input.LA(1);
            if ( (LA536_0==Asterisk) ) {
                alt536=1;
            }
            else if ( ((LA536_0>=Intersection && LA536_0<=With)||(LA536_0>=For && LA536_0<=Var)||(LA536_0>=As && LA536_0<=Of)||LA536_0==LeftSquareBracket||LA536_0==RULE_IDENTIFIER||LA536_0==RULE_INT||LA536_0==RULE_DOUBLE||(LA536_0>=RULE_BINARY_INT && LA536_0<=RULE_OCTAL_INT)||(LA536_0>=RULE_HEX_INT && LA536_0<=RULE_SCIENTIFIC_INT)||LA536_0==RULE_STRING) ) {
                alt536=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 536, 0, input);
                throw nvae;
            }
            switch (alt536) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_157);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt537=2;
            int LA537_0 = input.LA(1);
            if ( (LA537_0==Semicolon) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeParameters_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop538:
            do {
                int alt538=2;
                alt538 = dfa538.predict(input);
                switch (alt538) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_153);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop538;
                }
            } while (true);
            int alt539=2;
            int LA539_0 = input.LA(1);
            if ( (LA539_0==LessThanSign) ) {
                alt539=1;
            }
            switch (alt539) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_TypeParameters_2=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_100);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt540=2;
            int LA540_0 = input.LA(1);
            if ( (LA540_0==Asterisk) ) {
                alt540=1;
            }
            else if ( ((LA540_0>=Intersection && LA540_0<=With)||(LA540_0>=For && LA540_0<=Var)||(LA540_0>=As && LA540_0<=Of)||LA540_0==LeftSquareBracket||LA540_0==RULE_IDENTIFIER||LA540_0==RULE_INT||LA540_0==RULE_DOUBLE||(LA540_0>=RULE_BINARY_INT && LA540_0<=RULE_OCTAL_INT)||(LA540_0>=RULE_HEX_INT && LA540_0<=RULE_SCIENTIFIC_INT)||LA540_0==RULE_STRING) ) {
                alt540=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 540, 0, input);
                throw nvae;
            }
            switch (alt540) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_45);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_157);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_101);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt541=2;
            int LA541_0 = input.LA(1);
            if ( (LA541_0==Semicolon) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4CallableConstructorDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4CallableConstructorDeclaration=ruleN4CallableConstructorDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4CallableConstructorDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
            }
            pushFollow(FOLLOW_101);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
            }
            int alt542=2;
            int LA542_0 = input.LA(1);
            if ( (LA542_0==Semicolon) ) {
                alt542=1;
            }
            switch (alt542) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
            }
            pushFollow(FOLLOW_101);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
            }
            int alt543=2;
            int LA543_0 = input.LA(1);
            if ( (LA543_0==Semicolon) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_161);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt544=2;
            int LA544_0 = input.LA(1);
            if ( (LA544_0==LeftCurlyBracket) && (synpred330_InternalN4JSParser())) {
                alt544=1;
            }
            switch (alt544) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_161);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt545=2;
            int LA545_0 = input.LA(1);
            if ( (LA545_0==LeftCurlyBracket) && (synpred331_InternalN4JSParser())) {
                alt545=1;
            }
            switch (alt545) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_162);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt546=2;
            int LA546_0 = input.LA(1);
            if ( (LA546_0==Colon) ) {
                alt546=1;
            }
            switch (alt546) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_161);
                    this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt547=2;
            int LA547_0 = input.LA(1);
            if ( (LA547_0==LeftCurlyBracket) && (synpred332_InternalN4JSParser())) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_162);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt548=2;
            int LA548_0 = input.LA(1);
            if ( (LA548_0==Colon) ) {
                alt548=1;
            }
            switch (alt548) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_161);
                    this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt549=2;
            int LA549_0 = input.LA(1);
            if ( (LA549_0==LeftCurlyBracket) && (synpred333_InternalN4JSParser())) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4GetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4GetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4GetterDeclaration=ruleN4GetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4GetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop550:
            do {
                int alt550=2;
                int LA550_0 = input.LA(1);
                if ( ((LA550_0>=Protected && LA550_0<=Abstract)||LA550_0==External||(LA550_0>=Private && LA550_0<=Project)||LA550_0==Public||LA550_0==Static||LA550_0==Const) ) {
                    alt550=1;
                }
                switch (alt550) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_154);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop550;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_155);
            this_GetterHeader_2=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt551=2;
            int LA551_0 = input.LA(1);
            if ( (LA551_0==LeftCurlyBracket) && (synpred335_InternalN4JSParser())) {
                alt551=1;
            }
            switch (alt551) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_body_3_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt552=2;
            int LA552_0 = input.LA(1);
            if ( (LA552_0==Semicolon) ) {
                alt552=1;
            }
            switch (alt552) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop553:
            do {
                int alt553=2;
                int LA553_0 = input.LA(1);
                if ( ((LA553_0>=Protected && LA553_0<=Abstract)||LA553_0==External||(LA553_0>=Private && LA553_0<=Project)||LA553_0==Public||LA553_0==Static||LA553_0==Const) ) {
                    alt553=1;
                }
                switch (alt553) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_154);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop553;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_155);
            this_GetterHeader_2=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt554=2;
            int LA554_0 = input.LA(1);
            if ( (LA554_0==LeftCurlyBracket) && (synpred337_InternalN4JSParser())) {
                alt554=1;
            }
            switch (alt554) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_body_3_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt555=2;
            int LA555_0 = input.LA(1);
            if ( (LA555_0==Semicolon) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleGetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Get,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt556=2;
            int LA556_0 = input.LA(1);
            if ( (LA556_0==QuestionMark) ) {
                alt556=1;
            }
            switch (alt556) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt557=2;
            int LA557_0 = input.LA(1);
            if ( (LA557_0==Colon) ) {
                alt557=1;
            }
            switch (alt557) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_GetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Get,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt558=2;
            int LA558_0 = input.LA(1);
            if ( (LA558_0==QuestionMark) ) {
                alt558=1;
            }
            switch (alt558) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt559=2;
            int LA559_0 = input.LA(1);
            if ( (LA559_0==Colon) ) {
                alt559=1;
            }
            switch (alt559) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4SetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4SetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4SetterDeclaration=ruleN4SetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4SetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop560:
            do {
                int alt560=2;
                int LA560_0 = input.LA(1);
                if ( ((LA560_0>=Protected && LA560_0<=Abstract)||LA560_0==External||(LA560_0>=Private && LA560_0<=Project)||LA560_0==Public||LA560_0==Static||LA560_0==Const) ) {
                    alt560=1;
                }
                switch (alt560) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_156);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop560;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt561=2;
            int LA561_0 = input.LA(1);
            if ( (LA561_0==QuestionMark) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_4_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_fpar_6_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_155); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt562=2;
            int LA562_0 = input.LA(1);
            if ( (LA562_0==LeftCurlyBracket) && (synpred342_InternalN4JSParser())) {
                alt562=1;
            }
            switch (alt562) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt563=2;
            int LA563_0 = input.LA(1);
            if ( (LA563_0==Semicolon) ) {
                alt563=1;
            }
            switch (alt563) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop564:
            do {
                int alt564=2;
                int LA564_0 = input.LA(1);
                if ( ((LA564_0>=Protected && LA564_0<=Abstract)||LA564_0==External||(LA564_0>=Private && LA564_0<=Project)||LA564_0==Public||LA564_0==Static||LA564_0==Const) ) {
                    alt564=1;
                }
                switch (alt564) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_156);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop564;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_99);
            lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt565=2;
            int LA565_0 = input.LA(1);
            if ( (LA565_0==QuestionMark) ) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_4_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_fpar_6_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_155); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt566=2;
            int LA566_0 = input.LA(1);
            if ( (LA566_0==LeftCurlyBracket) && (synpred345_InternalN4JSParser())) {
                alt566=1;
            }
            switch (alt566) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_body_8_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt567=2;
            int LA567_0 = input.LA(1);
            if ( (LA567_0==Semicolon) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingPattern=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt568=2;
            int LA568_0 = input.LA(1);
            if ( (LA568_0==LeftCurlyBracket) ) {
                alt568=1;
            }
            else if ( (LA568_0==LeftSquareBracket) ) {
                alt568=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 568, 0, input);
                throw nvae;
            }
            switch (alt568) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=ruleObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=ruleArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt569=2;
            int LA569_0 = input.LA(1);
            if ( (LA569_0==LeftCurlyBracket) ) {
                alt569=1;
            }
            else if ( (LA569_0==LeftSquareBracket) ) {
                alt569=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 569, 0, input);
                throw nvae;
            }
            switch (alt569) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=norm1_ObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=norm1_ArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectBindingPattern=ruleObjectBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_163); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt571=2;
            int LA571_0 = input.LA(1);
            if ( ((LA571_0>=Intersection && LA571_0<=With)||(LA571_0>=For && LA571_0<=Var)||(LA571_0>=As && LA571_0<=Of)||(LA571_0>=CommercialAt && LA571_0<=LeftSquareBracket)||LA571_0==RULE_IDENTIFIER||LA571_0==RULE_INT||LA571_0==RULE_DOUBLE||(LA571_0>=RULE_BINARY_INT && LA571_0<=RULE_OCTAL_INT)||(LA571_0>=RULE_HEX_INT && LA571_0<=RULE_SCIENTIFIC_INT)||LA571_0==RULE_STRING) ) {
                alt571=1;
            }
            switch (alt571) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_properties_2_0=ruleBindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop570:
                    do {
                        int alt570=2;
                        int LA570_0 = input.LA(1);
                        if ( (LA570_0==Comma) ) {
                            alt570=1;
                        }
                        switch (alt570) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_164); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_properties_4_0=ruleBindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop570;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_163); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt573=2;
            int LA573_0 = input.LA(1);
            if ( ((LA573_0>=Intersection && LA573_0<=With)||(LA573_0>=For && LA573_0<=Var)||(LA573_0>=As && LA573_0<=Of)||(LA573_0>=CommercialAt && LA573_0<=LeftSquareBracket)||LA573_0==RULE_IDENTIFIER||LA573_0==RULE_INT||LA573_0==RULE_DOUBLE||(LA573_0>=RULE_BINARY_INT && LA573_0<=RULE_OCTAL_INT)||(LA573_0>=RULE_HEX_INT && LA573_0<=RULE_SCIENTIFIC_INT)||LA573_0==RULE_STRING) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_17);
                    lv_properties_2_0=norm1_BindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop572:
                    do {
                        int alt572=2;
                        int LA572_0 = input.LA(1);
                        if ( (LA572_0==Comma) ) {
                            alt572=1;
                        }
                        switch (alt572) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_164); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_properties_4_0=norm1_BindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop572;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayBindingPattern=ruleArrayBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_165); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop574:
            do {
                int alt574=2;
                int LA574_0 = input.LA(1);
                if ( (LA574_0==Comma) ) {
                    alt574=1;
                }
                switch (alt574) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop574;
                }
            } while (true);
            int alt579=2;
            int LA579_0 = input.LA(1);
            if ( ((LA579_0>=Intersection && LA579_0<=Implements)||(LA579_0>=Promisify && LA579_0<=Abstract)||LA579_0==External||(LA579_0>=Private && LA579_0<=Project)||LA579_0==Public||LA579_0==Static||LA579_0==Target||(LA579_0>=Async && LA579_0<=Await)||LA579_0==Union||(LA579_0>=Yield && LA579_0<=This)||LA579_0==From||LA579_0==Type||LA579_0==FullStopFullStopFullStop||(LA579_0>=Get && LA579_0<=Let)||(LA579_0>=Out && LA579_0<=Set)||LA579_0==As||LA579_0==Of||(LA579_0>=CommercialAt && LA579_0<=LeftSquareBracket)||LA579_0==LeftCurlyBracket||LA579_0==RULE_IDENTIFIER) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_93);
                    lv_elements_3_0=ruleBindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop576:
                    do {
                        int alt576=2;
                        alt576 = dfa576.predict(input);
                        switch (alt576) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop575:
                    	    do {
                    	        int alt575=2;
                    	        int LA575_0 = input.LA(1);
                    	        if ( (LA575_0==Comma) ) {
                    	            alt575=1;
                    	        }
                    	        switch (alt575) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_166);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop575;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_elements_6_0=ruleBindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop576;
                        }
                    } while (true);
                    int alt578=2;
                    int LA578_0 = input.LA(1);
                    if ( (LA578_0==Comma) ) {
                        alt578=1;
                    }
                    switch (alt578) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop577:
                            do {
                                int alt577=2;
                                int LA577_0 = input.LA(1);
                                if ( (LA577_0==Comma) ) {
                                    alt577=1;
                                }
                                switch (alt577) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_93);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop577;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_165); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop580:
            do {
                int alt580=2;
                int LA580_0 = input.LA(1);
                if ( (LA580_0==Comma) ) {
                    alt580=1;
                }
                switch (alt580) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop580;
                }
            } while (true);
            int alt585=2;
            int LA585_0 = input.LA(1);
            if ( ((LA585_0>=Intersection && LA585_0<=Implements)||(LA585_0>=Promisify && LA585_0<=Abstract)||LA585_0==External||(LA585_0>=Private && LA585_0<=Project)||LA585_0==Public||LA585_0==Static||LA585_0==Target||(LA585_0>=Async && LA585_0<=Await)||LA585_0==Union||LA585_0==This||LA585_0==From||LA585_0==Type||LA585_0==FullStopFullStopFullStop||(LA585_0>=Get && LA585_0<=Let)||(LA585_0>=Out && LA585_0<=Set)||LA585_0==As||LA585_0==Of||(LA585_0>=CommercialAt && LA585_0<=LeftSquareBracket)||LA585_0==LeftCurlyBracket||LA585_0==RULE_IDENTIFIER) ) {
                alt585=1;
            }
            switch (alt585) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_93);
                    lv_elements_3_0=norm1_BindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop582:
                    do {
                        int alt582=2;
                        alt582 = dfa582.predict(input);
                        switch (alt582) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop581:
                    	    do {
                    	        int alt581=2;
                    	        int LA581_0 = input.LA(1);
                    	        if ( (LA581_0==Comma) ) {
                    	            alt581=1;
                    	        }
                    	        switch (alt581) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_166);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop581;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_elements_6_0=norm1_BindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop582;
                        }
                    } while (true);
                    int alt584=2;
                    int LA584_0 = input.LA(1);
                    if ( (LA584_0==Comma) ) {
                        alt584=1;
                    }
                    switch (alt584) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop583:
                            do {
                                int alt583=2;
                                int LA583_0 = input.LA(1);
                                if ( (LA583_0==Comma) ) {
                                    alt583=1;
                                }
                                switch (alt583) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_93);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop583;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingProperty() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingProperty = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPropertyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingProperty=ruleBindingProperty();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingProperty; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt586=2;
            alt586 = dfa586.predict(input);
            switch (alt586) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_declaredName_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleBindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=ruleSingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt587=2;
            alt587 = dfa587.predict(input);
            switch (alt587) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_declaredName_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=norm1_BindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=norm1_SingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSingleNameBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleNameBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleNameBinding=ruleSingleNameBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleNameBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm1_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm3_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm5_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm7_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingElement=ruleBindingElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingRestElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingRestElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingRestElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingRestElement=ruleBindingRestElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingRestElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt588=2;
            int LA588_0 = input.LA(1);
            if ( (LA588_0==FullStopFullStopFullStop) ) {
                alt588=1;
            }
            switch (alt588) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", lv_rest_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt589=2;
            int LA589_0 = input.LA(1);
            if ( (LA589_0==FullStopFullStopFullStop) ) {
                alt589=1;
            }
            switch (alt589) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", lv_rest_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt591=2;
            int LA591_0 = input.LA(1);
            if ( (LA591_0==LeftCurlyBracket) && (synpred348_InternalN4JSParser())) {
                alt591=1;
            }
            else if ( (LA591_0==LeftSquareBracket) && (synpred348_InternalN4JSParser())) {
                alt591=1;
            }
            else if ( ((LA591_0>=Intersection && LA591_0<=Implements)||(LA591_0>=Promisify && LA591_0<=Abstract)||LA591_0==External||(LA591_0>=Private && LA591_0<=Project)||LA591_0==Public||LA591_0==Static||LA591_0==Target||(LA591_0>=Async && LA591_0<=Await)||LA591_0==Union||(LA591_0>=Yield && LA591_0<=This)||LA591_0==From||LA591_0==Type||(LA591_0>=Get && LA591_0<=Let)||(LA591_0>=Out && LA591_0<=Set)||LA591_0==As||LA591_0==Of||LA591_0==CommercialAt||LA591_0==RULE_IDENTIFIER) ) {
                alt591=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 591, 0, input);
                throw nvae;
            }
            switch (alt591) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_nestedPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt590=2;
                    int LA590_0 = input.LA(1);
                    if ( (LA590_0==EqualsSign) ) {
                        alt590=1;
                    }
                    switch (alt590) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt593=2;
            int LA593_0 = input.LA(1);
            if ( (LA593_0==LeftCurlyBracket) && (synpred349_InternalN4JSParser())) {
                alt593=1;
            }
            else if ( (LA593_0==LeftSquareBracket) && (synpred349_InternalN4JSParser())) {
                alt593=1;
            }
            else if ( ((LA593_0>=Intersection && LA593_0<=Implements)||(LA593_0>=Promisify && LA593_0<=Abstract)||LA593_0==External||(LA593_0>=Private && LA593_0<=Project)||LA593_0==Public||LA593_0==Static||LA593_0==Target||(LA593_0>=Async && LA593_0<=Await)||LA593_0==Union||LA593_0==This||LA593_0==From||LA593_0==Type||(LA593_0>=Get && LA593_0<=Let)||(LA593_0>=Out && LA593_0<=Set)||LA593_0==As||LA593_0==Of||LA593_0==CommercialAt||LA593_0==RULE_IDENTIFIER) ) {
                alt593=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 593, 0, input);
                throw nvae;
            }
            switch (alt593) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_nestedPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt592=2;
                    int LA592_0 = input.LA(1);
                    if ( (LA592_0==EqualsSign) ) {
                        alt592=1;
                    }
                    switch (alt592) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleElision() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleElision = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElisionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElision=ruleElision();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElision; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleElision() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getElisionAccess().getBindingElementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralOrComputedPropertyName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralOrComputedPropertyName=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralOrComputedPropertyName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt594=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt594=1;
                }
                break;
            case RULE_STRING:
                {
                alt594=2;
                }
                break;
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt594=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt594=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 594, 0, input);
                throw nvae;
            }
            switch (alt594) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.TypeExpressions.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_116);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt595=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt595=1;
                }
                break;
            case RULE_STRING:
                {
                alt595=2;
                }
                break;
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt595=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt595=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 595, 0, input);
                throw nvae;
            }
            switch (alt595) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.TypeExpressions.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_116);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElement=ruleJSXElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_jsxElementName_1_0 = null;
        EObject lv_jsxAttributes_2_0 = null;
        EObject lv_jsxChildren_4_0 = null;
        EObject lv_jsxClosingName_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxElementNameJSXElementNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_167);
            lv_jsxElementName_1_0=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXElementRule());
              					}
              					set(
              						current,
              						"jsxElementName",
              						lv_jsxElementName_1_0,
              						"org.eclipse.n4js.N4JS.JSXElementName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop596:
            do {
                int alt596=2;
                int LA596_0 = input.LA(1);
                if ( ((LA596_0>=Intersection && LA596_0<=With)||(LA596_0>=For && LA596_0<=Var)||(LA596_0>=As && LA596_0<=Of)||LA596_0==LeftCurlyBracket||LA596_0==RULE_IDENTIFIER) ) {
                    alt596=1;
                }
                switch (alt596) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxAttributesJSXAttributeParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_167);
            	    lv_jsxAttributes_2_0=ruleJSXAttribute();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXElementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxAttributes",
            	      						lv_jsxAttributes_2_0,
            	      						"org.eclipse.n4js.N4JS.JSXAttribute");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop596;
                }
            } while (true);
            int alt598=2;
            int LA598_0 = input.LA(1);
            if ( (LA598_0==GreaterThanSign) ) {
                alt598=1;
            }
            else if ( (LA598_0==Solidus) ) {
                alt598=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);
                throw nvae;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    otherlv_3=(Token)match(input,GreaterThanSign,FOLLOW_168); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                    }
                    loop597:
                    do {
                        int alt597=2;
                        int LA597_0 = input.LA(1);
                        if ( (LA597_0==LessThanSign) ) {
                            int LA597_1 = input.LA(2);
                            if ( ((LA597_1>=Intersection && LA597_1<=Implements)||(LA597_1>=Promisify && LA597_1<=Abstract)||LA597_1==External||(LA597_1>=Private && LA597_1<=Project)||LA597_1==Public||LA597_1==Static||LA597_1==Target||(LA597_1>=Async && LA597_1<=Await)||LA597_1==Union||(LA597_1>=Yield && LA597_1<=This)||LA597_1==From||LA597_1==Type||(LA597_1>=Get && LA597_1<=Let)||(LA597_1>=Out && LA597_1<=Set)||LA597_1==As||LA597_1==Of||LA597_1==GreaterThanSign||LA597_1==RULE_IDENTIFIER) ) {
                                alt597=1;
                            }
                        }
                        else if ( (LA597_0==LeftCurlyBracket) ) {
                            alt597=1;
                        }
                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxChildrenJSXChildParserRuleCall_3_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_168);
                    	    lv_jsxChildren_4_0=ruleJSXChild();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"jsxChildren",
                    	      								lv_jsxChildren_4_0,
                    	      								"org.eclipse.n4js.N4JS.JSXChild");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop597;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_169); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                    }
                    otherlv_6=(Token)match(input,Solidus,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_6, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxClosingNameJSXElementNameParserRuleCall_3_0_4_0());
                    }
                    pushFollow(FOLLOW_122);
                    lv_jsxClosingName_7_0=ruleJSXElementName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                      							}
                      							set(
                      								current,
                      								"jsxClosingName",
                      								lv_jsxClosingName_7_0,
                      								"org.eclipse.n4js.N4JS.JSXElementName");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_8=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_8, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_9=(Token)match(input,Solidus,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_9, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                    }
                    otherlv_10=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXFragment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXFragment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXFragment=ruleJSXFragment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXFragment() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jsxChildren_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getJSXFragmentAccess().getJSXFragmentAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LessThanSign,FOLLOW_122); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
            }
            otherlv_2=(Token)match(input,GreaterThanSign,FOLLOW_168); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
            }
            loop599:
            do {
                int alt599=2;
                int LA599_0 = input.LA(1);
                if ( (LA599_0==LessThanSign) ) {
                    int LA599_1 = input.LA(2);
                    if ( ((LA599_1>=Intersection && LA599_1<=Implements)||(LA599_1>=Promisify && LA599_1<=Abstract)||LA599_1==External||(LA599_1>=Private && LA599_1<=Project)||LA599_1==Public||LA599_1==Static||LA599_1==Target||(LA599_1>=Async && LA599_1<=Await)||LA599_1==Union||(LA599_1>=Yield && LA599_1<=This)||LA599_1==From||LA599_1==Type||(LA599_1>=Get && LA599_1<=Let)||(LA599_1>=Out && LA599_1<=Set)||LA599_1==As||LA599_1==Of||LA599_1==GreaterThanSign||LA599_1==RULE_IDENTIFIER) ) {
                        alt599=1;
                    }
                }
                else if ( (LA599_0==LeftCurlyBracket) ) {
                    alt599=1;
                }
                switch (alt599) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXFragmentAccess().getJsxChildrenJSXChildParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_168);
            	    lv_jsxChildren_3_0=ruleJSXChild();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXFragmentRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxChildren",
            	      						lv_jsxChildren_3_0,
            	      						"org.eclipse.n4js.N4JS.JSXChild");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop599;
                }
            } while (true);
            otherlv_4=(Token)match(input,LessThanSign,FOLLOW_169); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
            }
            otherlv_5=(Token)match(input,Solidus,FOLLOW_122); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
            }
            otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXChild = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXChildRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXChild=ruleJSXChild();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXChild; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject this_JSXElement_0 = null;
        EObject this_JSXFragment_1 = null;
        EObject this_JSXExpression_2 = null;
        	enterRule();
        try {
            {
            int alt600=3;
            int LA600_0 = input.LA(1);
            if ( (LA600_0==LessThanSign) ) {
                int LA600_1 = input.LA(2);
                if ( (LA600_1==GreaterThanSign) ) {
                    alt600=2;
                }
                else if ( ((LA600_1>=Intersection && LA600_1<=Implements)||(LA600_1>=Promisify && LA600_1<=Abstract)||LA600_1==External||(LA600_1>=Private && LA600_1<=Project)||LA600_1==Public||LA600_1==Static||LA600_1==Target||(LA600_1>=Async && LA600_1<=Await)||LA600_1==Union||(LA600_1>=Yield && LA600_1<=This)||LA600_1==From||LA600_1==Type||(LA600_1>=Get && LA600_1<=Let)||(LA600_1>=Out && LA600_1<=Set)||LA600_1==As||LA600_1==Of||LA600_1==RULE_IDENTIFIER) ) {
                    alt600=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 600, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA600_0==LeftCurlyBracket) ) {
                alt600=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 600, 0, input);
                throw nvae;
            }
            switch (alt600) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_0=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_1=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXExpression_2=ruleJSXExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXExpression_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXExpression=ruleJSXExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_29);
            lv_expression_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementName=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getJSXElementNameAccess().getExpressionJSXElementNameExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getJSXElementNameRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.JSXElementNameExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementNameExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementNameExpression=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementNameExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_2 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_170);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            loop601:
            do {
                int alt601=2;
                int LA601_0 = input.LA(1);
                if ( (LA601_0==QuestionMarkFullStop||LA601_0==FullStop) ) {
                    alt601=1;
                }
                switch (alt601) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_0(),
            	      						current);
            	    }
            	    }
            	    if ( state.backtracking==0 ) {
            	      				if (current==null) {
            	      					current = createModelElement(grammarAccess.getJSXElementNameExpressionRule());
            	      				}
            	      				newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1());
            	    }
            	    pushFollow(FOLLOW_170);
            	    this_ParameterizedPropertyAccessExpressionTail_2=ruleParameterizedPropertyAccessExpressionTail(current);
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				current = this_ParameterizedPropertyAccessExpressionTail_2;
            	      				afterParserOrEnumRuleCall();
            	    }
            	    }
            	    break;
            	default :
            	    break loop601;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXAttribute=ruleJSXAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject this_JSXSpreadAttribute_0 = null;
        EObject this_JSXPropertyAttribute_1 = null;
        	enterRule();
        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);
            if ( (LA602_0==LeftCurlyBracket) ) {
                alt602=1;
            }
            else if ( ((LA602_0>=Intersection && LA602_0<=With)||(LA602_0>=For && LA602_0<=Var)||(LA602_0>=As && LA602_0<=Of)||LA602_0==RULE_IDENTIFIER) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);
                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXSpreadAttribute_0=ruleJSXSpreadAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXSpreadAttribute_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXPropertyAttribute_1=ruleJSXPropertyAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXPropertyAttribute_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXSpreadAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXSpreadAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXSpreadAttribute=ruleJSXSpreadAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXSpreadAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_171); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
            }
            otherlv_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_29);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXSpreadAttributeRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleJSXIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleJSXIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXIdentifier=ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleJSXIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_BINARY_INT_5=null;
        Token this_OCTAL_INT_6=null;
        Token this_SCIENTIFIC_INT_7=null;
        Token this_LEGACY_OCTAL_INT_8=null;
        AntlrDatatypeRuleToken this_IdentifierName_0 = null;
        AntlrDatatypeRuleToken this_IdentifierName_9 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_0());
            }
            pushFollow(FOLLOW_172);
            this_IdentifierName_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(this_IdentifierName_0);
            }
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            loop606:
            do {
                int alt606=2;
                int LA606_0 = input.LA(1);
                if ( (LA606_0==HyphenMinusHyphenMinus||LA606_0==HyphenMinus) ) {
                    alt606=1;
                }
                switch (alt606) {
            	case 1 :
            	    {
            	    int alt603=2;
            	    int LA603_0 = input.LA(1);
            	    if ( (LA603_0==HyphenMinus) ) {
            	        alt603=1;
            	    }
            	    else if ( (LA603_0==HyphenMinusHyphenMinus) ) {
            	        alt603=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 603, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt603) {
            	        case 1 :
            	            {
            	            kw=(Token)match(input,HyphenMinus,FOLLOW_173); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            kw=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_173); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	            }
            	            }
            	            break;
            	    }
            	    int alt605=2;
            	    alt605 = dfa605.predict(input);
            	    switch (alt605) {
            	        case 1 :
            	            {
            	            int alt604=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt604=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt604=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt604=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt604=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt604=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt604=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Namespace:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt604=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 604, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt604) {
            	                case 1 :
            	                    {
            	                    this_INT_3=(Token)match(input,RULE_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_INT_3);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_INT_3, grammarAccess.getJSXIdentifierAccess().getINTTerminalRuleCall_1_1_0_0());
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_HEX_INT_4);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_HEX_INT_4, grammarAccess.getJSXIdentifierAccess().getHEX_INTTerminalRuleCall_1_1_0_1());
            	                    }
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    this_BINARY_INT_5=(Token)match(input,RULE_BINARY_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_BINARY_INT_5);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_BINARY_INT_5, grammarAccess.getJSXIdentifierAccess().getBINARY_INTTerminalRuleCall_1_1_0_2());
            	                    }
            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    this_OCTAL_INT_6=(Token)match(input,RULE_OCTAL_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_OCTAL_INT_6);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_OCTAL_INT_6, grammarAccess.getJSXIdentifierAccess().getOCTAL_INTTerminalRuleCall_1_1_0_3());
            	                    }
            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    this_SCIENTIFIC_INT_7=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_SCIENTIFIC_INT_7);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_SCIENTIFIC_INT_7, grammarAccess.getJSXIdentifierAccess().getSCIENTIFIC_INTTerminalRuleCall_1_1_0_4());
            	                    }
            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    this_LEGACY_OCTAL_INT_8=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_172); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_LEGACY_OCTAL_INT_8);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_LEGACY_OCTAL_INT_8, grammarAccess.getJSXIdentifierAccess().getLEGACY_OCTAL_INTTerminalRuleCall_1_1_0_5());
            	                    }
            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    if ( state.backtracking==0 ) {
            	                      						newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_1_1_0_6());
            	                    }
            	                    pushFollow(FOLLOW_172);
            	                    this_IdentifierName_9=ruleIdentifierName();
            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_IdentifierName_9);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						afterParserOrEnumRuleCall();
            	                    }
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop606;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXPropertyAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXPropertyAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXPropertyAttribute=ruleJSXPropertyAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXPropertyAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_jsxAttributeValue_2_0 = null;
        EObject lv_jsxAttributeValue_3_0 = null;
        EObject lv_jsxAttributeValue_4_0 = null;
        EObject lv_jsxAttributeValue_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getJSXPropertyAttributeRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getPropertyIdentifiableElementCrossReference_0_0());
            }
            pushFollow(FOLLOW_64);
            ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt608=2;
            int LA608_0 = input.LA(1);
            if ( (LA608_0==EqualsSign) ) {
                alt608=1;
            }
            switch (alt608) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_174); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                    }
                    int alt607=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt607=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA607_2 = input.LA(2);
                        if ( ((LA607_2>=Intersection && LA607_2<=Implements)||(LA607_2>=Promisify && LA607_2<=Abstract)||LA607_2==External||(LA607_2>=Private && LA607_2<=Project)||LA607_2==Public||LA607_2==Static||LA607_2==Target||(LA607_2>=Async && LA607_2<=Await)||LA607_2==Union||(LA607_2>=Yield && LA607_2<=This)||LA607_2==From||LA607_2==Type||(LA607_2>=Get && LA607_2<=Let)||(LA607_2>=Out && LA607_2<=Set)||LA607_2==As||LA607_2==Of||LA607_2==RULE_IDENTIFIER) ) {
                            alt607=2;
                        }
                        else if ( (LA607_2==GreaterThanSign) ) {
                            alt607=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 607, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt607=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 607, 0, input);
                        throw nvae;
                    }
                    switch (alt607) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueStringLiteralParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_2_0=ruleStringLiteral();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_2_0,
                              								"org.eclipse.n4js.N4JS.StringLiteral");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXElementParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_3_0=ruleJSXElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_3_0,
                              								"org.eclipse.n4js.N4JS.JSXElement");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_4_0=ruleJSXFragment();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_4_0,
                              								"org.eclipse.n4js.N4JS.JSXFragment");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 4 :
                            {
                            {
                            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0());
                            }
                            pushFollow(FOLLOW_29);
                            lv_jsxAttributeValue_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              								}
                              								set(
                              									current,
                              									"jsxAttributeValue",
                              									lv_jsxAttributeValue_6_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_7, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_IntersectionTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_IntersectionTypeExpression_0=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IntersectionTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt610=2;
            int LA610_0 = input.LA(1);
            if ( (LA610_0==VerticalLine) ) {
                alt610=1;
            }
            switch (alt610) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTypeRefAccess().getUnionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt609=0;
                    loop609:
                    do {
                        int alt609=2;
                        int LA609_0 = input.LA(1);
                        if ( (LA609_0==VerticalLine) ) {
                            alt609=1;
                        }
                        switch (alt609) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_129);
                    	    lv_typeRefs_3_0=ruleIntersectionTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTypeRefRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.TypeExpressions.IntersectionTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt609 >= 1 ) break loop609;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(609, input);
                                throw eee;
                        }
                        cnt609++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ArrayTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_ArrayTypeExpression_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArrayTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt612=2;
            int LA612_0 = input.LA(1);
            if ( (LA612_0==Ampersand) ) {
                alt612=1;
            }
            switch (alt612) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt611=0;
                    loop611:
                    do {
                        int alt611=2;
                        int LA611_0 = input.LA(1);
                        if ( (LA611_0==Ampersand) ) {
                            alt611=1;
                        }
                        switch (alt611) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_127);
                    	    lv_typeRefs_3_0=ruleArrayTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.TypeExpressions.ArrayTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt611 >= 1 ) break loop611;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(611, input);
                                throw eee;
                        }
                        cnt611++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpression=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_arrayTypeExpression_2_0=null;
        Token otherlv_3=null;
        Token lv_arrayTypeExpression_5_0=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_arrayTypeExpression_11_0=null;
        Token otherlv_12=null;
        Token lv_arrayTypeExpression_14_0=null;
        Token otherlv_15=null;
        Token lv_arrayTypeExpression_18_0=null;
        Token otherlv_19=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_9_0 = null;
        EObject this_PrimaryTypeExpression_16 = null;
        	enterRule();
        try {
            {
            int alt616=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt616=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case QuestionMark:
                    {
                    int LA616_4 = input.LA(3);
                    if ( (LA616_4==LeftSquareBracket) ) {
                        alt616=3;
                    }
                    else if ( (LA616_4==Extends||LA616_4==Super||LA616_4==RightParenthesis) ) {
                        alt616=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 616, 4, input);
                        throw nvae;
                    }
                    }
                    break;
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Namespace:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case False:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case True:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case PlusSign:
                case HyphenMinus:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                case RULE_INT:
                case RULE_DOUBLE:
                case RULE_BINARY_INT:
                case RULE_OCTAL_INT:
                case RULE_LEGACY_OCTAL_INT:
                case RULE_HEX_INT:
                case RULE_SCIENTIFIC_INT:
                case RULE_STRING:
                    {
                    alt616=3;
                    }
                    break;
                case Out:
                    {
                    int LA616_5 = input.LA(3);
                    if ( (LA616_5==Colon) ) {
                        alt616=3;
                    }
                    else if ( ((LA616_5>=Intersection && LA616_5<=Constructor)||LA616_5==Promisify||LA616_5==Default||LA616_5==Target||LA616_5==Await||LA616_5==False||LA616_5==Union||LA616_5==This||(LA616_5>=This_1 && LA616_5<=Void)||LA616_5==LeftParenthesis||LA616_5==PlusSign||LA616_5==HyphenMinus||LA616_5==QuestionMark||LA616_5==LeftSquareBracket||LA616_5==LeftCurlyBracket||LA616_5==Tilde||LA616_5==RULE_IDENTIFIER||LA616_5==RULE_INT||LA616_5==RULE_DOUBLE||(LA616_5>=RULE_BINARY_INT && LA616_5<=RULE_SCIENTIFIC_INT)||LA616_5==RULE_STRING) ) {
                        alt616=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 616, 5, input);
                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt616=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 616, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case False:
            case Union:
            case This:
            case This_1:
            case True:
            case Type:
            case Void:
            case PlusSign:
            case HyphenMinus:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_STRING:
                {
                alt616=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 616, 0, input);
                throw nvae;
            }
            switch (alt616) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_0_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getDeclaredTypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_115);
                    lv_declaredTypeArgs_1_0=ruleWildcardOldNotationWithoutBound();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_1_0,
                      							"org.eclipse.n4js.TypeExpressions.WildcardOldNotationWithoutBound");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_arrayTypeExpression_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_2_0 != null, "[");
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_175); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                    }
                    loop613:
                    do {
                        int alt613=2;
                        int LA613_0 = input.LA(1);
                        if ( (LA613_0==LeftSquareBracket) ) {
                            int LA613_2 = input.LA(2);
                            if ( (LA613_2==RightSquareBracket) ) {
                                int LA613_3 = input.LA(3);
                                if ( (synpred351_InternalN4JSParser()) ) {
                                    alt613=1;
                                }
                            }
                        }
                        switch (alt613) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_0_4_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_5_0=(Token)match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_5_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_5_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_175); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_6, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop613;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_176); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getDeclaredTypeArgsWildcardParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_declaredTypeArgs_9_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_9_0,
                      							"org.eclipse.n4js.TypeExpressions.Wildcard");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_115); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_10, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                    }
                    {
                    {
                    lv_arrayTypeExpression_11_0=(Token)match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_11_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_11_0 != null, "[");
                    }
                    }
                    }
                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_175); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                    }
                    loop614:
                    do {
                        int alt614=2;
                        int LA614_0 = input.LA(1);
                        if ( (LA614_0==LeftSquareBracket) ) {
                            int LA614_2 = input.LA(2);
                            if ( (LA614_2==RightSquareBracket) ) {
                                int LA614_3 = input.LA(3);
                                if ( (synpred352_InternalN4JSParser()) ) {
                                    alt614=1;
                                }
                            }
                        }
                        switch (alt614) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_1_6_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_14_0=(Token)match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_14_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_14_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_175); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_15, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop614;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_175);
                    this_PrimaryTypeExpression_16=rulePrimaryTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryTypeExpression_16;
                      				afterParserOrEnumRuleCall();
                    }
                    loop615:
                    do {
                        int alt615=2;
                        int LA615_0 = input.LA(1);
                        if ( (LA615_0==LeftSquareBracket) ) {
                            int LA615_2 = input.LA(2);
                            if ( (LA615_2==RightSquareBracket) ) {
                                int LA615_3 = input.LA(3);
                                if ( (synpred353_InternalN4JSParser()) ) {
                                    alt615=1;
                                }
                            }
                        }
                        switch (alt615) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_18_0=(Token)match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_18_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_18_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_19=(Token)match(input,RightSquareBracket,FOLLOW_175); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_19, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop615;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject this_LiteralTypeRef_0 = null;
        EObject this_ArrowFunctionTypeExpression_1 = null;
        EObject this_ArrayNTypeExpression_2 = null;
        EObject this_TypeRefWithModifiers_3 = null;
        EObject this_TypeRef_5 = null;
        	enterRule();
        try {
            {
            int alt617=5;
            alt617 = dfa617.predict(input);
            switch (alt617) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getLiteralTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralTypeRef_0=ruleLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_1=ruleArrowFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowFunctionTypeExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_2=ruleArrayNTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayNTypeExpression_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_3=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefWithModifiers_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_4_1());
                    }
                    pushFollow(FOLLOW_70);
                    this_TypeRef_5=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_4_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
            }
            int alt618=2;
            alt618 = dfa618.predict(input);
            switch (alt618) {
                case 1 :
                    {
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", lv_followedByQuestionMark_1_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithoutModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_ThisTypeRef_1 = null;
        EObject this_TypeTypeRef_3 = null;
        EObject this_FunctionTypeExpressionOLD_4 = null;
        EObject this_UnionTypeExpressionOLD_5 = null;
        EObject this_IntersectionTypeExpressionOLD_6 = null;
        	enterRule();
        try {
            {
            int alt621=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt621=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt621=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt621=3;
                }
                break;
            case Union:
                {
                alt621=4;
                }
                break;
            case Intersection:
                {
                alt621=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 621, 0, input);
                throw nvae;
            }
            switch (alt621) {
                case 1 :
                    {
                    {
                    int alt619=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt619=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA619_4 = input.LA(3);
                            if ( (LA619_4==This_1) ) {
                                alt619=2;
                            }
                            else if ( (LA619_4==Promisify||LA619_4==Default||LA619_4==Target||LA619_4==Await||LA619_4==This||LA619_4==Void||LA619_4==RULE_IDENTIFIER) ) {
                                alt619=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 619, 4, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA619_5 = input.LA(3);
                            if ( (LA619_5==This_1) ) {
                                alt619=2;
                            }
                            else if ( (LA619_5==Promisify||LA619_5==Default||LA619_5==Target||LA619_5==Await||LA619_5==This||LA619_5==Void||LA619_5==RULE_IDENTIFIER) ) {
                                alt619=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 619, 5, input);
                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt619=1;
                            }
                            break;
                        case This_1:
                            {
                            alt619=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 619, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case This_1:
                        {
                        alt619=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 619, 0, input);
                        throw nvae;
                    }
                    switch (alt619) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                            }
                            pushFollow(FOLLOW_39);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                        case 2 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                            }
                            pushFollow(FOLLOW_39);
                            this_ThisTypeRef_1=ruleThisTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt620=2;
                    alt620 = dfa620.predict(input);
                    switch (alt620) {
                        case 1 :
                            {
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", lv_dynamic_2_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_ArrayNTypeExpression_1 = null;
        EObject this_TypeTypeRef_2 = null;
        EObject this_UnionTypeExpressionOLD_3 = null;
        EObject this_IntersectionTypeExpressionOLD_4 = null;
        	enterRule();
        try {
            {
            int alt622=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt622=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt622=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt622=3;
                }
                break;
            case Union:
                {
                alt622=4;
                }
                break;
            case Intersection:
                {
                alt622=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 622, 0, input);
                throw nvae;
            }
            switch (alt622) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_1=ruleArrayNTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayNTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgInTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ThisTypeRefNominal_1 = null;
        EObject this_WildcardOldNotation_2 = null;
        	enterRule();
        try {
            {
            int alt623=3;
            int LA623_0 = input.LA(1);
            if ( (LA623_0==Promisify||LA623_0==Default||LA623_0==Target||LA623_0==Await||LA623_0==This||LA623_0==Void||LA623_0==RULE_IDENTIFIER) ) {
                alt623=1;
            }
            else if ( (LA623_0==This_1) ) {
                alt623=2;
            }
            else if ( (LA623_0==QuestionMark) && (synpred357_InternalN4JSParser())) {
                alt623=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 623, 0, input);
                throw nvae;
            }
            switch (alt623) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_2=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralTypeRef=ruleLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_BooleanLiteralTypeRef_0 = null;
        EObject this_NumericLiteralTypeRef_1 = null;
        EObject this_StringLiteralTypeRef_2 = null;
        	enterRule();
        try {
            {
            int alt624=3;
            switch ( input.LA(1) ) {
            case False:
            case True:
                {
                alt624=1;
                }
                break;
            case PlusSign:
            case HyphenMinus:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt624=2;
                }
                break;
            case RULE_STRING:
                {
                alt624=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 624, 0, input);
                throw nvae;
            }
            switch (alt624) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getBooleanLiteralTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteralTypeRef_0=ruleBooleanLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BooleanLiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getNumericLiteralTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteralTypeRef_1=ruleNumericLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NumericLiteralTypeRef_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getStringLiteralTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteralTypeRef_2=ruleStringLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_StringLiteralTypeRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBooleanLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteralTypeRef=ruleBooleanLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token lv_astValue_1_1=null;
        Token lv_astValue_1_2=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralTypeRefAccess().getBooleanLiteralTypeRefAction_0(),
              					current);
            }
            }
            {
            {
            int alt625=2;
            int LA625_0 = input.LA(1);
            if ( (LA625_0==True) ) {
                alt625=1;
            }
            else if ( (LA625_0==False) ) {
                alt625=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 625, 0, input);
                throw nvae;
            }
            switch (alt625) {
                case 1 :
                    {
                    lv_astValue_1_1=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_1_1, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueTrueKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_1, null);
                    }
                    }
                    break;
                case 2 :
                    {
                    lv_astValue_1_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_1_2, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueFalseKeyword_1_0_1());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_2, null);
                    }
                    }
                    break;
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNumericLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralTypeRef=ruleNumericLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token lv_astNegated_1_0=null;
        Token lv_astValue_2_0=null;
        Token lv_astValue_3_0=null;
        Token lv_astValue_4_0=null;
        Token lv_astValue_5_0=null;
        Token lv_astValue_6_0=null;
        Token lv_astValue_7_0=null;
        Token lv_astValue_8_0=null;
        	enterRule();
        try {
            {
            {
            int alt626=3;
            int LA626_0 = input.LA(1);
            if ( (LA626_0==PlusSign) ) {
                alt626=1;
            }
            else if ( (LA626_0==HyphenMinus) ) {
                alt626=2;
            }
            switch (alt626) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,PlusSign,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getNumericLiteralTypeRefAccess().getPlusSignKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_astNegated_1_0=(Token)match(input,HyphenMinus,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astNegated_1_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstNegatedHyphenMinusKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astNegated", lv_astNegated_1_0 != null, "-");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt627=7;
            switch ( input.LA(1) ) {
            case RULE_INT:
                {
                alt627=1;
                }
                break;
            case RULE_DOUBLE:
                {
                alt627=2;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt627=3;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt627=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt627=5;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt627=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt627=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 627, 0, input);
                throw nvae;
            }
            switch (alt627) {
                case 1 :
                    {
                    {
                    {
                    lv_astValue_2_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_2_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueINTTerminalRuleCall_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_2_0,
                      							"org.eclipse.n4js.TypeExpressions.INT");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_astValue_3_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_3_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueDOUBLETerminalRuleCall_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_3_0,
                      							"org.eclipse.n4js.TypeExpressions.DOUBLE");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    lv_astValue_4_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_4_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueOCTAL_INTTerminalRuleCall_1_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_4_0,
                      							"org.eclipse.n4js.TypeExpressions.OCTAL_INT");
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    lv_astValue_5_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_5_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueLEGACY_OCTAL_INTTerminalRuleCall_1_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_5_0,
                      							"org.eclipse.n4js.TypeExpressions.LEGACY_OCTAL_INT");
                    }
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    lv_astValue_6_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_6_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueHEX_INTTerminalRuleCall_1_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_6_0,
                      							"org.eclipse.n4js.TypeExpressions.HEX_INT");
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    lv_astValue_7_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_7_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueBINARY_INTTerminalRuleCall_1_5_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_7_0,
                      							"org.eclipse.n4js.TypeExpressions.BINARY_INT");
                    }
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    {
                    lv_astValue_8_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_8_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueSCIENTIFIC_INTTerminalRuleCall_1_6_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_8_0,
                      							"org.eclipse.n4js.TypeExpressions.SCIENTIFIC_INT");
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStringLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteralTypeRef=ruleStringLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token lv_astValue_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_astValue_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_astValue_0_0, grammarAccess.getStringLiteralTypeRefAccess().getAstValueSTRINGTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralTypeRefRule());
              				}
              				setWithLastConsumed(
              					current,
              					"astValue",
              					lv_astValue_0_0,
              					"org.eclipse.n4js.TypeExpressions.STRING");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ThisTypeRefNominal_0 = null;
        EObject this_ThisTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt628=2;
            int LA628_0 = input.LA(1);
            if ( (LA628_0==This_1) ) {
                alt628=1;
            }
            else if ( (LA628_0==Tilde) ) {
                alt628=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 628, 0, input);
                throw nvae;
            }
            switch (alt628) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TStructMemberList_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_178);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_179); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
            }
            int alt629=2;
            int LA629_0 = input.LA(1);
            if ( (LA629_0==With) ) {
                int LA629_1 = input.LA(2);
                if ( (LA629_1==LeftCurlyBracket) ) {
                    alt629=1;
                }
            }
            switch (alt629) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;
        EObject lv_ownedTypeVars_9_0 = null;
        EObject lv_ownedTypeVars_11_0 = null;
        EObject this_TAnonymousFormalParameterList_14 = null;
        EObject this_ColonSepReturnTypeRef_16 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_180); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt630=2;
            int LA630_0 = input.LA(1);
            if ( (LA630_0==CommercialAt) ) {
                alt630=1;
            }
            switch (alt630) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_181); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_182); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,Function,FOLLOW_183); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
            }
            int alt632=2;
            int LA632_0 = input.LA(1);
            if ( (LA632_0==LessThanSign) ) {
                alt632=1;
            }
            switch (alt632) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_184); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_105);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop631:
                    do {
                        int alt631=2;
                        int LA631_0 = input.LA(1);
                        if ( (LA631_0==Comma) ) {
                            alt631=1;
                        }
                        switch (alt631) {
                    	case 1 :
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_184); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_105);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop631;
                        }
                    } while (true);
                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                    }
                    }
                    break;
            }
            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_185); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
            }
            pushFollow(FOLLOW_70);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_186); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
            }
            int alt633=2;
            int LA633_0 = input.LA(1);
            if ( (LA633_0==Colon) ) {
                alt633=1;
            }
            switch (alt633) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_29);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_TAnonymousFormalParameterList_2 = null;
        EObject lv_returnTypeRef_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_185); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_70);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getArrowParserRuleCall_0_0_4());
            }
            pushFollow(FOLLOW_21);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;
        EObject lv_fpars_2_0 = null;
        	enterRule();
        try {
            {
            int alt635=2;
            int LA635_0 = input.LA(1);
            if ( ((LA635_0>=Intersection && LA635_0<=Implements)||(LA635_0>=Promisify && LA635_0<=Abstract)||LA635_0==External||LA635_0==Default||(LA635_0>=Private && LA635_0<=Project)||LA635_0==Public||LA635_0==Static||LA635_0==Target||(LA635_0>=Async && LA635_0<=Await)||LA635_0==False||LA635_0==Union||(LA635_0>=Yield && LA635_0<=This)||LA635_0==From||(LA635_0>=This_1 && LA635_0<=Void)||LA635_0==FullStopFullStopFullStop||(LA635_0>=Get && LA635_0<=Let)||(LA635_0>=Out && LA635_0<=Set)||LA635_0==As||LA635_0==Of||LA635_0==LeftParenthesis||LA635_0==PlusSign||LA635_0==HyphenMinus||LA635_0==QuestionMark||LA635_0==LeftSquareBracket||LA635_0==LeftCurlyBracket||LA635_0==Tilde||LA635_0==RULE_IDENTIFIER||LA635_0==RULE_INT||LA635_0==RULE_DOUBLE||(LA635_0>=RULE_BINARY_INT && LA635_0<=RULE_SCIENTIFIC_INT)||LA635_0==RULE_STRING) ) {
                alt635=1;
            }
            switch (alt635) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop634:
                    do {
                        int alt634=2;
                        int LA634_0 = input.LA(1);
                        if ( (LA634_0==Comma) ) {
                            alt634=1;
                        }
                        switch (alt634) {
                    	case 1 :
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_187); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop634;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTAnonymousFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        EObject lv_typeRef_3_0 = null;
        EObject this_DefaultFormalParameter_4 = null;
        	enterRule();
        try {
            {
            {
            int alt636=2;
            int LA636_0 = input.LA(1);
            if ( (LA636_0==FullStopFullStopFullStop) ) {
                alt636=1;
            }
            switch (alt636) {
                case 1 :
                    {
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_102); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", lv_variadic_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            int alt637=2;
            alt637 = dfa637.predict(input);
            switch (alt637) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                    }
                    pushFollow(FOLLOW_88);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                    }
                    pushFollow(FOLLOW_20);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_20);
                    lv_typeRef_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;
        	enterRule();
        try {
            {
            int alt639=2;
            int LA639_0 = input.LA(1);
            if ( (LA639_0==EqualsSign) ) {
                alt639=1;
            }
            switch (alt639) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_188); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_0_0 != null, "=");
                    }
                    }
                    }
                    int alt638=2;
                    int LA638_0 = input.LA(1);
                    if ( (LA638_0==Promisify||LA638_0==Default||LA638_0==Target||LA638_0==Await||LA638_0==This||LA638_0==Void||LA638_0==RULE_IDENTIFIER) ) {
                        alt638=1;
                    }
                    switch (alt638) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.TypeExpressions.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Union,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_17);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop640:
            do {
                int alt640=2;
                int LA640_0 = input.LA(1);
                if ( (LA640_0==Comma) ) {
                    alt640=1;
                }
                switch (alt640) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_17);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop640;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Intersection,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_17);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop641:
            do {
                int alt641=2;
                int LA641_0 = input.LA(1);
                if ( (LA641_0==Comma) ) {
                    alt641=1;
                }
                switch (alt641) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_17);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop641;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ParameterizedTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt642=2;
            int LA642_0 = input.LA(1);
            if ( (LA642_0==Promisify||LA642_0==Default||LA642_0==Target||LA642_0==Await||LA642_0==This||LA642_0==Void||LA642_0==RULE_IDENTIFIER) ) {
                alt642=1;
            }
            else if ( (LA642_0==Tilde) ) {
                alt642=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);
                throw nvae;
            }
            switch (alt642) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject this_TypeReference_0 = null;
        EObject this_TypeArguments_1 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0());
            }
            pushFollow(FOLLOW_189);
            this_TypeReference_0=ruleTypeReference(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeReference_0;
              			afterParserOrEnumRuleCall();
            }
            int alt643=2;
            alt643 = dfa643.predict(input);
            switch (alt643) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_1=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TypeReference_1 = null;
        EObject this_TypeArguments_2 = null;
        EObject this_TStructMemberList_4 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_151);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_1());
            }
            pushFollow(FOLLOW_190);
            this_TypeReference_1=ruleTypeReference(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeReference_1;
              			afterParserOrEnumRuleCall();
            }
            int alt644=2;
            alt644 = dfa644.predict(input);
            switch (alt644) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_179);
                    this_TypeArguments_2=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt645=2;
            int LA645_0 = input.LA(1);
            if ( (LA645_0==With) ) {
                int LA645_1 = input.LA(2);
                if ( (LA645_1==LeftCurlyBracket) ) {
                    alt645=1;
                }
            }
            switch (alt645) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,With,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_4=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayNTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayNTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayNTypeExpression=ruleArrayNTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayNTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_arrayNTypeExpression_0_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_2_0 = null;
        EObject lv_declaredTypeArgs_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            lv_arrayNTypeExpression_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_191); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_arrayNTypeExpression_0_0, grammarAccess.getArrayNTypeExpressionAccess().getArrayNTypeExpressionLeftSquareBracketKeyword_0_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrayNTypeExpressionRule());
              					}
              					setWithLastConsumed(current, "arrayNTypeExpression", lv_arrayNTypeExpression_0_0 != null, "[");
            }
            }
            }
            int alt647=2;
            int LA647_0 = input.LA(1);
            if ( (LA647_0==RightSquareBracket) ) {
                alt647=1;
            }
            else if ( ((LA647_0>=Intersection && LA647_0<=Constructor)||LA647_0==Promisify||LA647_0==Default||LA647_0==Target||LA647_0==Await||LA647_0==False||LA647_0==Union||LA647_0==This||(LA647_0>=This_1 && LA647_0<=Void)||LA647_0==Out||LA647_0==In||LA647_0==LeftParenthesis||LA647_0==PlusSign||LA647_0==HyphenMinus||LA647_0==QuestionMark||LA647_0==LeftSquareBracket||LA647_0==LeftCurlyBracket||LA647_0==Tilde||LA647_0==RULE_IDENTIFIER||LA647_0==RULE_INT||LA647_0==RULE_DOUBLE||(LA647_0>=RULE_BINARY_INT && LA647_0<=RULE_SCIENTIFIC_INT)||LA647_0==RULE_STRING) ) {
                alt647=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 647, 0, input);
                throw nvae;
            }
            switch (alt647) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeArgs_1_0=ruleEmptyIterableTypeExpressionTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_1_0,
                      							"org.eclipse.n4js.TypeExpressions.EmptyIterableTypeExpressionTail");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_93);
                    lv_declaredTypeArgs_2_0=ruleTypeArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      							}
                      							add(
                      								current,
                      								"declaredTypeArgs",
                      								lv_declaredTypeArgs_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeArgument");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop646:
                    do {
                        int alt646=2;
                        int LA646_0 = input.LA(1);
                        if ( (LA646_0==Comma) ) {
                            alt646=1;
                        }
                        switch (alt646) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_191); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_3, grammarAccess.getArrayNTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_declaredTypeArgs_4_0=ruleTypeArgument();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"declaredTypeArgs",
                    	      									lv_declaredTypeArgs_4_0,
                    	      									"org.eclipse.n4js.TypeExpressions.TypeArgument");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop646;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getArrayNTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyIterableTypeExpressionTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyIterableTypeExpressionTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyIterableTypeExpressionTail=ruleEmptyIterableTypeExpressionTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyIterableTypeExpressionTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyIterableTypeExpressionTailAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReference(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            loop648:
            do {
                int alt648=2;
                int LA648_0 = input.LA(1);
                if ( (LA648_0==RULE_IDENTIFIER) ) {
                    int LA648_2 = input.LA(2);
                    if ( (LA648_2==FullStop) ) {
                        alt648=1;
                    }
                }
                switch (alt648) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getTypeReferenceRule());
            	      						}
            	    }
            	    otherlv_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_111); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_0, grammarAccess.getTypeReferenceAccess().getAstDeclaredTypeQualifiersTypeCrossReference_0_0_0());
            	    }
            	    }
            	    }
            	    otherlv_1=(Token)match(input,FullStop,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
            	    }
            	    }
            	    break;
            	default :
            	    break loop648;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeReferenceRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeclaredTypeTypeCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_191); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_105);
            lv_declaredTypeArgs_1_0=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"declaredTypeArgs",
              						lv_declaredTypeArgs_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop649:
            do {
                int alt649=2;
                int LA649_0 = input.LA(1);
                if ( (LA649_0==Comma) ) {
                    alt649=1;
                }
                switch (alt649) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_191); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_105);
            	    lv_declaredTypeArgs_3_0=ruleTypeArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"declaredTypeArgs",
            	      							lv_declaredTypeArgs_3_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop649;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_192); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
            }
            loop651:
            do {
                int alt651=2;
                int LA651_0 = input.LA(1);
                if ( ((LA651_0>=Intersection && LA651_0<=With)||(LA651_0>=For && LA651_0<=Var)||(LA651_0>=As && LA651_0<=Of)||LA651_0==LessThanSign||LA651_0==RULE_IDENTIFIER) ) {
                    alt651=1;
                }
                switch (alt651) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	    }
            	    pushFollow(FOLLOW_193);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    int alt650=3;
            	    int LA650_0 = input.LA(1);
            	    if ( (LA650_0==Semicolon) ) {
            	        alt650=1;
            	    }
            	    else if ( (LA650_0==Comma) ) {
            	        alt650=2;
            	    }
            	    switch (alt650) {
            	        case 1 :
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_192); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_192); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop651;
                }
            } while (true);
            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMember = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject this_TStructGetter_0 = null;
        EObject this_TStructSetter_1 = null;
        EObject this_TStructMethod_2 = null;
        EObject this_TStructField_3 = null;
        	enterRule();
        try {
            {
            int alt652=4;
            alt652 = dfa652.predict(input);
            switch (alt652) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMethod = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_typeVars_2_0 = null;
        EObject lv_typeVars_4_0 = null;
        AntlrDatatypeRuleToken lv_name_6_0 = null;
        EObject this_TAnonymousFormalParameterList_8 = null;
        EObject this_ColonSepReturnTypeRef_10 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
            }
            }
            int alt654=2;
            int LA654_0 = input.LA(1);
            if ( (LA654_0==LessThanSign) ) {
                alt654=1;
            }
            switch (alt654) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,LessThanSign,FOLLOW_184); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_1_0());
                    }
                    pushFollow(FOLLOW_105);
                    lv_typeVars_2_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                      								}
                      								add(
                      									current,
                      									"typeVars",
                      									lv_typeVars_2_0,
                      									"org.eclipse.n4js.TypeExpressions.TypeVariable");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop653:
                    do {
                        int alt653=2;
                        int LA653_0 = input.LA(1);
                        if ( (LA653_0==Comma) ) {
                            alt653=1;
                        }
                        switch (alt653) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_184); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_105);
                    	    lv_typeVars_4_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"typeVars",
                    	      										lv_typeVars_4_0,
                    	      										"org.eclipse.n4js.TypeExpressions.TypeVariable");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop653;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,GreaterThanSign,FOLLOW_16); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3());
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_47);
            lv_name_6_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_6_0,
              								"org.eclipse.n4js.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_185); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
            }
            pushFollow(FOLLOW_70);
            this_TAnonymousFormalParameterList_8=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_8;
              			afterParserOrEnumRuleCall();
            }
            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
            }
            int alt655=2;
            int LA655_0 = input.LA(1);
            if ( (LA655_0==Colon) ) {
                alt655=1;
            }
            switch (alt655) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_10=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_10;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructField = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;
        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_194);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt656=2;
            int LA656_0 = input.LA(1);
            if ( (LA656_0==QuestionMark) ) {
                alt656=1;
            }
            switch (alt656) {
                case 1 :
                    {
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_1_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt657=2;
            int LA657_0 = input.LA(1);
            if ( (LA657_0==Colon) ) {
                alt657=1;
            }
            switch (alt657) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructGetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ColonSepTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Get,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_99);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt658=2;
            int LA658_0 = input.LA(1);
            if ( (LA658_0==QuestionMark) ) {
                alt658=1;
            }
            switch (alt658) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
            }
            int alt659=2;
            int LA659_0 = input.LA(1);
            if ( (LA659_0==Colon) ) {
                alt659=1;
            }
            switch (alt659) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_6=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructSetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_fpar_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_99);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt660=2;
            int LA660_0 = input.LA(1);
            if ( (LA660_0==QuestionMark) ) {
                alt660=1;
            }
            switch (alt660) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_187); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_70);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;
        	enterRule();
        try {
            {
            {
            kw=(Token)match(input,Tilde,FOLLOW_195); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
            }
            int alt661=3;
            int LA661_0 = input.LA(1);
            if ( (LA661_0==Tilde) ) {
                alt661=1;
            }
            else if ( (LA661_0==RULE_STRUCTMODSUFFIX) ) {
                alt661=2;
            }
            switch (alt661) {
                case 1 :
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_STRUCTMODSUFFIX_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
            }
            }
            int alt662=2;
            int LA662_0 = input.LA(1);
            if ( (LA662_0==Type) ) {
                alt662=1;
            }
            else if ( (LA662_0==Constructor) ) {
                alt662=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 662, 0, input);
                throw nvae;
            }
            switch (alt662) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", lv_constructorRef_2_0 != null, "constructor");
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_196); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_29);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_IDENTIFIER_6=null;
        	enterRule();
        try {
            {
            int alt663=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt663=1;
                }
                break;
            case This:
                {
                alt663=2;
                }
                break;
            case Await:
                {
                alt663=3;
                }
                break;
            case Promisify:
                {
                alt663=4;
                }
                break;
            case Target:
                {
                alt663=5;
                }
                break;
            case Default:
                {
                alt663=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt663=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 663, 0, input);
                throw nvae;
            }
            switch (alt663) {
                case 1 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    this_IDENTIFIER_6=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_6);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_6, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_6());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject this_Wildcard_0 = null;
        EObject this_TypeRef_1 = null;
        	enterRule();
        try {
            {
            int alt664=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA664_1 = input.LA(2);
                if ( (LA664_1==LeftSquareBracket) ) {
                    alt664=2;
                }
                else if ( (LA664_1==EOF||LA664_1==Extends||LA664_1==Super||LA664_1==Comma||LA664_1==GreaterThanSign||LA664_1==RightSquareBracket) ) {
                    alt664=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 664, 1, input);
                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt664=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case False:
            case Union:
            case This:
            case This_1:
            case True:
            case Type:
            case Void:
            case LeftParenthesis:
            case PlusSign:
            case HyphenMinus:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_STRING:
                {
                alt664=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 664, 0, input);
                throw nvae;
            }
            switch (alt664) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Wildcard_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRef_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcard = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;
        EObject this_WildcardOldNotation_0 = null;
        EObject this_WildcardNewNotation_1 = null;
        	enterRule();
        try {
            {
            int alt665=2;
            int LA665_0 = input.LA(1);
            if ( (LA665_0==QuestionMark) && (synpred369_InternalN4JSParser())) {
                alt665=1;
            }
            else if ( (LA665_0==Out||LA665_0==In) ) {
                alt665=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 665, 0, input);
                throw nvae;
            }
            switch (alt665) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_0=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotation=ruleWildcardOldNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;
        EObject lv_declaredLowerBound_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getWildcardOldNotationAccess().getWildcardAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
            }
            }
            }
            int alt666=3;
            int LA666_0 = input.LA(1);
            if ( (LA666_0==Extends) ) {
                alt666=1;
            }
            else if ( (LA666_0==Super) ) {
                alt666=2;
            }
            switch (alt666) {
                case 1 :
                    {
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_4, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotationWithoutBound = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationWithoutBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotationWithoutBound=ruleWildcardOldNotationWithoutBound();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotationWithoutBound; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getWildcardOldNotationWithoutBoundAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardNewNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;
        EObject lv_declaredLowerBound_3_0 = null;
        	enterRule();
        try {
            {
            int alt667=2;
            int LA667_0 = input.LA(1);
            if ( (LA667_0==Out) ) {
                alt667=1;
            }
            else if ( (LA667_0==In) ) {
                alt667=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 667, 0, input);
                throw nvae;
            }
            switch (alt667) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_0_0 != null, "out");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_2_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;
        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_declaredUpperBound_4_0 = null;
        EObject lv_defaultArgument_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt668=3;
            int LA668_0 = input.LA(1);
            if ( (LA668_0==Out) ) {
                alt668=1;
            }
            else if ( (LA668_0==In) ) {
                alt668=2;
            }
            switch (alt668) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_198); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", lv_declaredCovariant_0_0 != null, "out");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_198); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", lv_declaredContravariant_1_0 != null, "in");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            lv_name_2_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_name_2_0, grammarAccess.getTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.TypeExpressions.IDENTIFIER");
            }
            }
            }
            int alt669=2;
            int LA669_0 = input.LA(1);
            if ( (LA669_0==Extends) ) {
                alt669=1;
            }
            switch (alt669) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_64);
                    lv_declaredUpperBound_4_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            int alt670=2;
            int LA670_0 = input.LA(1);
            if ( (LA670_0==EqualsSign) ) {
                alt670=1;
            }
            switch (alt670) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getTypeVariableAccess().getEqualsSignKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDefaultArgumentTypeRefParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_defaultArgument_6_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"defaultArgument",
                      							lv_defaultArgument_6_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt671=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt671=1;
                }
                break;
            case Yield:
                {
                alt671=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt671=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 671, 0, input);
                throw nvae;
            }
            switch (alt671) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_BindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_N4Keyword_1 = null;
        	enterRule();
        try {
            {
            int alt672=2;
            int LA672_0 = input.LA(1);
            if ( (LA672_0==RULE_IDENTIFIER) ) {
                alt672=1;
            }
            else if ( ((LA672_0>=Intersection && LA672_0<=Implements)||(LA672_0>=Promisify && LA672_0<=Abstract)||LA672_0==External||(LA672_0>=Private && LA672_0<=Project)||LA672_0==Public||LA672_0==Static||LA672_0==Target||(LA672_0>=Async && LA672_0<=Await)||LA672_0==Union||LA672_0==This||LA672_0==From||LA672_0==Type||(LA672_0>=Get && LA672_0<=Let)||(LA672_0>=Out && LA672_0<=Set)||LA672_0==As||LA672_0==Of) ) {
                alt672=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 672, 0, input);
                throw nvae;
            }
            switch (alt672) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_1=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt673=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt673=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt673=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt673=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 673, 0, input);
                throw nvae;
            }
            switch (alt673) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_ReservedWord_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleReservedWord = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt674=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt674=1;
                }
                break;
            case Case:
                {
                alt674=2;
                }
                break;
            case Catch:
                {
                alt674=3;
                }
                break;
            case Class:
                {
                alt674=4;
                }
                break;
            case Const:
                {
                alt674=5;
                }
                break;
            case Continue:
                {
                alt674=6;
                }
                break;
            case Debugger:
                {
                alt674=7;
                }
                break;
            case Default:
                {
                alt674=8;
                }
                break;
            case Delete:
                {
                alt674=9;
                }
                break;
            case Do:
                {
                alt674=10;
                }
                break;
            case Else:
                {
                alt674=11;
                }
                break;
            case Export:
                {
                alt674=12;
                }
                break;
            case Extends:
                {
                alt674=13;
                }
                break;
            case Finally:
                {
                alt674=14;
                }
                break;
            case For:
                {
                alt674=15;
                }
                break;
            case Function:
                {
                alt674=16;
                }
                break;
            case If:
                {
                alt674=17;
                }
                break;
            case Import:
                {
                alt674=18;
                }
                break;
            case In:
                {
                alt674=19;
                }
                break;
            case Instanceof:
                {
                alt674=20;
                }
                break;
            case New:
                {
                alt674=21;
                }
                break;
            case Return:
                {
                alt674=22;
                }
                break;
            case Super:
                {
                alt674=23;
                }
                break;
            case Switch:
                {
                alt674=24;
                }
                break;
            case This_1:
                {
                alt674=25;
                }
                break;
            case Throw:
                {
                alt674=26;
                }
                break;
            case Try:
                {
                alt674=27;
                }
                break;
            case Typeof:
                {
                alt674=28;
                }
                break;
            case Var:
                {
                alt674=29;
                }
                break;
            case Void:
                {
                alt674=30;
                }
                break;
            case While:
                {
                alt674=31;
                }
                break;
            case With:
                {
                alt674=32;
                }
                break;
            case Yield:
                {
                alt674=33;
                }
                break;
            case Null:
                {
                alt674=34;
                }
                break;
            case True:
                {
                alt674=35;
                }
                break;
            case False:
                {
                alt674=36;
                }
                break;
            case Enum:
                {
                alt674=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 674, 0, input);
                throw nvae;
            }
            switch (alt674) {
                case 1 :
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                    }
                    }
                    break;
                case 27 :
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                    }
                    }
                    break;
                case 28 :
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                    }
                    }
                    break;
                case 29 :
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                    }
                    }
                    break;
                case 30 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                    }
                    }
                    break;
                case 31 :
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                    }
                    }
                    break;
                case 32 :
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                    }
                    }
                    break;
                case 33 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                    }
                    }
                    break;
                case 34 :
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                    }
                    }
                    break;
                case 35 :
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                    }
                    }
                    break;
                case 36 :
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                    }
                    }
                    break;
                case 37 :
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt675=26;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt675=1;
                }
                break;
            case Set:
                {
                alt675=2;
                }
                break;
            case Let:
                {
                alt675=3;
                }
                break;
            case Project:
                {
                alt675=4;
                }
                break;
            case External:
                {
                alt675=5;
                }
                break;
            case Abstract:
                {
                alt675=6;
                }
                break;
            case Static:
                {
                alt675=7;
                }
                break;
            case As:
                {
                alt675=8;
                }
                break;
            case From:
                {
                alt675=9;
                }
                break;
            case Constructor:
                {
                alt675=10;
                }
                break;
            case Of:
                {
                alt675=11;
                }
                break;
            case Target:
                {
                alt675=12;
                }
                break;
            case Type:
                {
                alt675=13;
                }
                break;
            case Union:
                {
                alt675=14;
                }
                break;
            case Intersection:
                {
                alt675=15;
                }
                break;
            case This:
                {
                alt675=16;
                }
                break;
            case Promisify:
                {
                alt675=17;
                }
                break;
            case Await:
                {
                alt675=18;
                }
                break;
            case Async:
                {
                alt675=19;
                }
                break;
            case Implements:
                {
                alt675=20;
                }
                break;
            case Interface:
                {
                alt675=21;
                }
                break;
            case Private:
                {
                alt675=22;
                }
                break;
            case Protected:
                {
                alt675=23;
                }
                break;
            case Public:
                {
                alt675=24;
                }
                break;
            case Out:
                {
                alt675=25;
                }
                break;
            case Namespace:
                {
                alt675=26;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 675, 0, input);
                throw nvae;
            }
            switch (alt675) {
                case 1 :
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Namespace,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getNamespaceKeyword_25());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleArrow() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleArrow = null;
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrow=ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrow.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleArrow() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            {
            kw=(Token)match(input,EqualsSign,FOLLOW_122); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getArrowAccess().getEqualsSignKeyword_0());
            }
            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getArrowAccess().getGreaterThanSignKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final Enumerator ruleVariableStatementKeyword() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt676=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt676=1;
                }
                break;
            case Const:
                {
                alt676=2;
                }
                break;
            case Let:
                {
                alt676=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 676, 0, input);
                throw nvae;
            }
            switch (alt676) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator rulePostfixOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt677=2;
            int LA677_0 = input.LA(1);
            if ( (LA677_0==PlusSignPlusSign) ) {
                alt677=1;
            }
            else if ( (LA677_0==HyphenMinusHyphenMinus) ) {
                alt677=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 677, 0, input);
                throw nvae;
            }
            switch (alt677) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleUnaryOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        	enterRule();
        try {
            {
            int alt678=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt678=1;
                }
                break;
            case Void:
                {
                alt678=2;
                }
                break;
            case Typeof:
                {
                alt678=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt678=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt678=5;
                }
                break;
            case PlusSign:
                {
                alt678=6;
                }
                break;
            case HyphenMinus:
                {
                alt678=7;
                }
                break;
            case Tilde:
                {
                alt678=8;
                }
                break;
            case ExclamationMark:
                {
                alt678=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 678, 0, input);
                throw nvae;
            }
            switch (alt678) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    {
                    enumLiteral_8=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleMultiplicativeOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt679=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt679=1;
                }
                break;
            case Solidus:
                {
                alt679=2;
                }
                break;
            case PercentSign:
                {
                alt679=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 679, 0, input);
                throw nvae;
            }
            switch (alt679) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleAdditiveOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt680=2;
            int LA680_0 = input.LA(1);
            if ( (LA680_0==PlusSign) ) {
                alt680=1;
            }
            else if ( (LA680_0==HyphenMinus) ) {
                alt680=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 680, 0, input);
                throw nvae;
            }
            switch (alt680) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleEqualityOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        	enterRule();
        try {
            {
            int alt681=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt681=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt681=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt681=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt681=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 681, 0, input);
                throw nvae;
            }
            switch (alt681) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4Modifier() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        	enterRule();
        try {
            {
            int alt682=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt682=1;
                }
                break;
            case Project:
                {
                alt682=2;
                }
                break;
            case Protected:
                {
                alt682=3;
                }
                break;
            case Public:
                {
                alt682=4;
                }
                break;
            case External:
                {
                alt682=5;
                }
                break;
            case Abstract:
                {
                alt682=6;
                }
                break;
            case Static:
                {
                alt682=7;
                }
                break;
            case Const:
                {
                alt682=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 682, 0, input);
                throw nvae;
            }
            switch (alt682) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4ModifierWithoutConst() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        	enterRule();
        try {
            {
            int alt683=7;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt683=1;
                }
                break;
            case Project:
                {
                alt683=2;
                }
                break;
            case Protected:
                {
                alt683=3;
                }
                break;
            case Public:
                {
                alt683=4;
                }
                break;
            case External:
                {
                alt683=5;
                }
                break;
            case Abstract:
                {
                alt683=6;
                }
                break;
            case Static:
                {
                alt683=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 683, 0, input);
                throw nvae;
            }
            switch (alt683) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierWithoutConstAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierWithoutConstAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierWithoutConstAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierWithoutConstAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierWithoutConstAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierWithoutConstAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierWithoutConstAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop684:
        do {
            int alt684=2;
            int LA684_0 = input.LA(1);
            if ( ((LA684_0>=Protected && LA684_0<=Abstract)||LA684_0==External||(LA684_0>=Private && LA684_0<=Project)||LA684_0==Public||LA684_0==Static||LA684_0==Const) ) {
                alt684=1;
            }
            switch (alt684) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop684;
            }
        } while (true);
        match(input,Namespace,FOLLOW_199); if (state.failed) return ;
        int alt685=2;
        int LA685_0 = input.LA(1);
        if ( ((LA685_0>=Intersection && LA685_0<=Implements)||(LA685_0>=Promisify && LA685_0<=Abstract)||LA685_0==External||(LA685_0>=Private && LA685_0<=Project)||LA685_0==Public||LA685_0==Static||LA685_0==Target||(LA685_0>=Async && LA685_0<=Await)||LA685_0==Union||(LA685_0>=Yield && LA685_0<=This)||LA685_0==From||LA685_0==Type||(LA685_0>=Get && LA685_0<=Let)||(LA685_0>=Out && LA685_0<=Set)||LA685_0==As||LA685_0==Of||LA685_0==RULE_IDENTIFIER) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop686:
        do {
            int alt686=2;
            int LA686_0 = input.LA(1);
            if ( ((LA686_0>=Protected && LA686_0<=Abstract)||LA686_0==External||(LA686_0>=Private && LA686_0<=Project)||LA686_0==Public||LA686_0==Static||LA686_0==Const) ) {
                alt686=1;
            }
            switch (alt686) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop686;
            }
        } while (true);
        match(input,Class,FOLLOW_200); if (state.failed) return ;
        int alt687=2;
        int LA687_0 = input.LA(1);
        if ( (LA687_0==Tilde) ) {
            alt687=1;
        }
        switch (alt687) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt688=2;
        int LA688_0 = input.LA(1);
        if ( ((LA688_0>=Intersection && LA688_0<=Implements)||(LA688_0>=Promisify && LA688_0<=Abstract)||LA688_0==External||(LA688_0>=Private && LA688_0<=Project)||LA688_0==Public||LA688_0==Static||LA688_0==Target||(LA688_0>=Async && LA688_0<=Await)||LA688_0==Union||(LA688_0>=Yield && LA688_0<=This)||LA688_0==From||LA688_0==Type||(LA688_0>=Get && LA688_0<=Let)||(LA688_0>=Out && LA688_0<=Set)||LA688_0==As||LA688_0==Of||LA688_0==RULE_IDENTIFIER) ) {
            alt688=1;
        }
        switch (alt688) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop689:
        do {
            int alt689=2;
            int LA689_0 = input.LA(1);
            if ( ((LA689_0>=Protected && LA689_0<=Abstract)||LA689_0==External||(LA689_0>=Private && LA689_0<=Project)||LA689_0==Public||LA689_0==Static||LA689_0==Const) ) {
                alt689=1;
            }
            switch (alt689) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop689;
            }
        } while (true);
        match(input,Interface,FOLLOW_200); if (state.failed) return ;
        int alt690=2;
        int LA690_0 = input.LA(1);
        if ( (LA690_0==Tilde) ) {
            alt690=1;
        }
        switch (alt690) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt691=2;
        int LA691_0 = input.LA(1);
        if ( ((LA691_0>=Intersection && LA691_0<=Implements)||(LA691_0>=Promisify && LA691_0<=Abstract)||LA691_0==External||(LA691_0>=Private && LA691_0<=Project)||LA691_0==Public||LA691_0==Static||LA691_0==Target||(LA691_0>=Async && LA691_0<=Await)||LA691_0==Union||(LA691_0>=Yield && LA691_0<=This)||LA691_0==From||LA691_0==Type||(LA691_0>=Get && LA691_0<=Let)||(LA691_0>=Out && LA691_0<=Set)||LA691_0==As||LA691_0==Of||LA691_0==RULE_IDENTIFIER) ) {
            alt691=1;
        }
        switch (alt691) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop692:
        do {
            int alt692=2;
            int LA692_0 = input.LA(1);
            if ( ((LA692_0>=Protected && LA692_0<=Abstract)||LA692_0==External||(LA692_0>=Private && LA692_0<=Project)||LA692_0==Public||LA692_0==Static||LA692_0==Const) ) {
                alt692=1;
            }
            switch (alt692) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_15);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop692;
            }
        } while (true);
        match(input,Enum,FOLLOW_199); if (state.failed) return ;
        int alt693=2;
        int LA693_0 = input.LA(1);
        if ( ((LA693_0>=Intersection && LA693_0<=Implements)||(LA693_0>=Promisify && LA693_0<=Abstract)||LA693_0==External||(LA693_0>=Private && LA693_0<=Project)||LA693_0==Public||LA693_0==Static||LA693_0==Target||(LA693_0>=Async && LA693_0<=Await)||LA693_0==Union||(LA693_0>=Yield && LA693_0<=This)||LA693_0==From||LA693_0==Type||(LA693_0>=Get && LA693_0<=Let)||(LA693_0>=Out && LA693_0<=Set)||LA693_0==As||LA693_0==Of||LA693_0==RULE_IDENTIFIER) ) {
            alt693=1;
        }
        switch (alt693) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop694:
        do {
            int alt694=2;
            int LA694_0 = input.LA(1);
            if ( ((LA694_0>=Protected && LA694_0<=Abstract)||LA694_0==External||(LA694_0>=Private && LA694_0<=Project)||LA694_0==Public||LA694_0==Static) ) {
                alt694=1;
            }
            switch (alt694) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_18);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop694;
            }
        } while (true);
        match(input,Type,FOLLOW_199); if (state.failed) return ;
        int alt695=2;
        int LA695_0 = input.LA(1);
        if ( ((LA695_0>=Intersection && LA695_0<=Implements)||(LA695_0>=Promisify && LA695_0<=Abstract)||LA695_0==External||(LA695_0>=Private && LA695_0<=Project)||LA695_0==Public||LA695_0==Static||LA695_0==Target||(LA695_0>=Async && LA695_0<=Await)||LA695_0==Union||(LA695_0>=Yield && LA695_0<=This)||LA695_0==From||LA695_0==Type||(LA695_0>=Get && LA695_0<=Let)||(LA695_0>=Out && LA695_0<=Set)||LA695_0==As||LA695_0==Of||LA695_0==RULE_IDENTIFIER) ) {
            alt695=1;
        }
        switch (alt695) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred7_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop700:
        do {
            int alt700=2;
            int LA700_0 = input.LA(1);
            if ( ((LA700_0>=Protected && LA700_0<=Abstract)||LA700_0==External||(LA700_0>=Private && LA700_0<=Project)||LA700_0==Public||LA700_0==Static||LA700_0==Const) ) {
                alt700=1;
            }
            switch (alt700) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop700;
            }
        } while (true);
        match(input,Namespace,FOLLOW_199); if (state.failed) return ;
        int alt701=2;
        int LA701_0 = input.LA(1);
        if ( ((LA701_0>=Intersection && LA701_0<=Implements)||(LA701_0>=Promisify && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Target||(LA701_0>=Async && LA701_0<=Await)||LA701_0==Union||(LA701_0>=Yield && LA701_0<=This)||LA701_0==From||LA701_0==Type||(LA701_0>=Get && LA701_0<=Let)||(LA701_0>=Out && LA701_0<=Set)||LA701_0==As||LA701_0==Of||LA701_0==RULE_IDENTIFIER) ) {
            alt701=1;
        }
        switch (alt701) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop702:
        do {
            int alt702=2;
            int LA702_0 = input.LA(1);
            if ( ((LA702_0>=Protected && LA702_0<=Abstract)||LA702_0==External||(LA702_0>=Private && LA702_0<=Project)||LA702_0==Public||LA702_0==Static||LA702_0==Const) ) {
                alt702=1;
            }
            switch (alt702) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop702;
            }
        } while (true);
        match(input,Class,FOLLOW_200); if (state.failed) return ;
        int alt703=2;
        int LA703_0 = input.LA(1);
        if ( (LA703_0==Tilde) ) {
            alt703=1;
        }
        switch (alt703) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt704=2;
        int LA704_0 = input.LA(1);
        if ( ((LA704_0>=Intersection && LA704_0<=Implements)||(LA704_0>=Promisify && LA704_0<=Abstract)||LA704_0==External||(LA704_0>=Private && LA704_0<=Project)||LA704_0==Public||LA704_0==Static||LA704_0==Target||(LA704_0>=Async && LA704_0<=Await)||LA704_0==Union||(LA704_0>=Yield && LA704_0<=This)||LA704_0==From||LA704_0==Type||(LA704_0>=Get && LA704_0<=Let)||(LA704_0>=Out && LA704_0<=Set)||LA704_0==As||LA704_0==Of||LA704_0==RULE_IDENTIFIER) ) {
            alt704=1;
        }
        switch (alt704) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop705:
        do {
            int alt705=2;
            int LA705_0 = input.LA(1);
            if ( ((LA705_0>=Protected && LA705_0<=Abstract)||LA705_0==External||(LA705_0>=Private && LA705_0<=Project)||LA705_0==Public||LA705_0==Static||LA705_0==Const) ) {
                alt705=1;
            }
            switch (alt705) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop705;
            }
        } while (true);
        match(input,Interface,FOLLOW_200); if (state.failed) return ;
        int alt706=2;
        int LA706_0 = input.LA(1);
        if ( (LA706_0==Tilde) ) {
            alt706=1;
        }
        switch (alt706) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt707=2;
        int LA707_0 = input.LA(1);
        if ( ((LA707_0>=Intersection && LA707_0<=Implements)||(LA707_0>=Promisify && LA707_0<=Abstract)||LA707_0==External||(LA707_0>=Private && LA707_0<=Project)||LA707_0==Public||LA707_0==Static||LA707_0==Target||(LA707_0>=Async && LA707_0<=Await)||LA707_0==Union||(LA707_0>=Yield && LA707_0<=This)||LA707_0==From||LA707_0==Type||(LA707_0>=Get && LA707_0<=Let)||(LA707_0>=Out && LA707_0<=Set)||LA707_0==As||LA707_0==Of||LA707_0==RULE_IDENTIFIER) ) {
            alt707=1;
        }
        switch (alt707) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop708:
        do {
            int alt708=2;
            int LA708_0 = input.LA(1);
            if ( ((LA708_0>=Protected && LA708_0<=Abstract)||LA708_0==External||(LA708_0>=Private && LA708_0<=Project)||LA708_0==Public||LA708_0==Static||LA708_0==Const) ) {
                alt708=1;
            }
            switch (alt708) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_15);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop708;
            }
        } while (true);
        match(input,Enum,FOLLOW_199); if (state.failed) return ;
        int alt709=2;
        int LA709_0 = input.LA(1);
        if ( ((LA709_0>=Intersection && LA709_0<=Implements)||(LA709_0>=Promisify && LA709_0<=Abstract)||LA709_0==External||(LA709_0>=Private && LA709_0<=Project)||LA709_0==Public||LA709_0==Static||LA709_0==Target||(LA709_0>=Async && LA709_0<=Await)||LA709_0==Union||(LA709_0>=Yield && LA709_0<=This)||LA709_0==From||LA709_0==Type||(LA709_0>=Get && LA709_0<=Let)||(LA709_0>=Out && LA709_0<=Set)||LA709_0==As||LA709_0==Of||LA709_0==RULE_IDENTIFIER) ) {
            alt709=1;
        }
        switch (alt709) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop710:
        do {
            int alt710=2;
            int LA710_0 = input.LA(1);
            if ( ((LA710_0>=Protected && LA710_0<=Abstract)||LA710_0==External||(LA710_0>=Private && LA710_0<=Project)||LA710_0==Public||LA710_0==Static) ) {
                alt710=1;
            }
            switch (alt710) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_18);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop710;
            }
        } while (true);
        match(input,Type,FOLLOW_199); if (state.failed) return ;
        int alt711=2;
        int LA711_0 = input.LA(1);
        if ( ((LA711_0>=Intersection && LA711_0<=Implements)||(LA711_0>=Promisify && LA711_0<=Abstract)||LA711_0==External||(LA711_0>=Private && LA711_0<=Project)||LA711_0==Public||LA711_0==Static||LA711_0==Target||(LA711_0>=Async && LA711_0<=Await)||LA711_0==Union||(LA711_0>=Yield && LA711_0<=This)||LA711_0==From||LA711_0==Type||(LA711_0>=Get && LA711_0<=Let)||(LA711_0>=Out && LA711_0<=Set)||LA711_0==As||LA711_0==Of||LA711_0==RULE_IDENTIFIER) ) {
            alt711=1;
        }
        switch (alt711) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred16_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop712:
        do {
            int alt712=2;
            int LA712_0 = input.LA(1);
            if ( ((LA712_0>=Protected && LA712_0<=Abstract)||LA712_0==External||(LA712_0>=Private && LA712_0<=Project)||LA712_0==Public||LA712_0==Static||LA712_0==Const) ) {
                alt712=1;
            }
            switch (alt712) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop712;
            }
        } while (true);
        match(input,Namespace,FOLLOW_199); if (state.failed) return ;
        int alt713=2;
        int LA713_0 = input.LA(1);
        if ( ((LA713_0>=Intersection && LA713_0<=Implements)||(LA713_0>=Promisify && LA713_0<=Abstract)||LA713_0==External||(LA713_0>=Private && LA713_0<=Project)||LA713_0==Public||LA713_0==Static||LA713_0==Target||(LA713_0>=Async && LA713_0<=Await)||LA713_0==Union||LA713_0==This||LA713_0==From||LA713_0==Type||(LA713_0>=Get && LA713_0<=Let)||(LA713_0>=Out && LA713_0<=Set)||LA713_0==As||LA713_0==Of||LA713_0==RULE_IDENTIFIER) ) {
            alt713=1;
        }
        switch (alt713) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred18_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop714:
        do {
            int alt714=2;
            int LA714_0 = input.LA(1);
            if ( ((LA714_0>=Protected && LA714_0<=Abstract)||LA714_0==External||(LA714_0>=Private && LA714_0<=Project)||LA714_0==Public||LA714_0==Static||LA714_0==Const) ) {
                alt714=1;
            }
            switch (alt714) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop714;
            }
        } while (true);
        match(input,Class,FOLLOW_200); if (state.failed) return ;
        int alt715=2;
        int LA715_0 = input.LA(1);
        if ( (LA715_0==Tilde) ) {
            alt715=1;
        }
        switch (alt715) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt716=2;
        int LA716_0 = input.LA(1);
        if ( ((LA716_0>=Intersection && LA716_0<=Implements)||(LA716_0>=Promisify && LA716_0<=Abstract)||LA716_0==External||(LA716_0>=Private && LA716_0<=Project)||LA716_0==Public||LA716_0==Static||LA716_0==Target||(LA716_0>=Async && LA716_0<=Await)||LA716_0==Union||LA716_0==This||LA716_0==From||LA716_0==Type||(LA716_0>=Get && LA716_0<=Let)||(LA716_0>=Out && LA716_0<=Set)||LA716_0==As||LA716_0==Of||LA716_0==RULE_IDENTIFIER) ) {
            alt716=1;
        }
        switch (alt716) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred19_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop717:
        do {
            int alt717=2;
            int LA717_0 = input.LA(1);
            if ( ((LA717_0>=Protected && LA717_0<=Abstract)||LA717_0==External||(LA717_0>=Private && LA717_0<=Project)||LA717_0==Public||LA717_0==Static||LA717_0==Const) ) {
                alt717=1;
            }
            switch (alt717) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop717;
            }
        } while (true);
        match(input,Interface,FOLLOW_200); if (state.failed) return ;
        int alt718=2;
        int LA718_0 = input.LA(1);
        if ( (LA718_0==Tilde) ) {
            alt718=1;
        }
        switch (alt718) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt719=2;
        int LA719_0 = input.LA(1);
        if ( ((LA719_0>=Intersection && LA719_0<=Implements)||(LA719_0>=Promisify && LA719_0<=Abstract)||LA719_0==External||(LA719_0>=Private && LA719_0<=Project)||LA719_0==Public||LA719_0==Static||LA719_0==Target||(LA719_0>=Async && LA719_0<=Await)||LA719_0==Union||LA719_0==This||LA719_0==From||LA719_0==Type||(LA719_0>=Get && LA719_0<=Let)||(LA719_0>=Out && LA719_0<=Set)||LA719_0==As||LA719_0==Of||LA719_0==RULE_IDENTIFIER) ) {
            alt719=1;
        }
        switch (alt719) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred20_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop720:
        do {
            int alt720=2;
            int LA720_0 = input.LA(1);
            if ( ((LA720_0>=Protected && LA720_0<=Abstract)||LA720_0==External||(LA720_0>=Private && LA720_0<=Project)||LA720_0==Public||LA720_0==Static||LA720_0==Const) ) {
                alt720=1;
            }
            switch (alt720) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_15);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop720;
            }
        } while (true);
        match(input,Enum,FOLLOW_199); if (state.failed) return ;
        int alt721=2;
        int LA721_0 = input.LA(1);
        if ( ((LA721_0>=Intersection && LA721_0<=Implements)||(LA721_0>=Promisify && LA721_0<=Abstract)||LA721_0==External||(LA721_0>=Private && LA721_0<=Project)||LA721_0==Public||LA721_0==Static||LA721_0==Target||(LA721_0>=Async && LA721_0<=Await)||LA721_0==Union||LA721_0==This||LA721_0==From||LA721_0==Type||(LA721_0>=Get && LA721_0<=Let)||(LA721_0>=Out && LA721_0<=Set)||LA721_0==As||LA721_0==Of||LA721_0==RULE_IDENTIFIER) ) {
            alt721=1;
        }
        switch (alt721) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop722:
        do {
            int alt722=2;
            int LA722_0 = input.LA(1);
            if ( ((LA722_0>=Protected && LA722_0<=Abstract)||LA722_0==External||(LA722_0>=Private && LA722_0<=Project)||LA722_0==Public||LA722_0==Static) ) {
                alt722=1;
            }
            switch (alt722) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_18);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop722;
            }
        } while (true);
        match(input,Type,FOLLOW_199); if (state.failed) return ;
        int alt723=2;
        int LA723_0 = input.LA(1);
        if ( ((LA723_0>=Intersection && LA723_0<=Implements)||(LA723_0>=Promisify && LA723_0<=Abstract)||LA723_0==External||(LA723_0>=Private && LA723_0<=Project)||LA723_0==Public||LA723_0==Static||LA723_0==Target||(LA723_0>=Async && LA723_0<=Await)||LA723_0==Union||LA723_0==This||LA723_0==From||LA723_0==Type||(LA723_0>=Get && LA723_0<=Let)||(LA723_0>=Out && LA723_0<=Set)||LA723_0==As||LA723_0==Of||LA723_0==RULE_IDENTIFIER) ) {
            alt723=1;
        }
        switch (alt723) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Type||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred28_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop725:
        do {
            int alt725=2;
            int LA725_0 = input.LA(1);
            if ( ((LA725_0>=Protected && LA725_0<=Abstract)||LA725_0==External||(LA725_0>=Private && LA725_0<=Project)||LA725_0==Public||LA725_0==Static||LA725_0==Const) ) {
                alt725=1;
            }
            switch (alt725) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop725;
            }
        } while (true);
        match(input,Namespace,FOLLOW_199); if (state.failed) return ;
        int alt726=2;
        int LA726_0 = input.LA(1);
        if ( ((LA726_0>=Intersection && LA726_0<=Implements)||(LA726_0>=Promisify && LA726_0<=Abstract)||LA726_0==External||(LA726_0>=Private && LA726_0<=Project)||LA726_0==Public||LA726_0==Static||LA726_0==Target||(LA726_0>=Async && LA726_0<=Await)||LA726_0==Union||(LA726_0>=Yield && LA726_0<=This)||LA726_0==From||LA726_0==Type||(LA726_0>=Get && LA726_0<=Let)||(LA726_0>=Out && LA726_0<=Set)||LA726_0==As||LA726_0==Of||LA726_0==RULE_IDENTIFIER) ) {
            alt726=1;
        }
        switch (alt726) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred29_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop727:
        do {
            int alt727=2;
            int LA727_0 = input.LA(1);
            if ( ((LA727_0>=Protected && LA727_0<=Abstract)||LA727_0==External||(LA727_0>=Private && LA727_0<=Project)||LA727_0==Public||LA727_0==Static||LA727_0==Const) ) {
                alt727=1;
            }
            switch (alt727) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop727;
            }
        } while (true);
        match(input,Class,FOLLOW_200); if (state.failed) return ;
        int alt728=2;
        int LA728_0 = input.LA(1);
        if ( (LA728_0==Tilde) ) {
            alt728=1;
        }
        switch (alt728) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt729=2;
        int LA729_0 = input.LA(1);
        if ( ((LA729_0>=Intersection && LA729_0<=Implements)||(LA729_0>=Promisify && LA729_0<=Abstract)||LA729_0==External||(LA729_0>=Private && LA729_0<=Project)||LA729_0==Public||LA729_0==Static||LA729_0==Target||(LA729_0>=Async && LA729_0<=Await)||LA729_0==Union||(LA729_0>=Yield && LA729_0<=This)||LA729_0==From||LA729_0==Type||(LA729_0>=Get && LA729_0<=Let)||(LA729_0>=Out && LA729_0<=Set)||LA729_0==As||LA729_0==Of||LA729_0==RULE_IDENTIFIER) ) {
            alt729=1;
        }
        switch (alt729) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred30_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop730:
        do {
            int alt730=2;
            int LA730_0 = input.LA(1);
            if ( ((LA730_0>=Protected && LA730_0<=Abstract)||LA730_0==External||(LA730_0>=Private && LA730_0<=Project)||LA730_0==Public||LA730_0==Static||LA730_0==Const) ) {
                alt730=1;
            }
            switch (alt730) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop730;
            }
        } while (true);
        match(input,Interface,FOLLOW_200); if (state.failed) return ;
        int alt731=2;
        int LA731_0 = input.LA(1);
        if ( (LA731_0==Tilde) ) {
            alt731=1;
        }
        switch (alt731) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_199);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt732=2;
        int LA732_0 = input.LA(1);
        if ( ((LA732_0>=Intersection && LA732_0<=Implements)||(LA732_0>=Promisify && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Target||(LA732_0>=Async && LA732_0<=Await)||LA732_0==Union||(LA732_0>=Yield && LA732_0<=This)||LA732_0==From||LA732_0==Type||(LA732_0>=Get && LA732_0<=Let)||(LA732_0>=Out && LA732_0<=Set)||LA732_0==As||LA732_0==Of||LA732_0==RULE_IDENTIFIER) ) {
            alt732=1;
        }
        switch (alt732) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred31_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop733:
        do {
            int alt733=2;
            int LA733_0 = input.LA(1);
            if ( ((LA733_0>=Protected && LA733_0<=Abstract)||LA733_0==External||(LA733_0>=Private && LA733_0<=Project)||LA733_0==Public||LA733_0==Static||LA733_0==Const) ) {
                alt733=1;
            }
            switch (alt733) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_15);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop733;
            }
        } while (true);
        match(input,Enum,FOLLOW_199); if (state.failed) return ;
        int alt734=2;
        int LA734_0 = input.LA(1);
        if ( ((LA734_0>=Intersection && LA734_0<=Implements)||(LA734_0>=Promisify && LA734_0<=Abstract)||LA734_0==External||(LA734_0>=Private && LA734_0<=Project)||LA734_0==Public||LA734_0==Static||LA734_0==Target||(LA734_0>=Async && LA734_0<=Await)||LA734_0==Union||(LA734_0>=Yield && LA734_0<=This)||LA734_0==From||LA734_0==Type||(LA734_0>=Get && LA734_0<=Let)||(LA734_0>=Out && LA734_0<=Set)||LA734_0==As||LA734_0==Of||LA734_0==RULE_IDENTIFIER) ) {
            alt734=1;
        }
        switch (alt734) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred32_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop735:
        do {
            int alt735=2;
            int LA735_0 = input.LA(1);
            if ( ((LA735_0>=Protected && LA735_0<=Abstract)||LA735_0==External||(LA735_0>=Private && LA735_0<=Project)||LA735_0==Public||LA735_0==Static) ) {
                alt735=1;
            }
            switch (alt735) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_18);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop735;
            }
        } while (true);
        match(input,Type,FOLLOW_199); if (state.failed) return ;
        int alt736=2;
        int LA736_0 = input.LA(1);
        if ( ((LA736_0>=Intersection && LA736_0<=Implements)||(LA736_0>=Promisify && LA736_0<=Abstract)||LA736_0==External||(LA736_0>=Private && LA736_0<=Project)||LA736_0==Public||LA736_0==Static||LA736_0==Target||(LA736_0>=Async && LA736_0<=Await)||LA736_0==Union||(LA736_0>=Yield && LA736_0<=This)||LA736_0==From||LA736_0==Type||(LA736_0>=Get && LA736_0<=Let)||(LA736_0>=Out && LA736_0<=Set)||LA736_0==As||LA736_0==Of||LA736_0==RULE_IDENTIFIER) ) {
            alt736=1;
        }
        switch (alt736) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred33_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop737:
        do {
            int alt737=2;
            int LA737_0 = input.LA(1);
            if ( ((LA737_0>=Protected && LA737_0<=Abstract)||LA737_0==External||(LA737_0>=Private && LA737_0<=Project)||LA737_0==Public||LA737_0==Static||LA737_0==Const) ) {
                alt737=1;
            }
            switch (alt737) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop737;
            }
        } while (true);
        pushFollow(FOLLOW_50);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred40_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred41_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred42_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred44_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred46_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred73_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred80_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop752:
        do {
            int alt752=2;
            int LA752_0 = input.LA(1);
            if ( ((LA752_0>=Protected && LA752_0<=Abstract)||LA752_0==External||(LA752_0>=Private && LA752_0<=Project)||LA752_0==Public||LA752_0==Static||LA752_0==Const) ) {
                alt752=1;
            }
            switch (alt752) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop752;
            }
        } while (true);
        pushFollow(FOLLOW_50);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred82_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred83_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred84_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred85_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop753:
        do {
            int alt753=2;
            int LA753_0 = input.LA(1);
            if ( ((LA753_0>=Protected && LA753_0<=Abstract)||LA753_0==External||(LA753_0>=Private && LA753_0<=Project)||LA753_0==Public||LA753_0==Static||LA753_0==Const) ) {
                alt753=1;
            }
            switch (alt753) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop753;
            }
        } while (true);
        pushFollow(FOLLOW_50);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred86_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred87_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_141); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_48);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt754=2;
        int LA754_0 = input.LA(1);
        if ( (LA754_0==Colon) ) {
            alt754=1;
        }
        switch (alt754) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_48);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt755=2;
        int LA755_0 = input.LA(1);
        if ( (LA755_0==Colon) ) {
            alt755=1;
        }
        switch (alt755) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_48);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt756=2;
        int LA756_0 = input.LA(1);
        if ( (LA756_0==Colon) ) {
            alt756=1;
        }
        switch (alt756) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_48);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt757=2;
        int LA757_0 = input.LA(1);
        if ( (LA757_0==Colon) ) {
            alt757=1;
        }
        switch (alt757) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred114_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred115_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_76);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_53); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_70);
        norm1_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred123_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred124_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_77);
        ruleBindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt758=2;
        int LA758_0 = input.LA(1);
        if ( (LA758_0==In) ) {
            alt758=1;
        }
        else if ( (LA758_0==Of) ) {
            alt758=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 758, 0, input);
            throw nvae;
        }
        switch (alt758) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_68); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_68); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt759=2;
        int LA759_0 = input.LA(1);
        if ( ((LA759_0>=Intersection && LA759_0<=Implements)||(LA759_0>=Promisify && LA759_0<=Abstract)||(LA759_0>=External && LA759_0<=Function)||(LA759_0>=Private && LA759_0<=Delete)||(LA759_0>=Import && LA759_0<=Public)||LA759_0==Static||(LA759_0>=Target && LA759_0<=Await)||LA759_0==Class||(LA759_0>=False && LA759_0<=Super)||LA759_0==Union||(LA759_0>=Yield && LA759_0<=This)||(LA759_0>=From && LA759_0<=Void)||(LA759_0>=Get && LA759_0<=Set)||LA759_0==PlusSignPlusSign||(LA759_0>=HyphenMinusHyphenMinus && LA759_0<=SolidusEqualsSign)||LA759_0==As||LA759_0==Of||LA759_0==ExclamationMark||LA759_0==LeftParenthesis||LA759_0==PlusSign||LA759_0==HyphenMinus||LA759_0==Solidus||LA759_0==LessThanSign||(LA759_0>=CommercialAt && LA759_0<=LeftSquareBracket)||LA759_0==LeftCurlyBracket||LA759_0==Tilde||(LA759_0>=RULE_TEMPLATE_HEAD && LA759_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA759_0==RULE_IDENTIFIER||LA759_0==RULE_INT||LA759_0==RULE_DOUBLE||(LA759_0>=RULE_BINARY_INT && LA759_0<=RULE_SCIENTIFIC_INT)||LA759_0==RULE_STRING) ) {
            alt759=1;
        }
        switch (alt759) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_76);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_53); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_70);
        norm3_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_77);
        norm2_BindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt760=2;
        int LA760_0 = input.LA(1);
        if ( (LA760_0==In) ) {
            alt760=1;
        }
        else if ( (LA760_0==Of) ) {
            alt760=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 760, 0, input);
            throw nvae;
        }
        switch (alt760) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_68); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_68); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt761=2;
        int LA761_0 = input.LA(1);
        if ( ((LA761_0>=Intersection && LA761_0<=Implements)||(LA761_0>=Promisify && LA761_0<=Abstract)||(LA761_0>=External && LA761_0<=Function)||(LA761_0>=Private && LA761_0<=Delete)||(LA761_0>=Import && LA761_0<=Public)||LA761_0==Static||(LA761_0>=Target && LA761_0<=Await)||LA761_0==Class||(LA761_0>=False && LA761_0<=Super)||LA761_0==Union||(LA761_0>=Yield && LA761_0<=This)||(LA761_0>=From && LA761_0<=Void)||(LA761_0>=Get && LA761_0<=Set)||LA761_0==PlusSignPlusSign||(LA761_0>=HyphenMinusHyphenMinus && LA761_0<=SolidusEqualsSign)||LA761_0==As||LA761_0==Of||LA761_0==ExclamationMark||LA761_0==LeftParenthesis||LA761_0==PlusSign||LA761_0==HyphenMinus||LA761_0==Solidus||LA761_0==LessThanSign||(LA761_0>=CommercialAt && LA761_0<=LeftSquareBracket)||LA761_0==LeftCurlyBracket||LA761_0==Tilde||(LA761_0>=RULE_TEMPLATE_HEAD && LA761_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA761_0==RULE_IDENTIFIER||LA761_0==RULE_INT||LA761_0==RULE_DOUBLE||(LA761_0>=RULE_BINARY_INT && LA761_0<=RULE_SCIENTIFIC_INT)||LA761_0==RULE_STRING) ) {
            alt761=1;
        }
        switch (alt761) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred140_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred144_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_49); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_50);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_49); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_50);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt762=2;
        alt762 = dfa762.predict(input);
        switch (alt762) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_103);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt763=2;
        int LA763_0 = input.LA(1);
        if ( (LA763_0==QuestionMark) ) {
            alt763=1;
        }
        switch (alt763) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_88); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred147_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred149_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt764=2;
        int LA764_0 = input.LA(1);
        if ( (LA764_0==LessThanSign) ) {
            alt764=1;
        }
        switch (alt764) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt765=2;
        alt765 = dfa765.predict(input);
        switch (alt765) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_100);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt766=2;
        int LA766_0 = input.LA(1);
        if ( (LA766_0==Asterisk) ) {
            alt766=1;
        }
        else if ( ((LA766_0>=Intersection && LA766_0<=With)||(LA766_0>=For && LA766_0<=Var)||(LA766_0>=As && LA766_0<=Of)||LA766_0==LeftSquareBracket||LA766_0==RULE_IDENTIFIER||LA766_0==RULE_INT||LA766_0==RULE_DOUBLE||(LA766_0>=RULE_BINARY_INT && LA766_0<=RULE_OCTAL_INT)||(LA766_0>=RULE_HEX_INT && LA766_0<=RULE_SCIENTIFIC_INT)||LA766_0==RULE_STRING) ) {
            alt766=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 766, 0, input);
            throw nvae;
        }
        switch (alt766) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred150_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt767=2;
        alt767 = dfa767.predict(input);
        switch (alt767) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_103);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt768=2;
        int LA768_0 = input.LA(1);
        if ( (LA768_0==QuestionMark) ) {
            alt768=1;
        }
        switch (alt768) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_88); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred151_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred152_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred153_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt769=2;
        int LA769_0 = input.LA(1);
        if ( (LA769_0==LessThanSign) ) {
            alt769=1;
        }
        switch (alt769) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt770=2;
        alt770 = dfa770.predict(input);
        switch (alt770) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_100);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt771=2;
        int LA771_0 = input.LA(1);
        if ( (LA771_0==Asterisk) ) {
            alt771=1;
        }
        else if ( ((LA771_0>=Intersection && LA771_0<=With)||(LA771_0>=For && LA771_0<=Var)||(LA771_0>=As && LA771_0<=Of)||LA771_0==LeftSquareBracket||LA771_0==RULE_IDENTIFIER||LA771_0==RULE_INT||LA771_0==RULE_DOUBLE||(LA771_0>=RULE_BINARY_INT && LA771_0<=RULE_OCTAL_INT)||(LA771_0>=RULE_HEX_INT && LA771_0<=RULE_SCIENTIFIC_INT)||LA771_0==RULE_STRING) ) {
            alt771=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 771, 0, input);
            throw nvae;
        }
        switch (alt771) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred154_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt772=2;
        alt772 = dfa772.predict(input);
        switch (alt772) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_88);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred155_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred157_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred160_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt773=2;
        int LA773_0 = input.LA(1);
        if ( (LA773_0==LessThanSign) ) {
            alt773=1;
        }
        switch (alt773) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt774=2;
        alt774 = dfa774.predict(input);
        switch (alt774) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt775=2;
        int LA775_0 = input.LA(1);
        if ( (LA775_0==Asterisk) ) {
            alt775=1;
        }
        else if ( ((LA775_0>=Intersection && LA775_0<=With)||(LA775_0>=For && LA775_0<=Var)||(LA775_0>=As && LA775_0<=Of)||LA775_0==LeftSquareBracket||LA775_0==RULE_IDENTIFIER||LA775_0==RULE_INT||LA775_0==RULE_DOUBLE||(LA775_0>=RULE_BINARY_INT && LA775_0<=RULE_OCTAL_INT)||(LA775_0>=RULE_HEX_INT && LA775_0<=RULE_SCIENTIFIC_INT)||LA775_0==RULE_STRING) ) {
            alt775=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 775, 0, input);
            throw nvae;
        }
        switch (alt775) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred163_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt776=2;
        alt776 = dfa776.predict(input);
        switch (alt776) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_88);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred164_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred166_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred169_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt777=2;
        int LA777_0 = input.LA(1);
        if ( (LA777_0==LessThanSign) ) {
            alt777=1;
        }
        switch (alt777) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt778=2;
        alt778 = dfa778.predict(input);
        switch (alt778) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt779=2;
        int LA779_0 = input.LA(1);
        if ( (LA779_0==Asterisk) ) {
            alt779=1;
        }
        else if ( ((LA779_0>=Intersection && LA779_0<=With)||(LA779_0>=For && LA779_0<=Var)||(LA779_0>=As && LA779_0<=Of)||LA779_0==LeftSquareBracket||LA779_0==RULE_IDENTIFIER||LA779_0==RULE_INT||LA779_0==RULE_DOUBLE||(LA779_0>=RULE_BINARY_INT && LA779_0<=RULE_OCTAL_INT)||(LA779_0>=RULE_HEX_INT && LA779_0<=RULE_SCIENTIFIC_INT)||LA779_0==RULE_STRING) ) {
            alt779=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 779, 0, input);
            throw nvae;
        }
        switch (alt779) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_111); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_111); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_53);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_202);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_53);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_53);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_202);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_202);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred243_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred249_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_137); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt792=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt792=1;
            }
            break;
        case Async:
            {
            int LA792_2 = input.LA(2);
            if ( (LA792_2==RULE_NO_LINE_TERMINATOR) && (synpred254_InternalN4JSParser())) {
                alt792=2;
            }
            else if ( (LA792_2==LeftParenthesis) && (synpred254_InternalN4JSParser())) {
                alt792=2;
            }
            else if ( (LA792_2==EqualsSign) ) {
                alt792=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 792, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt792=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 792, 0, input);
            throw nvae;
        }
        switch (alt792) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_51);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt790=2;
                int LA790_0 = input.LA(1);
                if ( (LA790_0==Colon) ) {
                    alt790=1;
                }
                switch (alt790) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_47);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_51);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt791=2;
                int LA791_0 = input.LA(1);
                if ( (LA791_0==Colon) ) {
                    alt791=1;
                }
                switch (alt791) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_137); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred262_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt795=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt795=1;
            }
            break;
        case Async:
            {
            int LA795_2 = input.LA(2);
            if ( (LA795_2==RULE_NO_LINE_TERMINATOR) && (synpred260_InternalN4JSParser())) {
                alt795=2;
            }
            else if ( (LA795_2==LeftParenthesis) && (synpred260_InternalN4JSParser())) {
                alt795=2;
            }
            else if ( (LA795_2==EqualsSign) ) {
                alt795=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 795, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt795=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 795, 0, input);
            throw nvae;
        }
        switch (alt795) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_51);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt793=2;
                int LA793_0 = input.LA(1);
                if ( (LA793_0==Colon) ) {
                    alt793=1;
                }
                switch (alt793) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_47);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_51);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt794=2;
                int LA794_0 = input.LA(1);
                if ( (LA794_0==Colon) ) {
                    alt794=1;
                }
                switch (alt794) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred265_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_137); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred266_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred268_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt798=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt798=1;
            }
            break;
        case Async:
            {
            int LA798_2 = input.LA(2);
            if ( (LA798_2==RULE_NO_LINE_TERMINATOR) && (synpred266_InternalN4JSParser())) {
                alt798=2;
            }
            else if ( (LA798_2==LeftParenthesis) && (synpred266_InternalN4JSParser())) {
                alt798=2;
            }
            else if ( (LA798_2==EqualsSign) ) {
                alt798=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 798, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt798=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 798, 0, input);
            throw nvae;
        }
        switch (alt798) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_51);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt796=2;
                int LA796_0 = input.LA(1);
                if ( (LA796_0==Colon) ) {
                    alt796=1;
                }
                switch (alt796) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_55); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_45);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_51);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt797=2;
                int LA797_0 = input.LA(1);
                if ( (LA797_0==Colon) ) {
                    alt797=1;
                }
                switch (alt797) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred269_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred271_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_137); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred272_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_47);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt801=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt801=1;
            }
            break;
        case Async:
            {
            int LA801_2 = input.LA(2);
            if ( (LA801_2==RULE_NO_LINE_TERMINATOR) && (synpred272_InternalN4JSParser())) {
                alt801=2;
            }
            else if ( (LA801_2==LeftParenthesis) && (synpred272_InternalN4JSParser())) {
                alt801=2;
            }
            else if ( (LA801_2==EqualsSign) ) {
                alt801=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 801, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt801=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 801, 0, input);
            throw nvae;
        }
        switch (alt801) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_51);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt799=2;
                int LA799_0 = input.LA(1);
                if ( (LA799_0==Colon) ) {
                    alt799=1;
                }
                switch (alt799) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_55); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_45);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_51);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt800=2;
                int LA800_0 = input.LA(1);
                if ( (LA800_0==Colon) ) {
                    alt800=1;
                }
                switch (alt800) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred276_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleLiteralAnnotationArgument();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominalNode();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred295_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominalNode();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred302_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop822:
        do {
            int alt822=2;
            int LA822_0 = input.LA(1);
            if ( ((LA822_0>=Protected && LA822_0<=Abstract)||LA822_0==External||(LA822_0>=Private && LA822_0<=Project)||LA822_0==Public||LA822_0==Static||LA822_0==Const) ) {
                alt822=1;
            }
            switch (alt822) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop822;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred303_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop823:
        do {
            int alt823=2;
            int LA823_0 = input.LA(1);
            if ( ((LA823_0>=Protected && LA823_0<=Abstract)||LA823_0==External||(LA823_0>=Private && LA823_0<=Project)||LA823_0==Public||LA823_0==Static||LA823_0==Const) ) {
                alt823=1;
            }
            switch (alt823) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_156);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop823;
            }
        } while (true);
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred304_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop824:
        do {
            int alt824=2;
            alt824 = dfa824.predict(input);
            switch (alt824) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop824;
            }
        } while (true);
        int alt825=2;
        int LA825_0 = input.LA(1);
        if ( (LA825_0==LessThanSign) ) {
            alt825=1;
        }
        switch (alt825) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_100);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt826=2;
        int LA826_0 = input.LA(1);
        if ( (LA826_0==Asterisk) ) {
            alt826=1;
        }
        else if ( ((LA826_0>=Intersection && LA826_0<=With)||(LA826_0>=For && LA826_0<=Var)||(LA826_0>=As && LA826_0<=Of)||LA826_0==LeftSquareBracket||LA826_0==RULE_IDENTIFIER||LA826_0==RULE_INT||LA826_0==RULE_DOUBLE||(LA826_0>=RULE_BINARY_INT && LA826_0<=RULE_OCTAL_INT)||(LA826_0>=RULE_HEX_INT && LA826_0<=RULE_SCIENTIFIC_INT)||LA826_0==RULE_STRING) ) {
            alt826=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 826, 0, input);
            throw nvae;
        }
        switch (alt826) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred305_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop827:
        do {
            int alt827=2;
            int LA827_0 = input.LA(1);
            if ( ((LA827_0>=Protected && LA827_0<=Abstract)||LA827_0==External||(LA827_0>=Private && LA827_0<=Project)||LA827_0==Public||LA827_0==Static||LA827_0==Const) ) {
                alt827=1;
            }
            switch (alt827) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop827;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop828:
        do {
            int alt828=2;
            int LA828_0 = input.LA(1);
            if ( ((LA828_0>=Protected && LA828_0<=Abstract)||LA828_0==External||(LA828_0>=Private && LA828_0<=Project)||LA828_0==Public||LA828_0==Static||LA828_0==Const) ) {
                alt828=1;
            }
            switch (alt828) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_156);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop828;
            }
        } while (true);
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop829:
        do {
            int alt829=2;
            alt829 = dfa829.predict(input);
            switch (alt829) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop829;
            }
        } while (true);
        int alt830=2;
        int LA830_0 = input.LA(1);
        if ( (LA830_0==LessThanSign) ) {
            alt830=1;
        }
        switch (alt830) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_100);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt831=2;
        int LA831_0 = input.LA(1);
        if ( (LA831_0==Asterisk) ) {
            alt831=1;
        }
        else if ( ((LA831_0>=Intersection && LA831_0<=With)||(LA831_0>=For && LA831_0<=Var)||(LA831_0>=As && LA831_0<=Of)||LA831_0==LeftSquareBracket||LA831_0==RULE_IDENTIFIER||LA831_0==RULE_INT||LA831_0==RULE_DOUBLE||(LA831_0>=RULE_BINARY_INT && LA831_0<=RULE_OCTAL_INT)||(LA831_0>=RULE_HEX_INT && LA831_0<=RULE_SCIENTIFIC_INT)||LA831_0==RULE_STRING) ) {
            alt831=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 831, 0, input);
            throw nvae;
        }
        switch (alt831) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop832:
        do {
            int alt832=2;
            int LA832_0 = input.LA(1);
            if ( ((LA832_0>=Protected && LA832_0<=Abstract)||LA832_0==External||(LA832_0>=Private && LA832_0<=Project)||LA832_0==Public||LA832_0==Static||LA832_0==Const) ) {
                alt832=1;
            }
            switch (alt832) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop832;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred310_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop833:
        do {
            int alt833=2;
            int LA833_0 = input.LA(1);
            if ( ((LA833_0>=Protected && LA833_0<=Abstract)||LA833_0==External||(LA833_0>=Private && LA833_0<=Project)||LA833_0==Public||LA833_0==Static||LA833_0==Const) ) {
                alt833=1;
            }
            switch (alt833) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_156);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop833;
            }
        } while (true);
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop834:
        do {
            int alt834=2;
            alt834 = dfa834.predict(input);
            switch (alt834) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop834;
            }
        } while (true);
        int alt835=2;
        int LA835_0 = input.LA(1);
        if ( (LA835_0==LessThanSign) ) {
            alt835=1;
        }
        switch (alt835) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt836=2;
        int LA836_0 = input.LA(1);
        if ( (LA836_0==Asterisk) ) {
            alt836=1;
        }
        else if ( ((LA836_0>=Intersection && LA836_0<=With)||(LA836_0>=For && LA836_0<=Var)||(LA836_0>=As && LA836_0<=Of)||LA836_0==LeftSquareBracket||LA836_0==RULE_IDENTIFIER||LA836_0==RULE_INT||LA836_0==RULE_DOUBLE||(LA836_0>=RULE_BINARY_INT && LA836_0<=RULE_OCTAL_INT)||(LA836_0>=RULE_HEX_INT && LA836_0<=RULE_SCIENTIFIC_INT)||LA836_0==RULE_STRING) ) {
            alt836=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 836, 0, input);
            throw nvae;
        }
        switch (alt836) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_47);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop837:
        do {
            int alt837=2;
            int LA837_0 = input.LA(1);
            if ( ((LA837_0>=Protected && LA837_0<=Abstract)||LA837_0==External||(LA837_0>=Private && LA837_0<=Project)||LA837_0==Public||LA837_0==Static||LA837_0==Const) ) {
                alt837=1;
            }
            switch (alt837) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop837;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred317_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop838:
        do {
            int alt838=2;
            int LA838_0 = input.LA(1);
            if ( ((LA838_0>=Protected && LA838_0<=Abstract)||LA838_0==External||(LA838_0>=Private && LA838_0<=Project)||LA838_0==Public||LA838_0==Static||LA838_0==Const) ) {
                alt838=1;
            }
            switch (alt838) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_156);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop838;
            }
        } while (true);
        match(input,Set,FOLLOW_201); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred320_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop839:
        do {
            int alt839=2;
            alt839 = dfa839.predict(input);
            switch (alt839) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop839;
            }
        } while (true);
        int alt840=2;
        int LA840_0 = input.LA(1);
        if ( (LA840_0==LessThanSign) ) {
            alt840=1;
        }
        switch (alt840) {
            case 1 :
                {
                pushFollow(FOLLOW_100);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt841=2;
        int LA841_0 = input.LA(1);
        if ( (LA841_0==Asterisk) ) {
            alt841=1;
        }
        else if ( ((LA841_0>=Intersection && LA841_0<=With)||(LA841_0>=For && LA841_0<=Var)||(LA841_0>=As && LA841_0<=Of)||LA841_0==LeftSquareBracket||LA841_0==RULE_IDENTIFIER||LA841_0==RULE_INT||LA841_0==RULE_DOUBLE||(LA841_0>=RULE_BINARY_INT && LA841_0<=RULE_OCTAL_INT)||(LA841_0>=RULE_HEX_INT && LA841_0<=RULE_SCIENTIFIC_INT)||LA841_0==RULE_STRING) ) {
            alt841=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 841, 0, input);
            throw nvae;
        }
        switch (alt841) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_98); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_98);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_47);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred342_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred345_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred346_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred347_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred348_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred349_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred350_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred351_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred352_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred353_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_116); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred354_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftParenthesis,FOLLOW_185); if (state.failed) return ;
        pushFollow(FOLLOW_70);
        ruleTAnonymousFormalParameterList(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_51); if (state.failed) return ;
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred355_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred356_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred357_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred359_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_88);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred361_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred362_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred363_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Get,FOLLOW_16); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred364_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_16); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred365_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt853=2;
        int LA853_0 = input.LA(1);
        if ( (LA853_0==LessThanSign) ) {
            alt853=1;
        }
        switch (alt853) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_184); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariable();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                loop852:
                do {
                    int alt852=2;
                    int LA852_0 = input.LA(1);
                    if ( (LA852_0==Comma) ) {
                        alt852=1;
                    }
                    switch (alt852) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_184); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_105);
                	    ruleTypeVariable();
                	    state._fsp--;
                	    if (state.failed) return ;
                	    }
                	    }
                	    }
                	    break;
                	default :
                	    break loop852;
                    }
                } while (true);
                match(input,GreaterThanSign,FOLLOW_16); if (state.failed) return ;
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_47);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred369_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final boolean synpred166_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA183 dfa183 = new DFA183(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA221 dfa221 = new DFA221(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA206 dfa206 = new DFA206(this);
    protected DFA243 dfa243 = new DFA243(this);
    protected DFA244 dfa244 = new DFA244(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA249 dfa249 = new DFA249(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA284 dfa284 = new DFA284(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA295 dfa295 = new DFA295(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA329 dfa329 = new DFA329(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA352 dfa352 = new DFA352(this);
    protected DFA353 dfa353 = new DFA353(this);
    protected DFA354 dfa354 = new DFA354(this);
    protected DFA355 dfa355 = new DFA355(this);
    protected DFA358 dfa358 = new DFA358(this);
    protected DFA359 dfa359 = new DFA359(this);
    protected DFA360 dfa360 = new DFA360(this);
    protected DFA361 dfa361 = new DFA361(this);
    protected DFA399 dfa399 = new DFA399(this);
    protected DFA398 dfa398 = new DFA398(this);
    protected DFA401 dfa401 = new DFA401(this);
    protected DFA400 dfa400 = new DFA400(this);
    protected DFA403 dfa403 = new DFA403(this);
    protected DFA402 dfa402 = new DFA402(this);
    protected DFA405 dfa405 = new DFA405(this);
    protected DFA404 dfa404 = new DFA404(this);
    protected DFA407 dfa407 = new DFA407(this);
    protected DFA409 dfa409 = new DFA409(this);
    protected DFA441 dfa441 = new DFA441(this);
    protected DFA442 dfa442 = new DFA442(this);
    protected DFA500 dfa500 = new DFA500(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA513 dfa513 = new DFA513(this);
    protected DFA509 dfa509 = new DFA509(this);
    protected DFA525 dfa525 = new DFA525(this);
    protected DFA521 dfa521 = new DFA521(this);
    protected DFA526 dfa526 = new DFA526(this);
    protected DFA530 dfa530 = new DFA530(this);
    protected DFA534 dfa534 = new DFA534(this);
    protected DFA538 dfa538 = new DFA538(this);
    protected DFA576 dfa576 = new DFA576(this);
    protected DFA582 dfa582 = new DFA582(this);
    protected DFA586 dfa586 = new DFA586(this);
    protected DFA587 dfa587 = new DFA587(this);
    protected DFA605 dfa605 = new DFA605(this);
    protected DFA617 dfa617 = new DFA617(this);
    protected DFA618 dfa618 = new DFA618(this);
    protected DFA620 dfa620 = new DFA620(this);
    protected DFA637 dfa637 = new DFA637(this);
    protected DFA643 dfa643 = new DFA643(this);
    protected DFA644 dfa644 = new DFA644(this);
    protected DFA652 dfa652 = new DFA652(this);
    protected DFA762 dfa762 = new DFA762(this);
    protected DFA765 dfa765 = new DFA765(this);
    protected DFA767 dfa767 = new DFA767(this);
    protected DFA770 dfa770 = new DFA770(this);
    protected DFA772 dfa772 = new DFA772(this);
    protected DFA774 dfa774 = new DFA774(this);
    protected DFA776 dfa776 = new DFA776(this);
    protected DFA778 dfa778 = new DFA778(this);
    protected DFA824 dfa824 = new DFA824(this);
    protected DFA829 dfa829 = new DFA829(this);
    protected DFA834 dfa834 = new DFA834(this);
    protected DFA839 dfa839 = new DFA839(this);
    static final String dfa_1s = "\127\uffff";
    static final String dfa_2s = "\1\4\14\0\1\uffff\2\0\107\uffff";
    static final String dfa_3s = "\1\u0095\14\0\1\uffff\2\0\107\uffff";
    static final String dfa_4s = "\15\uffff\1\5\2\uffff\1\10\1\11\77\uffff\1\1\1\2\1\3\1\4\1\6\1\7";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\uffff\1\15\1\16\107\uffff}>";
    static final String[] dfa_6s = {
            "\3\21\1\uffff\1\21\1\14\1\12\1\4\1\7\2\21\1\6\1\21\3\uffff\1\2\1\3\1\21\1\20\1\17\1\5\1\21\1\10\6\21\1\uffff\1\13\1\11\7\21\2\uffff\1\15\4\21\1\16\2\21\4\uffff\10\21\5\uffff\1\21\1\uffff\2\21\7\uffff\3\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\12\uffff\2\21\10\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);
    class DFA3 extends DFA {
        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "173:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) )? ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | ( ( ruleImportDeclaration )=>this_ImportDeclaration_6= ruleImportDeclaration ) | this_ExportDeclaration_7= ruleExportDeclaration | this_RootStatement_8= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 12 cases */ }
                        else if ( (LA3_0==Enum) && (synpred5_InternalN4JSParser())) {s = 13;}
                        else if ( (LA3_0==Type) ) {s = 14;}
                        else if ( (LA3_0==Import) ) {s = 15;}
                        else if ( (LA3_0==Export) ) {s = 16;}
                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=True)||(LA3_0>=Void && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||(LA3_0>=HyphenMinusHyphenMinus && LA3_0<=SolidusEqualsSign)||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_INT||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_BINARY_INT && LA3_0<=RULE_SCIENTIFIC_INT)||LA3_0==RULE_STRING) ) {s = 17;}
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA3_12 = input.LA(1);
                        int index3_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA3_14 = input.LA(1);
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA3_15 = input.LA(1);
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalN4JSParser()) ) {s = 86;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\27\uffff";
    static final String dfa_8s = "\1\11\1\uffff\10\11\6\uffff\7\11";
    static final String dfa_9s = "\1\152\1\uffff\7\63\1\56\6\uffff\7\56";
    static final String dfa_10s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\1\7\7\uffff";
    static final String dfa_11s = "\1\0\1\uffff\1\5\1\15\1\6\1\11\1\1\1\12\1\2\1\7\6\uffff\1\13\1\16\1\3\1\10\1\14\1\17\1\4}>";
    static final String[] dfa_12s = {
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\1\uffff\1\17\1\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\66\uffff\1\1",
            "",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\4\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\7\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15",
            "\1\14\1\12\1\22\1\25\2\uffff\1\24\4\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\7\uffff\1\13\1\11\11\uffff\1\15"
    };
    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);
    class DFA10 extends DFA {
        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "610:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) )? ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | this_ExportDeclaration_6= ruleExportDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_0 = input.LA(1);
                        int index10_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}
                        else if ( (LA10_0==Private) ) {s = 2;}
                        else if ( (LA10_0==Project) ) {s = 3;}
                        else if ( (LA10_0==Protected) ) {s = 4;}
                        else if ( (LA10_0==Public) ) {s = 5;}
                        else if ( (LA10_0==External) ) {s = 6;}
                        else if ( (LA10_0==Abstract) ) {s = 7;}
                        else if ( (LA10_0==Static) ) {s = 8;}
                        else if ( (LA10_0==Const) ) {s = 9;}
                        else if ( (LA10_0==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_0==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_0==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_0==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_0==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_0==Export) ) {s = 15;}
                        input.seek(index10_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_6 = input.LA(1);
                        int index10_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_6==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_6==Private) ) {s = 2;}
                        else if ( (LA10_6==Project) ) {s = 3;}
                        else if ( (LA10_6==Protected) ) {s = 4;}
                        else if ( (LA10_6==Public) ) {s = 5;}
                        else if ( (LA10_6==External) ) {s = 6;}
                        else if ( (LA10_6==Abstract) ) {s = 7;}
                        else if ( (LA10_6==Static) ) {s = 8;}
                        else if ( (LA10_6==Const) ) {s = 9;}
                        else if ( (LA10_6==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_6==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_6==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_6==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index10_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA10_8 = input.LA(1);
                        int index10_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_8==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_8==Private) ) {s = 2;}
                        else if ( (LA10_8==Project) ) {s = 3;}
                        else if ( (LA10_8==Protected) ) {s = 4;}
                        else if ( (LA10_8==Public) ) {s = 5;}
                        else if ( (LA10_8==External) ) {s = 6;}
                        else if ( (LA10_8==Abstract) ) {s = 7;}
                        else if ( (LA10_8==Static) ) {s = 8;}
                        else if ( (LA10_8==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_8==Const) ) {s = 9;}
                        else if ( (LA10_8==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_8==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_8==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA10_18 = input.LA(1);
                        int index10_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_18==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_18==Private) ) {s = 16;}
                        else if ( (LA10_18==Project) ) {s = 17;}
                        else if ( (LA10_18==Protected) ) {s = 18;}
                        else if ( (LA10_18==Public) ) {s = 19;}
                        else if ( (LA10_18==External) ) {s = 20;}
                        else if ( (LA10_18==Abstract) ) {s = 21;}
                        else if ( (LA10_18==Static) ) {s = 22;}
                        else if ( (LA10_18==Const) ) {s = 9;}
                        else if ( (LA10_18==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_18==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_18==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA10_22 = input.LA(1);
                        int index10_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_22==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_22==Private) ) {s = 16;}
                        else if ( (LA10_22==Project) ) {s = 17;}
                        else if ( (LA10_22==Protected) ) {s = 18;}
                        else if ( (LA10_22==Public) ) {s = 19;}
                        else if ( (LA10_22==External) ) {s = 20;}
                        else if ( (LA10_22==Abstract) ) {s = 21;}
                        else if ( (LA10_22==Static) ) {s = 22;}
                        else if ( (LA10_22==Const) ) {s = 9;}
                        else if ( (LA10_22==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_22==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_22==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA10_2 = input.LA(1);
                        int index10_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_2==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_2==Private) ) {s = 2;}
                        else if ( (LA10_2==Project) ) {s = 3;}
                        else if ( (LA10_2==Protected) ) {s = 4;}
                        else if ( (LA10_2==Public) ) {s = 5;}
                        else if ( (LA10_2==External) ) {s = 6;}
                        else if ( (LA10_2==Abstract) ) {s = 7;}
                        else if ( (LA10_2==Static) ) {s = 8;}
                        else if ( (LA10_2==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_2==Const) ) {s = 9;}
                        else if ( (LA10_2==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_2==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_2==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA10_4 = input.LA(1);
                        int index10_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_4==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_4==Private) ) {s = 2;}
                        else if ( (LA10_4==Project) ) {s = 3;}
                        else if ( (LA10_4==Protected) ) {s = 4;}
                        else if ( (LA10_4==Public) ) {s = 5;}
                        else if ( (LA10_4==External) ) {s = 6;}
                        else if ( (LA10_4==Abstract) ) {s = 7;}
                        else if ( (LA10_4==Static) ) {s = 8;}
                        else if ( (LA10_4==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_4==Const) ) {s = 9;}
                        else if ( (LA10_4==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_4==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_4==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA10_9 = input.LA(1);
                        int index10_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_9==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_9==Private) ) {s = 16;}
                        else if ( (LA10_9==Project) ) {s = 17;}
                        else if ( (LA10_9==Protected) ) {s = 18;}
                        else if ( (LA10_9==Public) ) {s = 19;}
                        else if ( (LA10_9==External) ) {s = 20;}
                        else if ( (LA10_9==Abstract) ) {s = 21;}
                        else if ( (LA10_9==Static) ) {s = 22;}
                        else if ( (LA10_9==Const) ) {s = 9;}
                        else if ( (LA10_9==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_9==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_9==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index10_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA10_19 = input.LA(1);
                        int index10_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_19==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_19==Private) ) {s = 16;}
                        else if ( (LA10_19==Project) ) {s = 17;}
                        else if ( (LA10_19==Protected) ) {s = 18;}
                        else if ( (LA10_19==Public) ) {s = 19;}
                        else if ( (LA10_19==External) ) {s = 20;}
                        else if ( (LA10_19==Abstract) ) {s = 21;}
                        else if ( (LA10_19==Static) ) {s = 22;}
                        else if ( (LA10_19==Const) ) {s = 9;}
                        else if ( (LA10_19==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_19==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_19==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA10_5 = input.LA(1);
                        int index10_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_5==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_5==Private) ) {s = 2;}
                        else if ( (LA10_5==Project) ) {s = 3;}
                        else if ( (LA10_5==Protected) ) {s = 4;}
                        else if ( (LA10_5==Public) ) {s = 5;}
                        else if ( (LA10_5==External) ) {s = 6;}
                        else if ( (LA10_5==Abstract) ) {s = 7;}
                        else if ( (LA10_5==Static) ) {s = 8;}
                        else if ( (LA10_5==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_5==Const) ) {s = 9;}
                        else if ( (LA10_5==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_5==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_5==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA10_7 = input.LA(1);
                        int index10_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_7==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_7==Private) ) {s = 2;}
                        else if ( (LA10_7==Project) ) {s = 3;}
                        else if ( (LA10_7==Protected) ) {s = 4;}
                        else if ( (LA10_7==Public) ) {s = 5;}
                        else if ( (LA10_7==External) ) {s = 6;}
                        else if ( (LA10_7==Abstract) ) {s = 7;}
                        else if ( (LA10_7==Static) ) {s = 8;}
                        else if ( (LA10_7==Const) ) {s = 9;}
                        else if ( (LA10_7==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_7==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_7==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_7==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index10_7);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA10_16 = input.LA(1);
                        int index10_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_16==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_16==Private) ) {s = 16;}
                        else if ( (LA10_16==Project) ) {s = 17;}
                        else if ( (LA10_16==Protected) ) {s = 18;}
                        else if ( (LA10_16==Public) ) {s = 19;}
                        else if ( (LA10_16==External) ) {s = 20;}
                        else if ( (LA10_16==Abstract) ) {s = 21;}
                        else if ( (LA10_16==Static) ) {s = 22;}
                        else if ( (LA10_16==Const) ) {s = 9;}
                        else if ( (LA10_16==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_16==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_16==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA10_20 = input.LA(1);
                        int index10_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_20==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_20==Private) ) {s = 16;}
                        else if ( (LA10_20==Project) ) {s = 17;}
                        else if ( (LA10_20==Protected) ) {s = 18;}
                        else if ( (LA10_20==Public) ) {s = 19;}
                        else if ( (LA10_20==External) ) {s = 20;}
                        else if ( (LA10_20==Abstract) ) {s = 21;}
                        else if ( (LA10_20==Static) ) {s = 22;}
                        else if ( (LA10_20==Const) ) {s = 9;}
                        else if ( (LA10_20==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_20==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_20==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index10_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA10_3 = input.LA(1);
                        int index10_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_3==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_3==Private) ) {s = 2;}
                        else if ( (LA10_3==Project) ) {s = 3;}
                        else if ( (LA10_3==Protected) ) {s = 4;}
                        else if ( (LA10_3==Public) ) {s = 5;}
                        else if ( (LA10_3==External) ) {s = 6;}
                        else if ( (LA10_3==Abstract) ) {s = 7;}
                        else if ( (LA10_3==Static) ) {s = 8;}
                        else if ( (LA10_3==Const) ) {s = 9;}
                        else if ( (LA10_3==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_3==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_3==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA10_3==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        input.seek(index10_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA10_17 = input.LA(1);
                        int index10_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_17==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_17==Private) ) {s = 16;}
                        else if ( (LA10_17==Project) ) {s = 17;}
                        else if ( (LA10_17==Protected) ) {s = 18;}
                        else if ( (LA10_17==Public) ) {s = 19;}
                        else if ( (LA10_17==External) ) {s = 20;}
                        else if ( (LA10_17==Abstract) ) {s = 21;}
                        else if ( (LA10_17==Static) ) {s = 22;}
                        else if ( (LA10_17==Const) ) {s = 9;}
                        else if ( (LA10_17==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_17==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA10_17==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        input.seek(index10_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA10_21 = input.LA(1);
                        int index10_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA10_21==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA10_21==Private) ) {s = 16;}
                        else if ( (LA10_21==Project) ) {s = 17;}
                        else if ( (LA10_21==Protected) ) {s = 18;}
                        else if ( (LA10_21==Public) ) {s = 19;}
                        else if ( (LA10_21==External) ) {s = 20;}
                        else if ( (LA10_21==Abstract) ) {s = 21;}
                        else if ( (LA10_21==Static) ) {s = 22;}
                        else if ( (LA10_21==Const) ) {s = 9;}
                        else if ( (LA10_21==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA10_21==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA10_21==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index10_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\1\12\1\uffff\1\7\1\2\1\13\1\14\1\3\1\17\1\6\1\15\6\uffff\1\0\1\4\1\10\1\16\1\1\1\5\1\11}>";
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    class DFA11 extends DFA {
        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_13;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "796:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( norm1_BindingIdentifier ) )? ) )=>this_N4NamespaceDeclaration_1= norm1_N4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( norm1_BindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= norm1_N4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( norm1_BindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= norm1_N4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( norm1_BindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= norm1_N4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( norm1_BindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= norm1_N4TypeAliasDeclaration ) | this_ExportDeclaration_6= ruleExportDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_16 = input.LA(1);
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_16==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_16==Private) ) {s = 16;}
                        else if ( (LA11_16==Project) ) {s = 17;}
                        else if ( (LA11_16==Protected) ) {s = 18;}
                        else if ( (LA11_16==Public) ) {s = 19;}
                        else if ( (LA11_16==External) ) {s = 20;}
                        else if ( (LA11_16==Abstract) ) {s = 21;}
                        else if ( (LA11_16==Static) ) {s = 22;}
                        else if ( (LA11_16==Const) ) {s = 9;}
                        else if ( (LA11_16==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_16==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_16==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_20 = input.LA(1);
                        int index11_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_20==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_20==Private) ) {s = 16;}
                        else if ( (LA11_20==Project) ) {s = 17;}
                        else if ( (LA11_20==Protected) ) {s = 18;}
                        else if ( (LA11_20==Public) ) {s = 19;}
                        else if ( (LA11_20==External) ) {s = 20;}
                        else if ( (LA11_20==Abstract) ) {s = 21;}
                        else if ( (LA11_20==Static) ) {s = 22;}
                        else if ( (LA11_20==Const) ) {s = 9;}
                        else if ( (LA11_20==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_20==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_20==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        input.seek(index11_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_3 = input.LA(1);
                        int index11_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_3==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_3==Private) ) {s = 2;}
                        else if ( (LA11_3==Project) ) {s = 3;}
                        else if ( (LA11_3==Protected) ) {s = 4;}
                        else if ( (LA11_3==Public) ) {s = 5;}
                        else if ( (LA11_3==External) ) {s = 6;}
                        else if ( (LA11_3==Abstract) ) {s = 7;}
                        else if ( (LA11_3==Static) ) {s = 8;}
                        else if ( (LA11_3==Const) ) {s = 9;}
                        else if ( (LA11_3==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_3==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_3==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_3==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        input.seek(index11_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_6 = input.LA(1);
                        int index11_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_6==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_6==Private) ) {s = 2;}
                        else if ( (LA11_6==Project) ) {s = 3;}
                        else if ( (LA11_6==Protected) ) {s = 4;}
                        else if ( (LA11_6==Public) ) {s = 5;}
                        else if ( (LA11_6==External) ) {s = 6;}
                        else if ( (LA11_6==Abstract) ) {s = 7;}
                        else if ( (LA11_6==Static) ) {s = 8;}
                        else if ( (LA11_6==Const) ) {s = 9;}
                        else if ( (LA11_6==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_6==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_6==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_6==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        input.seek(index11_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_17 = input.LA(1);
                        int index11_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_17==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_17==Private) ) {s = 16;}
                        else if ( (LA11_17==Project) ) {s = 17;}
                        else if ( (LA11_17==Protected) ) {s = 18;}
                        else if ( (LA11_17==Public) ) {s = 19;}
                        else if ( (LA11_17==External) ) {s = 20;}
                        else if ( (LA11_17==Abstract) ) {s = 21;}
                        else if ( (LA11_17==Static) ) {s = 22;}
                        else if ( (LA11_17==Const) ) {s = 9;}
                        else if ( (LA11_17==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_17==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_17==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        input.seek(index11_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_21 = input.LA(1);
                        int index11_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_21==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_21==Private) ) {s = 16;}
                        else if ( (LA11_21==Project) ) {s = 17;}
                        else if ( (LA11_21==Protected) ) {s = 18;}
                        else if ( (LA11_21==Public) ) {s = 19;}
                        else if ( (LA11_21==External) ) {s = 20;}
                        else if ( (LA11_21==Abstract) ) {s = 21;}
                        else if ( (LA11_21==Static) ) {s = 22;}
                        else if ( (LA11_21==Const) ) {s = 9;}
                        else if ( (LA11_21==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_21==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_21==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_8 = input.LA(1);
                        int index11_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_8==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_8==Private) ) {s = 2;}
                        else if ( (LA11_8==Project) ) {s = 3;}
                        else if ( (LA11_8==Protected) ) {s = 4;}
                        else if ( (LA11_8==Public) ) {s = 5;}
                        else if ( (LA11_8==External) ) {s = 6;}
                        else if ( (LA11_8==Abstract) ) {s = 7;}
                        else if ( (LA11_8==Static) ) {s = 8;}
                        else if ( (LA11_8==Const) ) {s = 9;}
                        else if ( (LA11_8==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_8==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_8==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_8==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA11_2 = input.LA(1);
                        int index11_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_2==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_2==Private) ) {s = 2;}
                        else if ( (LA11_2==Project) ) {s = 3;}
                        else if ( (LA11_2==Protected) ) {s = 4;}
                        else if ( (LA11_2==Public) ) {s = 5;}
                        else if ( (LA11_2==External) ) {s = 6;}
                        else if ( (LA11_2==Abstract) ) {s = 7;}
                        else if ( (LA11_2==Static) ) {s = 8;}
                        else if ( (LA11_2==Const) ) {s = 9;}
                        else if ( (LA11_2==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_2==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_2==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_2==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        input.seek(index11_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA11_18 = input.LA(1);
                        int index11_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_18==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_18==Private) ) {s = 16;}
                        else if ( (LA11_18==Project) ) {s = 17;}
                        else if ( (LA11_18==Protected) ) {s = 18;}
                        else if ( (LA11_18==Public) ) {s = 19;}
                        else if ( (LA11_18==External) ) {s = 20;}
                        else if ( (LA11_18==Abstract) ) {s = 21;}
                        else if ( (LA11_18==Static) ) {s = 22;}
                        else if ( (LA11_18==Const) ) {s = 9;}
                        else if ( (LA11_18==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_18==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_18==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA11_22 = input.LA(1);
                        int index11_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_22==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_22==Private) ) {s = 16;}
                        else if ( (LA11_22==Project) ) {s = 17;}
                        else if ( (LA11_22==Protected) ) {s = 18;}
                        else if ( (LA11_22==Public) ) {s = 19;}
                        else if ( (LA11_22==External) ) {s = 20;}
                        else if ( (LA11_22==Abstract) ) {s = 21;}
                        else if ( (LA11_22==Static) ) {s = 22;}
                        else if ( (LA11_22==Const) ) {s = 9;}
                        else if ( (LA11_22==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_22==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_22==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA11_0 = input.LA(1);
                        int index11_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_0==CommercialAt) && (synpred16_InternalN4JSParser())) {s = 1;}
                        else if ( (LA11_0==Private) ) {s = 2;}
                        else if ( (LA11_0==Project) ) {s = 3;}
                        else if ( (LA11_0==Protected) ) {s = 4;}
                        else if ( (LA11_0==Public) ) {s = 5;}
                        else if ( (LA11_0==External) ) {s = 6;}
                        else if ( (LA11_0==Abstract) ) {s = 7;}
                        else if ( (LA11_0==Static) ) {s = 8;}
                        else if ( (LA11_0==Const) ) {s = 9;}
                        else if ( (LA11_0==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_0==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_0==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_0==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_0==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_0==Export) ) {s = 15;}
                        input.seek(index11_0);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA11_4 = input.LA(1);
                        int index11_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_4==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_4==Private) ) {s = 2;}
                        else if ( (LA11_4==Project) ) {s = 3;}
                        else if ( (LA11_4==Protected) ) {s = 4;}
                        else if ( (LA11_4==Public) ) {s = 5;}
                        else if ( (LA11_4==External) ) {s = 6;}
                        else if ( (LA11_4==Abstract) ) {s = 7;}
                        else if ( (LA11_4==Static) ) {s = 8;}
                        else if ( (LA11_4==Const) ) {s = 9;}
                        else if ( (LA11_4==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_4==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_4==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_4==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_4);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA11_5 = input.LA(1);
                        int index11_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_5==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_5==Private) ) {s = 2;}
                        else if ( (LA11_5==Project) ) {s = 3;}
                        else if ( (LA11_5==Protected) ) {s = 4;}
                        else if ( (LA11_5==Public) ) {s = 5;}
                        else if ( (LA11_5==External) ) {s = 6;}
                        else if ( (LA11_5==Abstract) ) {s = 7;}
                        else if ( (LA11_5==Static) ) {s = 8;}
                        else if ( (LA11_5==Const) ) {s = 9;}
                        else if ( (LA11_5==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_5==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_5==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_5==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        input.seek(index11_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA11_9 = input.LA(1);
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_9==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_9==Private) ) {s = 16;}
                        else if ( (LA11_9==Project) ) {s = 17;}
                        else if ( (LA11_9==Protected) ) {s = 18;}
                        else if ( (LA11_9==Public) ) {s = 19;}
                        else if ( (LA11_9==External) ) {s = 20;}
                        else if ( (LA11_9==Abstract) ) {s = 21;}
                        else if ( (LA11_9==Static) ) {s = 22;}
                        else if ( (LA11_9==Const) ) {s = 9;}
                        else if ( (LA11_9==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_9==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_9==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA11_19 = input.LA(1);
                        int index11_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_19==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        else if ( (LA11_19==Private) ) {s = 16;}
                        else if ( (LA11_19==Project) ) {s = 17;}
                        else if ( (LA11_19==Protected) ) {s = 18;}
                        else if ( (LA11_19==Public) ) {s = 19;}
                        else if ( (LA11_19==External) ) {s = 20;}
                        else if ( (LA11_19==Abstract) ) {s = 21;}
                        else if ( (LA11_19==Static) ) {s = 22;}
                        else if ( (LA11_19==Const) ) {s = 9;}
                        else if ( (LA11_19==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_19==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_19==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        input.seek(index11_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA11_7 = input.LA(1);
                        int index11_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA11_7==Enum) && (synpred20_InternalN4JSParser())) {s = 13;}
                        else if ( (LA11_7==Private) ) {s = 2;}
                        else if ( (LA11_7==Project) ) {s = 3;}
                        else if ( (LA11_7==Protected) ) {s = 4;}
                        else if ( (LA11_7==Public) ) {s = 5;}
                        else if ( (LA11_7==External) ) {s = 6;}
                        else if ( (LA11_7==Abstract) ) {s = 7;}
                        else if ( (LA11_7==Static) ) {s = 8;}
                        else if ( (LA11_7==Const) ) {s = 9;}
                        else if ( (LA11_7==Interface) && (synpred19_InternalN4JSParser())) {s = 12;}
                        else if ( (LA11_7==Namespace) && (synpred17_InternalN4JSParser())) {s = 10;}
                        else if ( (LA11_7==Type) && (synpred21_InternalN4JSParser())) {s = 14;}
                        else if ( (LA11_7==Class) && (synpred18_InternalN4JSParser())) {s = 11;}
                        input.seek(index11_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\26\uffff";
    static final String dfa_15s = "\1\11\2\uffff\10\11\4\uffff\7\11";
    static final String dfa_16s = "\1\63\2\uffff\7\63\1\56\4\uffff\7\56";
    static final String dfa_17s = "\1\uffff\1\1\1\2\10\uffff\1\3\1\4\1\5\1\6\7\uffff";
    static final String dfa_18s = "\26\uffff}>";
    static final String[] dfa_19s = {
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "",
            "",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            "",
            "",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15"
    };
    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);
    class DFA26 extends DFA {
        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "1012:3: ( ( () this_ExportDeclarationImpl_2= ruleExportDeclarationImpl[$current] ) | ( () this_ImportDeclarationImpl_4= ruleImportDeclarationImpl[$current] ) | ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_7= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_8= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeParameters_14= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_15= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeParameters_21= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_22= ruleInterfaceExtendsList[$current] )? ) ) this_Members_23= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_25_0= ruleN4Modifier ) )* otherlv_26= Enum ( (lv_name_27_0= ruleBindingIdentifier ) ) otherlv_28= LeftCurlyBracket ( (lv_literals_29_0= ruleN4EnumLiteral ) ) (otherlv_30= Comma ( (lv_literals_31_0= ruleN4EnumLiteral ) ) )* otherlv_32= RightCurlyBracket ) | ( () ( (lv_declaredModifiers_34_0= ruleN4ModifierWithoutConst ) )* otherlv_35= Type ( (lv_name_36_0= ruleBindingIdentifier ) ) (this_TypeParameters_37= ruleTypeParameters[$current] )? otherlv_38= EqualsSign ( (lv_declaredTypeRefNode_39_0= ruleTypeReferenceNode ) ) ) )";
        }
    }
    static final String dfa_20s = "\13\uffff";
    static final String dfa_21s = "\11\11\2\uffff";
    static final String dfa_22s = "\11\44\2\uffff";
    static final String dfa_23s = "\11\uffff\1\1\1\2";
    static final String dfa_24s = "\13\uffff}>";
    static final String[] dfa_25s = {
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);
    class DFA21 extends DFA {
        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "1124:5: ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeParameters_14= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_15= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeParameters_21= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_22= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_26s = "\103\uffff";
    static final String dfa_27s = "\1\4\10\0\1\uffff\3\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_28s = "\1\u0095\10\0\1\uffff\3\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_29s = "\11\uffff\1\1\3\uffff\1\1\3\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_30s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\13\1\uffff\1\14\1\15\1\16\1\uffff\1\17\60\uffff}>";
    static final String[] dfa_31s = {
            "\3\23\1\uffff\1\23\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\1\23\1\uffff\1\23\1\5\1\uffff\1\10\1\uffff\2\23\1\17\1\23\2\uffff\1\13\1\11\2\23\1\uffff\1\23\1\uffff\2\23\2\uffff\1\15\4\23\1\16\1\23\6\uffff\1\23\1\22\3\23\1\uffff\1\21\5\uffff\1\23\1\uffff\2\23\7\uffff\1\23\3\uffff\1\23\2\uffff\1\23\2\uffff\1\23\2\uffff\1\23\1\uffff\1\23\1\uffff\1\23\2\uffff\1\23\3\uffff\1\1\1\23\2\uffff\1\23\2\uffff\1\23\12\uffff\2\23\10\uffff\1\23\1\uffff\1\23\2\uffff\1\23\1\uffff\5\23\3\uffff\1\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);
    class DFA28 extends DFA {
        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "1684:5: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Namespace | Class | Interface | Enum | Type | Async | Function | Var | Let )=> (lv_exportedElement_9_0= ruleExportableElement ) ) | ( ( (lv_defaultExportedExpression_10_0= norm1_AssignmentExpression ) ) ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_0 = input.LA(1);
                        int index28_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA28_0==CommercialAt) ) {s = 1;}
                        else if ( (LA28_0==Private) ) {s = 2;}
                        else if ( (LA28_0==Project) ) {s = 3;}
                        else if ( (LA28_0==Protected) ) {s = 4;}
                        else if ( (LA28_0==Public) ) {s = 5;}
                        else if ( (LA28_0==External) ) {s = 6;}
                        else if ( (LA28_0==Abstract) ) {s = 7;}
                        else if ( (LA28_0==Static) ) {s = 8;}
                        else if ( (LA28_0==Const) && (synpred26_InternalN4JSParser())) {s = 9;}
                        else if ( (LA28_0==Namespace) ) {s = 10;}
                        else if ( (LA28_0==Class) ) {s = 11;}
                        else if ( (LA28_0==Interface) ) {s = 12;}
                        else if ( (LA28_0==Enum) && (synpred26_InternalN4JSParser())) {s = 13;}
                        else if ( (LA28_0==Type) ) {s = 14;}
                        else if ( (LA28_0==Async) ) {s = 15;}
                        else if ( (LA28_0==Function) ) {s = 16;}
                        else if ( (LA28_0==Var) && (synpred26_InternalN4JSParser())) {s = 17;}
                        else if ( (LA28_0==Let) ) {s = 18;}
                        else if ( ((LA28_0>=Intersection && LA28_0<=Implements)||LA28_0==Promisify||LA28_0==Delete||LA28_0==Import||(LA28_0>=Target && LA28_0<=Typeof)||LA28_0==Await||(LA28_0>=False && LA28_0<=Super)||LA28_0==Union||(LA28_0>=Yield && LA28_0<=This)||(LA28_0>=From && LA28_0<=True)||LA28_0==Void||LA28_0==Get||(LA28_0>=New && LA28_0<=Set)||LA28_0==PlusSignPlusSign||(LA28_0>=HyphenMinusHyphenMinus && LA28_0<=SolidusEqualsSign)||LA28_0==As||LA28_0==Of||LA28_0==ExclamationMark||LA28_0==LeftParenthesis||LA28_0==PlusSign||LA28_0==HyphenMinus||LA28_0==Solidus||LA28_0==LessThanSign||LA28_0==LeftSquareBracket||LA28_0==LeftCurlyBracket||LA28_0==Tilde||(LA28_0>=RULE_TEMPLATE_HEAD && LA28_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA28_0==RULE_IDENTIFIER||LA28_0==RULE_INT||LA28_0==RULE_DOUBLE||(LA28_0>=RULE_BINARY_INT && LA28_0<=RULE_SCIENTIFIC_INT)||LA28_0==RULE_STRING) ) {s = 19;}
                        input.seek(index28_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_1 = input.LA(1);
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_2 = input.LA(1);
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_3 = input.LA(1);
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_4 = input.LA(1);
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_5 = input.LA(1);
                        int index28_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA28_6 = input.LA(1);
                        int index28_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA28_7 = input.LA(1);
                        int index28_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA28_8 = input.LA(1);
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA28_10 = input.LA(1);
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA28_11 = input.LA(1);
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA28_12 = input.LA(1);
                        int index28_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA28_14 = input.LA(1);
                        int index28_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA28_15 = input.LA(1);
                        int index28_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA28_16 = input.LA(1);
                        int index28_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA28_18 = input.LA(1);
                        int index28_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index28_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\141\uffff";
    static final String dfa_33s = "\22\uffff\12\21\105\uffff";
    static final String dfa_34s = "\1\11\1\uffff\7\11\1\4\10\uffff\7\11\1\20\2\4\7\11\76\uffff";
    static final String dfa_35s = "\1\152\1\uffff\7\101\1\u0086\10\uffff\12\u0099\7\101\76\uffff";
    static final String dfa_36s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\2\7\1\10\21\uffff\1\7\40\4\35\2";
    static final String dfa_37s = "\1\13\1\uffff\1\30\1\3\1\11\1\16\1\25\1\1\1\7\1\21\10\uffff\1\27\1\5\1\12\1\17\1\0\1\6\1\14\1\23\1\24\1\15\1\20\1\26\1\2\1\10\1\22\1\31\1\4\76\uffff}>";
    static final String[] dfa_38s = {
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21\50\uffff\1\1",
            "",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\3\21\1\uffff\1\21\1\32\1\33\1\24\1\27\2\uffff\1\26\1\20\3\uffff\1\22\1\23\3\uffff\1\25\1\uffff\1\30\1\uffff\1\21\1\uffff\1\31\1\21\2\uffff\1\13\1\11\3\uffff\1\21\1\uffff\2\21\2\uffff\1\15\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\1\uffff\1\21\20\uffff\1\21\3\uffff\1\21\23\uffff\2\21\2\uffff\1\21\27\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\46\uffff\1\21\1\uffff\1\21",
            "\1\20\117\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\22\uffff\1\43\23\uffff\1\21\1\uffff\1\21",
            "\1\65\1\60\1\72\1\uffff\1\67\1\73\1\100\1\75\1\54\2\uffff\1\53\2\uffff\1\102\1\uffff\1\74\1\52\3\uffff\1\76\1\uffff\1\55\1\uffff\1\62\1\uffff\1\71\1\70\7\uffff\1\64\1\uffff\1\46\1\66\3\uffff\1\57\3\uffff\1\63\7\uffff\1\47\1\51\1\uffff\1\77\1\50\22\uffff\1\56\3\uffff\1\61\11\uffff\1\21\3\uffff\2\21\1\101\1\21\6\uffff\1\103\1\uffff\1\21\1\44\24\uffff\1\45\20\uffff\1\21\1\uffff\1\21",
            "\1\124\1\117\1\131\1\uffff\1\126\1\132\1\137\1\134\1\113\2\uffff\1\112\4\uffff\1\133\1\111\3\uffff\1\135\1\uffff\1\114\1\uffff\1\121\1\uffff\1\130\1\127\7\uffff\1\123\1\uffff\1\105\1\125\3\uffff\1\116\3\uffff\1\122\7\uffff\1\106\1\110\1\uffff\1\136\1\107\22\uffff\1\115\3\uffff\1\120\11\uffff\1\21\3\uffff\2\21\1\uffff\1\21\6\uffff\1\140\1\uffff\1\21\25\uffff\1\104\20\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);
    class DFA34 extends DFA {
        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "1924:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedExportableElement_0= ruleAnnotatedExportableElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) )? ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_6= ruleFunctionDeclaration ) | this_ExportedVariableStatement_7= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_22 = input.LA(1);
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_22==EOF||LA34_22==Let||LA34_22==Var||LA34_22==Comma||(LA34_22>=Colon && LA34_22<=Semicolon)||LA34_22==EqualsSign||LA34_22==RightCurlyBracket||LA34_22==RULE_ML_COMMENT||LA34_22==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_22==Const) ) {s = 9;}
                        else if ( (LA34_22==Private) ) {s = 28;}
                        else if ( (LA34_22==Project) ) {s = 29;}
                        else if ( (LA34_22==Protected) ) {s = 30;}
                        else if ( (LA34_22==Public) ) {s = 31;}
                        else if ( (LA34_22==External) ) {s = 32;}
                        else if ( (LA34_22==Abstract) ) {s = 33;}
                        else if ( (LA34_22==Static) ) {s = 34;}
                        else if ( (LA34_22==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_22==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_22==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_22==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_22==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_22==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_7 = input.LA(1);
                        int index34_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_7==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_7==Private) ) {s = 2;}
                        else if ( (LA34_7==Project) ) {s = 3;}
                        else if ( (LA34_7==Protected) ) {s = 4;}
                        else if ( (LA34_7==Public) ) {s = 5;}
                        else if ( (LA34_7==External) ) {s = 6;}
                        else if ( (LA34_7==Abstract) ) {s = 7;}
                        else if ( (LA34_7==Static) ) {s = 8;}
                        else if ( (LA34_7==Const) ) {s = 9;}
                        else if ( (LA34_7==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_7==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_7==Let||LA34_7==Var) ) {s = 17;}
                        else if ( (LA34_7==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_7==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_7==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_7==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_30 = input.LA(1);
                        int index34_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_30==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_30==Private) ) {s = 28;}
                        else if ( (LA34_30==Project) ) {s = 29;}
                        else if ( (LA34_30==Protected) ) {s = 30;}
                        else if ( (LA34_30==Public) ) {s = 31;}
                        else if ( (LA34_30==External) ) {s = 32;}
                        else if ( (LA34_30==Abstract) ) {s = 33;}
                        else if ( (LA34_30==Static) ) {s = 34;}
                        else if ( (LA34_30==Const) ) {s = 9;}
                        else if ( (LA34_30==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_30==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_30==Let||LA34_30==Var) ) {s = 17;}
                        else if ( (LA34_30==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_30==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_30==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_30);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_3 = input.LA(1);
                        int index34_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_3==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_3==Private) ) {s = 2;}
                        else if ( (LA34_3==Project) ) {s = 3;}
                        else if ( (LA34_3==Protected) ) {s = 4;}
                        else if ( (LA34_3==Public) ) {s = 5;}
                        else if ( (LA34_3==External) ) {s = 6;}
                        else if ( (LA34_3==Abstract) ) {s = 7;}
                        else if ( (LA34_3==Static) ) {s = 8;}
                        else if ( (LA34_3==Const) ) {s = 9;}
                        else if ( (LA34_3==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_3==Let||LA34_3==Var) ) {s = 17;}
                        else if ( (LA34_3==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_3==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_3==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_3==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_3==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        input.seek(index34_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_34 = input.LA(1);
                        int index34_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_34==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_34==Private) ) {s = 28;}
                        else if ( (LA34_34==Project) ) {s = 29;}
                        else if ( (LA34_34==Protected) ) {s = 30;}
                        else if ( (LA34_34==Public) ) {s = 31;}
                        else if ( (LA34_34==External) ) {s = 32;}
                        else if ( (LA34_34==Abstract) ) {s = 33;}
                        else if ( (LA34_34==Static) ) {s = 34;}
                        else if ( (LA34_34==Const) ) {s = 9;}
                        else if ( (LA34_34==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_34==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_34==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_34==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_34==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_34==Let||LA34_34==Var) ) {s = 17;}
                        input.seek(index34_34);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_19 = input.LA(1);
                        int index34_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_19==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_19==Private) ) {s = 28;}
                        else if ( (LA34_19==Project) ) {s = 29;}
                        else if ( (LA34_19==Protected) ) {s = 30;}
                        else if ( (LA34_19==Public) ) {s = 31;}
                        else if ( (LA34_19==External) ) {s = 32;}
                        else if ( (LA34_19==Abstract) ) {s = 33;}
                        else if ( (LA34_19==Static) ) {s = 34;}
                        else if ( (LA34_19==Const) ) {s = 9;}
                        else if ( (LA34_19==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_19==EOF||LA34_19==Let||LA34_19==Var||LA34_19==Comma||(LA34_19>=Colon && LA34_19<=Semicolon)||LA34_19==EqualsSign||LA34_19==RightCurlyBracket||LA34_19==RULE_ML_COMMENT||LA34_19==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_19==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_19==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_19==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_19==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        input.seek(index34_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_23 = input.LA(1);
                        int index34_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_23==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_23==Private) ) {s = 28;}
                        else if ( (LA34_23==Project) ) {s = 29;}
                        else if ( (LA34_23==Protected) ) {s = 30;}
                        else if ( (LA34_23==Public) ) {s = 31;}
                        else if ( (LA34_23==External) ) {s = 32;}
                        else if ( (LA34_23==Abstract) ) {s = 33;}
                        else if ( (LA34_23==Static) ) {s = 34;}
                        else if ( (LA34_23==Const) ) {s = 9;}
                        else if ( (LA34_23==EOF||LA34_23==Let||LA34_23==Var||LA34_23==Comma||(LA34_23>=Colon && LA34_23<=Semicolon)||LA34_23==EqualsSign||LA34_23==RightCurlyBracket||LA34_23==RULE_ML_COMMENT||LA34_23==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_23==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_23==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_23==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_23==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_23==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA34_8 = input.LA(1);
                        int index34_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_8==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_8==Private) ) {s = 2;}
                        else if ( (LA34_8==Project) ) {s = 3;}
                        else if ( (LA34_8==Protected) ) {s = 4;}
                        else if ( (LA34_8==Public) ) {s = 5;}
                        else if ( (LA34_8==External) ) {s = 6;}
                        else if ( (LA34_8==Abstract) ) {s = 7;}
                        else if ( (LA34_8==Static) ) {s = 8;}
                        else if ( (LA34_8==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_8==Const) ) {s = 9;}
                        else if ( (LA34_8==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_8==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_8==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_8==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_8==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_8==Let||LA34_8==Var) ) {s = 17;}
                        input.seek(index34_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA34_31 = input.LA(1);
                        int index34_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_31==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_31==Private) ) {s = 28;}
                        else if ( (LA34_31==Project) ) {s = 29;}
                        else if ( (LA34_31==Protected) ) {s = 30;}
                        else if ( (LA34_31==Public) ) {s = 31;}
                        else if ( (LA34_31==External) ) {s = 32;}
                        else if ( (LA34_31==Abstract) ) {s = 33;}
                        else if ( (LA34_31==Static) ) {s = 34;}
                        else if ( (LA34_31==Const) ) {s = 9;}
                        else if ( (LA34_31==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_31==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_31==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_31==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_31==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_31==Let||LA34_31==Var) ) {s = 17;}
                        input.seek(index34_31);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA34_4 = input.LA(1);
                        int index34_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_4==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_4==Private) ) {s = 2;}
                        else if ( (LA34_4==Project) ) {s = 3;}
                        else if ( (LA34_4==Protected) ) {s = 4;}
                        else if ( (LA34_4==Public) ) {s = 5;}
                        else if ( (LA34_4==External) ) {s = 6;}
                        else if ( (LA34_4==Abstract) ) {s = 7;}
                        else if ( (LA34_4==Static) ) {s = 8;}
                        else if ( (LA34_4==Const) ) {s = 9;}
                        else if ( (LA34_4==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_4==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_4==Let||LA34_4==Var) ) {s = 17;}
                        else if ( (LA34_4==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_4==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_4==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_4==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA34_20 = input.LA(1);
                        int index34_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_20==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_20==Private) ) {s = 28;}
                        else if ( (LA34_20==Project) ) {s = 29;}
                        else if ( (LA34_20==Protected) ) {s = 30;}
                        else if ( (LA34_20==Public) ) {s = 31;}
                        else if ( (LA34_20==External) ) {s = 32;}
                        else if ( (LA34_20==Abstract) ) {s = 33;}
                        else if ( (LA34_20==Static) ) {s = 34;}
                        else if ( (LA34_20==Const) ) {s = 9;}
                        else if ( (LA34_20==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_20==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_20==EOF||LA34_20==Let||LA34_20==Var||LA34_20==Comma||(LA34_20>=Colon && LA34_20<=Semicolon)||LA34_20==EqualsSign||LA34_20==RightCurlyBracket||LA34_20==RULE_ML_COMMENT||LA34_20==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_20==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_20==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_20==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA34_0 = input.LA(1);
                        int index34_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_0==CommercialAt) && (synpred27_InternalN4JSParser())) {s = 1;}
                        else if ( (LA34_0==Private) ) {s = 2;}
                        else if ( (LA34_0==Project) ) {s = 3;}
                        else if ( (LA34_0==Protected) ) {s = 4;}
                        else if ( (LA34_0==Public) ) {s = 5;}
                        else if ( (LA34_0==External) ) {s = 6;}
                        else if ( (LA34_0==Abstract) ) {s = 7;}
                        else if ( (LA34_0==Static) ) {s = 8;}
                        else if ( (LA34_0==Const) ) {s = 9;}
                        else if ( (LA34_0==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_0==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_0==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_0==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_0==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_0==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_0==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_0==Let||LA34_0==Var) ) {s = 17;}
                        input.seek(index34_0);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA34_24 = input.LA(1);
                        int index34_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_24==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_24==Private) ) {s = 28;}
                        else if ( (LA34_24==Project) ) {s = 29;}
                        else if ( (LA34_24==Protected) ) {s = 30;}
                        else if ( (LA34_24==Public) ) {s = 31;}
                        else if ( (LA34_24==External) ) {s = 32;}
                        else if ( (LA34_24==Abstract) ) {s = 33;}
                        else if ( (LA34_24==Static) ) {s = 34;}
                        else if ( (LA34_24==Const) ) {s = 9;}
                        else if ( (LA34_24==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_24==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_24==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_24==EOF||LA34_24==Let||LA34_24==Var||LA34_24==Comma||(LA34_24>=Colon && LA34_24<=Semicolon)||LA34_24==EqualsSign||LA34_24==RightCurlyBracket||LA34_24==RULE_ML_COMMENT||LA34_24==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_24==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_24==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA34_27 = input.LA(1);
                        int index34_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA34_27>=4 && LA34_27<=134 && (s=T2S.M_1[LA34_27-(4)])>=0) && (synpred28_InternalN4JSParser())) { /* 29 cases */ }
                        else if ( (LA34_27==EOF||LA34_27==Comma||(LA34_27>=Colon && LA34_27<=Semicolon)||LA34_27==EqualsSign||LA34_27==RightCurlyBracket||LA34_27==RULE_ML_COMMENT||LA34_27==RULE_EOL) ) {s = 17;}
                        input.seek(index34_27);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA34_5 = input.LA(1);
                        int index34_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_5==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_5==Private) ) {s = 2;}
                        else if ( (LA34_5==Project) ) {s = 3;}
                        else if ( (LA34_5==Protected) ) {s = 4;}
                        else if ( (LA34_5==Public) ) {s = 5;}
                        else if ( (LA34_5==External) ) {s = 6;}
                        else if ( (LA34_5==Abstract) ) {s = 7;}
                        else if ( (LA34_5==Static) ) {s = 8;}
                        else if ( (LA34_5==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_5==Const) ) {s = 9;}
                        else if ( (LA34_5==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_5==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_5==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_5==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_5==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_5==Let||LA34_5==Var) ) {s = 17;}
                        input.seek(index34_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA34_21 = input.LA(1);
                        int index34_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_21==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_21==Private) ) {s = 28;}
                        else if ( (LA34_21==Project) ) {s = 29;}
                        else if ( (LA34_21==Protected) ) {s = 30;}
                        else if ( (LA34_21==Public) ) {s = 31;}
                        else if ( (LA34_21==External) ) {s = 32;}
                        else if ( (LA34_21==Abstract) ) {s = 33;}
                        else if ( (LA34_21==Static) ) {s = 34;}
                        else if ( (LA34_21==Const) ) {s = 9;}
                        else if ( (LA34_21==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_21==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_21==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_21==EOF||LA34_21==Let||LA34_21==Var||LA34_21==Comma||(LA34_21>=Colon && LA34_21<=Semicolon)||LA34_21==EqualsSign||LA34_21==RightCurlyBracket||LA34_21==RULE_ML_COMMENT||LA34_21==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_21==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_21==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA34_28 = input.LA(1);
                        int index34_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_28==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_28==Private) ) {s = 28;}
                        else if ( (LA34_28==Project) ) {s = 29;}
                        else if ( (LA34_28==Protected) ) {s = 30;}
                        else if ( (LA34_28==Public) ) {s = 31;}
                        else if ( (LA34_28==External) ) {s = 32;}
                        else if ( (LA34_28==Abstract) ) {s = 33;}
                        else if ( (LA34_28==Static) ) {s = 34;}
                        else if ( (LA34_28==Const) ) {s = 9;}
                        else if ( (LA34_28==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_28==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_28==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_28==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_28==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_28==Let||LA34_28==Var) ) {s = 17;}
                        input.seek(index34_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA34_9 = input.LA(1);
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA34_9>=Intersection && LA34_9<=Implements)||LA34_9==Promisify||LA34_9==Target||LA34_9==Await||LA34_9==Union||(LA34_9>=Yield && LA34_9<=This)||LA34_9==From||LA34_9==Type||(LA34_9>=Get && LA34_9<=Let)||(LA34_9>=Out && LA34_9<=Set)||LA34_9==Var||LA34_9==As||LA34_9==Of||(LA34_9>=CommercialAt && LA34_9<=LeftSquareBracket)||LA34_9==LeftCurlyBracket||LA34_9==RULE_IDENTIFIER) ) {s = 17;}
                        else if ( (LA34_9==Const) ) {s = 9;}
                        else if ( (LA34_9==Private) ) {s = 18;}
                        else if ( (LA34_9==Project) ) {s = 19;}
                        else if ( (LA34_9==Protected) ) {s = 20;}
                        else if ( (LA34_9==Public) ) {s = 21;}
                        else if ( (LA34_9==External) ) {s = 22;}
                        else if ( (LA34_9==Abstract) ) {s = 23;}
                        else if ( (LA34_9==Static) ) {s = 24;}
                        else if ( (LA34_9==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_9==Async) ) {s = 25;}
                        else if ( (LA34_9==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_9==Interface) ) {s = 26;}
                        else if ( (LA34_9==Namespace) ) {s = 27;}
                        else if ( (LA34_9==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA34_32 = input.LA(1);
                        int index34_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_32==Let||LA34_32==Var) ) {s = 17;}
                        else if ( (LA34_32==Const) ) {s = 9;}
                        else if ( (LA34_32==Private) ) {s = 28;}
                        else if ( (LA34_32==Project) ) {s = 29;}
                        else if ( (LA34_32==Protected) ) {s = 30;}
                        else if ( (LA34_32==Public) ) {s = 31;}
                        else if ( (LA34_32==External) ) {s = 32;}
                        else if ( (LA34_32==Abstract) ) {s = 33;}
                        else if ( (LA34_32==Static) ) {s = 34;}
                        else if ( (LA34_32==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_32==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_32==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_32==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_32==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_32==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_32);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA34_25 = input.LA(1);
                        int index34_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_25==RULE_NO_LINE_TERMINATOR) && (synpred33_InternalN4JSParser())) {s = 35;}
                        else if ( (LA34_25==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_25==EOF||LA34_25==Comma||(LA34_25>=Colon && LA34_25<=Semicolon)||LA34_25==EqualsSign||LA34_25==RightCurlyBracket||LA34_25==RULE_ML_COMMENT||LA34_25==RULE_EOL) ) {s = 17;}
                        input.seek(index34_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA34_26 = input.LA(1);
                        int index34_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA34_26>=4 && LA34_26<=134 && (s=T2S.M_2[LA34_26-(4)])>=0) && (synpred30_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA34_26==EOF||LA34_26==Comma||(LA34_26>=Colon && LA34_26<=Semicolon)||LA34_26==EqualsSign||LA34_26==RightCurlyBracket||LA34_26==RULE_ML_COMMENT||LA34_26==RULE_EOL) ) {s = 17;}
                        input.seek(index34_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA34_6 = input.LA(1);
                        int index34_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_6==Let||LA34_6==Var) ) {s = 17;}
                        else if ( (LA34_6==Const) ) {s = 9;}
                        else if ( (LA34_6==Private) ) {s = 2;}
                        else if ( (LA34_6==Project) ) {s = 3;}
                        else if ( (LA34_6==Protected) ) {s = 4;}
                        else if ( (LA34_6==Public) ) {s = 5;}
                        else if ( (LA34_6==External) ) {s = 6;}
                        else if ( (LA34_6==Abstract) ) {s = 7;}
                        else if ( (LA34_6==Static) ) {s = 8;}
                        else if ( (LA34_6==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_6==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_6==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_6==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_6==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_6==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_6==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_6);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA34_29 = input.LA(1);
                        int index34_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_29==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_29==Private) ) {s = 28;}
                        else if ( (LA34_29==Project) ) {s = 29;}
                        else if ( (LA34_29==Protected) ) {s = 30;}
                        else if ( (LA34_29==Public) ) {s = 31;}
                        else if ( (LA34_29==External) ) {s = 32;}
                        else if ( (LA34_29==Abstract) ) {s = 33;}
                        else if ( (LA34_29==Static) ) {s = 34;}
                        else if ( (LA34_29==Const) ) {s = 9;}
                        else if ( (LA34_29==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_29==Let||LA34_29==Var) ) {s = 17;}
                        else if ( (LA34_29==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_29==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_29==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_29==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        input.seek(index34_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA34_18 = input.LA(1);
                        int index34_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_18==EOF||LA34_18==Let||LA34_18==Var||LA34_18==Comma||(LA34_18>=Colon && LA34_18<=Semicolon)||LA34_18==EqualsSign||LA34_18==RightCurlyBracket||LA34_18==RULE_ML_COMMENT||LA34_18==RULE_EOL) ) {s = 17;}
                        else if ( (LA34_18==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_18==Private) ) {s = 28;}
                        else if ( (LA34_18==Project) ) {s = 29;}
                        else if ( (LA34_18==Protected) ) {s = 30;}
                        else if ( (LA34_18==Public) ) {s = 31;}
                        else if ( (LA34_18==External) ) {s = 32;}
                        else if ( (LA34_18==Abstract) ) {s = 33;}
                        else if ( (LA34_18==Static) ) {s = 34;}
                        else if ( (LA34_18==Const) ) {s = 9;}
                        else if ( (LA34_18==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_18==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_18==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_18==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_18==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        input.seek(index34_18);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA34_2 = input.LA(1);
                        int index34_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_2==Type) && (synpred32_InternalN4JSParser())) {s = 14;}
                        else if ( (LA34_2==Private) ) {s = 2;}
                        else if ( (LA34_2==Project) ) {s = 3;}
                        else if ( (LA34_2==Protected) ) {s = 4;}
                        else if ( (LA34_2==Public) ) {s = 5;}
                        else if ( (LA34_2==External) ) {s = 6;}
                        else if ( (LA34_2==Abstract) ) {s = 7;}
                        else if ( (LA34_2==Static) ) {s = 8;}
                        else if ( (LA34_2==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_2==Const) ) {s = 9;}
                        else if ( (LA34_2==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_2==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        else if ( (LA34_2==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_2==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_2==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_2==Let||LA34_2==Var) ) {s = 17;}
                        input.seek(index34_2);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA34_33 = input.LA(1);
                        int index34_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_33==Interface) && (synpred30_InternalN4JSParser())) {s = 12;}
                        else if ( (LA34_33==Private) ) {s = 28;}
                        else if ( (LA34_33==Project) ) {s = 29;}
                        else if ( (LA34_33==Protected) ) {s = 30;}
                        else if ( (LA34_33==Public) ) {s = 31;}
                        else if ( (LA34_33==External) ) {s = 32;}
                        else if ( (LA34_33==Abstract) ) {s = 33;}
                        else if ( (LA34_33==Static) ) {s = 34;}
                        else if ( (LA34_33==Const) ) {s = 9;}
                        else if ( (LA34_33==Namespace) && (synpred28_InternalN4JSParser())) {s = 10;}
                        else if ( (LA34_33==Class) && (synpred29_InternalN4JSParser())) {s = 11;}
                        else if ( (LA34_33==Let||LA34_33==Var) ) {s = 17;}
                        else if ( (LA34_33==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA34_33==Async) && (synpred33_InternalN4JSParser())) {s = 15;}
                        else if ( (LA34_33==Function) && (synpred33_InternalN4JSParser())) {s = 16;}
                        input.seek(index34_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_39s = "\36\uffff";
    static final String dfa_40s = "\16\uffff\11\12\7\uffff";
    static final String dfa_41s = "\10\11\1\4\5\uffff\7\11\1\20\1\4\7\11";
    static final String dfa_42s = "\10\101\1\u0086\5\uffff\11\u0099\7\101";
    static final String dfa_43s = "\11\uffff\1\1\1\2\1\3\1\4\1\5\20\uffff";
    static final String dfa_44s = "\36\uffff}>";
    static final String[] dfa_45s = {
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\26\1\12\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\25\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\20\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\27\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\117\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\22\uffff\1\11\23\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\5\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\24\uffff\1\13\20\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12"
    };
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);
    class DFA51 extends DFA {
        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "2163:3: ( ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] this_FunctionImpl_4= ruleFunctionImpl[$current] ) | ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* ( (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( (lv_varDeclsOrBindings_8_0= ruleExportedVariableDeclarationOrBinding ) ) (otherlv_9= Comma ( (lv_varDeclsOrBindings_10_0= ruleExportedVariableDeclarationOrBinding ) ) )* ruleSemi ) | ( ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeParameters_24= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) ) this_Members_26= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_28_0= ruleN4Modifier ) )* otherlv_29= Enum ( (lv_name_30_0= ruleBindingIdentifier ) ) otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) | ( () ( (lv_declaredModifiers_37_0= ruleN4ModifierWithoutConst ) )* otherlv_38= Type ( (lv_name_39_0= ruleBindingIdentifier ) ) (this_TypeParameters_40= ruleTypeParameters[$current] )? otherlv_41= EqualsSign ( (lv_declaredTypeRefNode_42_0= ruleTypeReferenceNode ) ) ) )";
        }
    }
    static final String dfa_46s = "\14\uffff";
    static final String dfa_47s = "\4\uffff\10\1";
    static final String dfa_48s = "\1\13\1\uffff\1\4\1\uffff\1\4\7\13";
    static final String dfa_49s = "\1\101\1\uffff\1\u0086\1\uffff\10\u0099";
    static final String dfa_50s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_51s = "\14\uffff}>";
    static final String[] dfa_52s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\3\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\20\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\27\uffff\1\1",
            "",
            "\3\3\1\uffff\5\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\22\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\25\uffff\1\3\20\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);
    class DFA36 extends DFA {
        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "()* loopback of 2223:5: ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )*";
        }
    }
    class DFA46 extends DFA {
        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "2315:5: ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeParameters_24= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_53s = "\37\uffff";
    static final String dfa_54s = "\1\uffff\34\36\2\uffff";
    static final String dfa_55s = "\1\4\34\122\2\uffff";
    static final String dfa_56s = "\1\u0086\34\160\2\uffff";
    static final String dfa_57s = "\35\uffff\1\2\1\1";
    static final String dfa_58s = "\37\uffff}>";
    static final String[] dfa_59s = {
            "\1\21\1\14\1\26\1\35\1\23\1\27\1\34\1\31\1\10\2\35\1\7\4\35\1\30\1\6\3\35\1\32\1\35\1\11\1\35\1\16\1\35\1\25\1\24\7\35\1\20\1\35\1\2\1\22\3\35\1\13\3\35\1\17\2\35\4\uffff\1\35\1\3\1\5\1\35\1\33\1\4\2\35\20\uffff\1\12\3\35\1\15\57\uffff\1\1",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "",
            ""
    };
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);
    class DFA61 extends DFA {
        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "2995:2: ( ( ( ( ruleBindingIdentifier ) ) ( (lv_declaredDynamic_1_0= PlusSign ) )? ) | ( ( ( ruleIdentifierName ) ) otherlv_3= As ( (lv_alias_4_0= ruleBindingIdentifier ) ) ( (lv_declaredDynamic_5_0= PlusSign ) )? ) )";
        }
    }
    static final String dfa_60s = "\135\uffff";
    static final String dfa_61s = "\1\2\1\uffff\1\6\3\uffff\1\134\126\uffff";
    static final String dfa_62s = "\1\4\1\0\1\4\1\0\2\uffff\1\0\126\uffff";
    static final String dfa_63s = "\1\u0099\1\0\1\u0095\1\0\2\uffff\1\0\126\uffff";
    static final String dfa_64s = "\4\uffff\1\1\1\2\1\uffff\126\1";
    static final String dfa_65s = "\1\3\1\2\1\4\1\1\2\uffff\1\0\126\uffff}>";
    static final String[] dfa_66s = {
            "\3\5\1\uffff\12\5\2\uffff\16\5\1\uffff\23\5\4\uffff\10\5\5\uffff\1\5\1\uffff\2\5\5\uffff\1\5\1\uffff\3\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\1\1\5\3\uffff\2\5\2\uffff\1\5\1\uffff\1\3\1\5\12\uffff\2\5\10\uffff\1\5\1\uffff\1\5\2\uffff\1\5\1\uffff\5\5\3\uffff\1\5\1\uffff\1\4\1\uffff\1\4",
            "\1\uffff",
            "\1\50\1\44\1\54\1\uffff\1\52\1\23\1\21\1\13\1\16\1\120\1\127\1\15\1\32\1\132\2\uffff\1\11\1\12\1\103\1\27\1\26\1\14\1\122\1\17\1\124\1\46\1\105\1\31\1\53\1\121\1\uffff\1\22\1\20\1\73\1\61\1\125\1\47\1\116\1\37\1\51\1\133\1\131\1\24\1\43\1\75\1\60\1\72\1\25\1\104\1\123\4\uffff\1\117\1\40\1\34\1\57\1\55\1\41\1\126\1\33\5\uffff\1\106\1\uffff\1\107\1\77\5\uffff\1\7\1\uffff\1\42\1\115\1\114\1\uffff\1\45\2\uffff\1\113\2\uffff\1\56\2\uffff\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\35\1\62\3\uffff\1\10\1\100\2\uffff\1\30\1\uffff\1\130\1\112\12\uffff\1\102\1\101\10\uffff\1\36\1\uffff\1\64\2\uffff\1\63\1\uffff\1\65\1\66\1\67\1\70\1\71\3\uffff\1\74",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);
    class DFA65 extends DFA {
        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3310:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_6 = input.LA(1);
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA65_6==EOF) && (synpred37_InternalN4JSParser())) {s = 92;}
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_3 = input.LA(1);
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_1 = input.LA(1);
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_0 = input.LA(1);
                        int index65_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA65_0==Semicolon) ) {s = 1;}
                        else if ( (LA65_0==EOF) ) {s = 2;}
                        else if ( (LA65_0==RightCurlyBracket) ) {s = 3;}
                        else if ( (LA65_0==RULE_ML_COMMENT||LA65_0==RULE_EOL) && (synpred37_InternalN4JSParser())) {s = 4;}
                        else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Default)||(LA65_0>=Private && LA65_0<=Break)||(LA65_0>=Class && LA65_0<=With)||(LA65_0>=For && LA65_0<=Var)||LA65_0==PlusSignPlusSign||(LA65_0>=HyphenMinusHyphenMinus && LA65_0<=SolidusEqualsSign)||LA65_0==CommercialAtCommercialAt||(LA65_0>=As && LA65_0<=If)||LA65_0==Of||LA65_0==ExclamationMark||LA65_0==LeftParenthesis||LA65_0==PlusSign||LA65_0==HyphenMinus||LA65_0==Solidus||LA65_0==LessThanSign||(LA65_0>=CommercialAt && LA65_0<=LeftSquareBracket)||LA65_0==LeftCurlyBracket||LA65_0==Tilde||(LA65_0>=RULE_TEMPLATE_HEAD && LA65_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA65_0==RULE_IDENTIFIER||LA65_0==RULE_INT||LA65_0==RULE_DOUBLE||(LA65_0>=RULE_BINARY_INT && LA65_0<=RULE_SCIENTIFIC_INT)||LA65_0==RULE_STRING) ) {s = 5;}
                        input.seek(index65_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_2 = input.LA(1);
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA65_2==EOF) ) {s = 6;}
                        else if ((LA65_2>=-1 && LA65_2<=149 && (s=T2S.M_3[LA65_2-(-1)])>=0) && (synpred37_InternalN4JSParser())) { /* 86 cases */ }
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\131\uffff";
    static final String dfa_68s = "\1\2\130\uffff";
    static final String dfa_69s = "\1\4\1\0\127\uffff";
    static final String dfa_70s = "\1\u0099\1\0\127\uffff";
    static final String dfa_71s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_72s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_73s = {
            "\3\2\1\uffff\12\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[][] dfa_73 = unpackEncodedStringArray(dfa_73s);
    class DFA89 extends DFA {
        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = dfa_67;
            this.eof = dfa_68;
            this.min = dfa_69;
            this.max = dfa_70;
            this.accept = dfa_71;
            this.special = dfa_72;
            this.transition = dfa_73;
        }
        public String getDescription() {
            return "4432:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA90 extends DFA {
        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_67;
            this.eof = dfa_68;
            this.min = dfa_69;
            this.max = dfa_70;
            this.accept = dfa_71;
            this.special = dfa_72;
            this.transition = dfa_73;
        }
        public String getDescription() {
            return "4468:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_74s = "\101\uffff";
    static final String dfa_75s = "\1\4\1\0\77\uffff";
    static final String dfa_76s = "\1\u0095\1\0\77\uffff";
    static final String dfa_77s = "\2\uffff\1\2\75\uffff\1\1";
    static final String dfa_78s = "\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_79s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[][] dfa_79 = unpackEncodedStringArray(dfa_79s);
    class DFA96 extends DFA {
        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "5047:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA100 extends DFA {
        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "5298:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_1 = input.LA(1);
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA104 extends DFA {
        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "5549:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_1 = input.LA(1);
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA108 extends DFA {
        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "5800:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_1 = input.LA(1);
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_80s = "\122\uffff";
    static final String dfa_81s = "\1\4\13\0\1\uffff\1\0\1\uffff\23\0\60\uffff";
    static final String dfa_82s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\23\0\60\uffff";
    static final String dfa_83s = "\14\uffff\1\3\1\uffff\1\4\23\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_84s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\60\uffff}>";
    static final String[] dfa_85s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\41\1\4\1\7\1\107\1\116\1\6\1\13\3\uffff\1\2\1\3\1\42\1\uffff\1\42\1\5\1\111\1\10\1\113\1\27\1\42\1\12\1\35\1\110\1\uffff\1\42\1\11\2\42\1\114\1\31\1\104\1\20\1\33\3\uffff\1\24\3\42\1\30\1\42\1\112\4\uffff\1\104\1\21\1\15\1\42\1\40\1\22\1\115\1\14\5\uffff\1\42\1\uffff\2\42\7\uffff\1\23\1\104\1\103\1\uffff\1\26\2\uffff\1\42\2\uffff\1\42\2\uffff\1\42\1\uffff\1\42\1\uffff\1\42\1\uffff\1\16\1\42\3\uffff\2\42\2\uffff\1\1\2\uffff\1\42\12\uffff\2\42\10\uffff\1\17\1\uffff\1\42\2\uffff\1\42\1\uffff\5\42\3\uffff\1\42",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[][] dfa_85 = unpackEncodedStringArray(dfa_85s);
    class DFA139 extends DFA {
        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_81;
            this.max = dfa_82;
            this.accept = dfa_83;
            this.special = dfa_84;
            this.transition = dfa_85;
        }
        public String getDescription() {
            return "7141:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= ruleBlock ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= ruleFunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm1_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= ruleLabelledStatement ) | this_ExpressionStatement_5= ruleExpressionStatement | this_IfStatement_6= ruleIfStatement | this_IterationStatement_7= ruleIterationStatement | this_ContinueStatement_8= ruleContinueStatement | this_BreakStatement_9= ruleBreakStatement | this_ReturnStatement_10= ruleReturnStatement | this_WithStatement_11= ruleWithStatement | this_SwitchStatement_12= ruleSwitchStatement | this_ThrowStatement_13= ruleThrowStatement | this_TryStatement_14= ruleTryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_0 = input.LA(1);
                        int index139_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA139_0>=11 && LA139_0<=110 && (s=T2S.M_4[LA139_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA139_0==Var) && (synpred82_InternalN4JSParser())) {s = 12;}
                        else if ((LA139_0>=4 && LA139_0<=134 && (s=T2S.M_5[LA139_0-(4)])>=0)) { /* 22 cases */ }
                        else if ( (LA139_0==Delete||LA139_0==Import||LA139_0==Typeof||LA139_0==Class||(LA139_0>=False && LA139_0<=Super)||(LA139_0>=Null && LA139_0<=True)||LA139_0==Void||LA139_0==New||LA139_0==PlusSignPlusSign||(LA139_0>=HyphenMinusHyphenMinus && LA139_0<=SolidusEqualsSign)||LA139_0==ExclamationMark||LA139_0==LeftParenthesis||LA139_0==PlusSign||LA139_0==HyphenMinus||LA139_0==Solidus||LA139_0==LessThanSign||(LA139_0>=CommercialAt && LA139_0<=LeftSquareBracket)||LA139_0==Tilde||(LA139_0>=RULE_TEMPLATE_HEAD && LA139_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA139_0==RULE_INT||LA139_0==RULE_DOUBLE||(LA139_0>=RULE_BINARY_INT && LA139_0<=RULE_SCIENTIFIC_INT)||LA139_0==RULE_STRING) ) {s = 34;}
                        else if ( (LA139_0==If) ) {s = 67;}
                        else if ( (LA139_0==While||LA139_0==For||LA139_0==Do) ) {s = 68;}
                        else if ( (LA139_0==Continue) ) {s = 71;}
                        else if ( (LA139_0==Break) ) {s = 72;}
                        else if ( (LA139_0==Return) ) {s = 73;}
                        else if ( (LA139_0==With) ) {s = 74;}
                        else if ( (LA139_0==Switch) ) {s = 75;}
                        else if ( (LA139_0==Throw) ) {s = 76;}
                        else if ( (LA139_0==Try) ) {s = 77;}
                        else if ( (LA139_0==Debugger) ) {s = 78;}
                        input.seek(index139_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA139_1 = input.LA(1);
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA139_2 = input.LA(1);
                        int index139_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA139_3 = input.LA(1);
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA139_4 = input.LA(1);
                        int index139_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA139_5 = input.LA(1);
                        int index139_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA139_6 = input.LA(1);
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA139_7 = input.LA(1);
                        int index139_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA139_8 = input.LA(1);
                        int index139_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA139_9 = input.LA(1);
                        int index139_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred82_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index139_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA139_10 = input.LA(1);
                        int index139_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA139_11 = input.LA(1);
                        int index139_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA139_13 = input.LA(1);
                        int index139_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA139_15 = input.LA(1);
                        int index139_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA139_16 = input.LA(1);
                        int index139_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA139_17 = input.LA(1);
                        int index139_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA139_18 = input.LA(1);
                        int index139_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA139_19 = input.LA(1);
                        int index139_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA139_20 = input.LA(1);
                        int index139_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA139_21 = input.LA(1);
                        int index139_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA139_22 = input.LA(1);
                        int index139_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA139_23 = input.LA(1);
                        int index139_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA139_24 = input.LA(1);
                        int index139_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA139_25 = input.LA(1);
                        int index139_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA139_26 = input.LA(1);
                        int index139_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA139_27 = input.LA(1);
                        int index139_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA139_28 = input.LA(1);
                        int index139_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA139_29 = input.LA(1);
                        int index139_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA139_30 = input.LA(1);
                        int index139_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA139_31 = input.LA(1);
                        int index139_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA139_32 = input.LA(1);
                        int index139_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA139_33 = input.LA(1);
                        int index139_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index139_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_86s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\61\uffff";
    static final String dfa_87s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\61\uffff";
    static final String dfa_88s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_89s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\61\uffff}>";
    static final String[] dfa_90s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\40\1\4\1\7\1\107\1\116\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\111\1\10\1\113\1\26\1\41\1\12\1\34\1\110\1\uffff\1\41\1\11\2\41\1\114\1\30\1\104\1\41\1\32\3\uffff\1\23\3\41\1\27\1\41\1\112\4\uffff\1\104\1\20\1\15\1\41\1\37\1\21\1\115\1\14\5\uffff\1\41\1\uffff\2\41\7\uffff\1\22\1\104\1\103\1\uffff\1\25\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\12\uffff\2\41\10\uffff\1\17\1\uffff\1\41\2\uffff\1\41\1\uffff\5\41\3\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final char[] dfa_87 = DFA.unpackEncodedStringToUnsignedChars(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[] dfa_89 = DFA.unpackEncodedString(dfa_89s);
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);
    class DFA140 extends DFA {
        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_86;
            this.max = dfa_87;
            this.accept = dfa_88;
            this.special = dfa_89;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "7342:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= norm1_Block ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= norm1_FunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm3_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= norm1_LabelledStatement ) | this_ExpressionStatement_5= norm1_ExpressionStatement | this_IfStatement_6= norm1_IfStatement | this_IterationStatement_7= norm1_IterationStatement | this_ContinueStatement_8= norm1_ContinueStatement | this_BreakStatement_9= norm1_BreakStatement | this_ReturnStatement_10= norm1_ReturnStatement | this_WithStatement_11= norm1_WithStatement | this_SwitchStatement_12= norm1_SwitchStatement | this_ThrowStatement_13= norm1_ThrowStatement | this_TryStatement_14= norm1_TryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_0 = input.LA(1);
                        int index140_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA140_0>=11 && LA140_0<=110 && (s=T2S.M_4[LA140_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA140_0==Var) && (synpred86_InternalN4JSParser())) {s = 12;}
                        else if ((LA140_0>=4 && LA140_0<=134 && (s=T2S.M_7[LA140_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA140_0==Delete||LA140_0==Import||LA140_0==Typeof||LA140_0==Class||(LA140_0>=False && LA140_0<=Super)||LA140_0==Yield||(LA140_0>=Null && LA140_0<=True)||LA140_0==Void||LA140_0==New||LA140_0==PlusSignPlusSign||(LA140_0>=HyphenMinusHyphenMinus && LA140_0<=SolidusEqualsSign)||LA140_0==ExclamationMark||LA140_0==LeftParenthesis||LA140_0==PlusSign||LA140_0==HyphenMinus||LA140_0==Solidus||LA140_0==LessThanSign||(LA140_0>=CommercialAt && LA140_0<=LeftSquareBracket)||LA140_0==Tilde||(LA140_0>=RULE_TEMPLATE_HEAD && LA140_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA140_0==RULE_INT||LA140_0==RULE_DOUBLE||(LA140_0>=RULE_BINARY_INT && LA140_0<=RULE_SCIENTIFIC_INT)||LA140_0==RULE_STRING) ) {s = 33;}
                        else if ( (LA140_0==If) ) {s = 67;}
                        else if ( (LA140_0==While||LA140_0==For||LA140_0==Do) ) {s = 68;}
                        else if ( (LA140_0==Continue) ) {s = 71;}
                        else if ( (LA140_0==Break) ) {s = 72;}
                        else if ( (LA140_0==Return) ) {s = 73;}
                        else if ( (LA140_0==With) ) {s = 74;}
                        else if ( (LA140_0==Switch) ) {s = 75;}
                        else if ( (LA140_0==Throw) ) {s = 76;}
                        else if ( (LA140_0==Try) ) {s = 77;}
                        else if ( (LA140_0==Debugger) ) {s = 78;}
                        input.seek(index140_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA140_1 = input.LA(1);
                        int index140_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA140_2 = input.LA(1);
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA140_3 = input.LA(1);
                        int index140_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA140_4 = input.LA(1);
                        int index140_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA140_5 = input.LA(1);
                        int index140_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA140_6 = input.LA(1);
                        int index140_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA140_7 = input.LA(1);
                        int index140_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA140_8 = input.LA(1);
                        int index140_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA140_9 = input.LA(1);
                        int index140_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred86_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index140_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA140_10 = input.LA(1);
                        int index140_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA140_11 = input.LA(1);
                        int index140_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA140_13 = input.LA(1);
                        int index140_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA140_15 = input.LA(1);
                        int index140_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA140_16 = input.LA(1);
                        int index140_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA140_17 = input.LA(1);
                        int index140_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA140_18 = input.LA(1);
                        int index140_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA140_19 = input.LA(1);
                        int index140_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA140_20 = input.LA(1);
                        int index140_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA140_21 = input.LA(1);
                        int index140_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA140_22 = input.LA(1);
                        int index140_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA140_23 = input.LA(1);
                        int index140_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA140_24 = input.LA(1);
                        int index140_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA140_25 = input.LA(1);
                        int index140_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA140_26 = input.LA(1);
                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA140_27 = input.LA(1);
                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA140_28 = input.LA(1);
                        int index140_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA140_29 = input.LA(1);
                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA140_30 = input.LA(1);
                        int index140_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA140_31 = input.LA(1);
                        int index140_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA140_32 = input.LA(1);
                        int index140_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index140_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_91s = "\120\uffff";
    static final String dfa_92s = "\1\4\1\0\116\uffff";
    static final String dfa_93s = "\1\u0095\1\0\116\uffff";
    static final String dfa_94s = "\2\uffff\1\2\114\uffff\1\1";
    static final String dfa_95s = "\1\uffff\1\0\116\uffff}>";
    static final String[] dfa_96s = {
            "\3\2\1\uffff\11\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);
    class DFA141 extends DFA {
        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "7549:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= ruleAnnotatedFunctionDeclaration ) | this_RootStatement_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA142 extends DFA {
        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "7594:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= norm1_AnnotatedFunctionDeclaration ) | this_RootStatement_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_1 = input.LA(1);
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA145 extends DFA {
        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "()* loopback of 7861:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_97s = "\1\4\35\uffff";
    static final String dfa_98s = "\1\u0086\35\uffff";
    static final String dfa_99s = "\1\uffff\34\2\1\1";
    static final String dfa_100s = "\1\0\35\uffff}>";
    static final String[] dfa_101s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\23\uffff\1\35\33\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);
    class DFA157 extends DFA {
        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 8865:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA157_0>=4 && LA157_0<=134 && (s=T2S.M_8[LA157_0-(4)])>=0) && (synpred106_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA157_0==CommercialAt) ) {s = 29;}
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA159 extends DFA {
        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 8951:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_0 = input.LA(1);
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA159_0>=4 && LA159_0<=134 && (s=T2S.M_8[LA159_0-(4)])>=0) && (synpred107_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA159_0==CommercialAt) ) {s = 29;}
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\35\uffff";
    static final String dfa_103s = "\1\4\34\uffff";
    static final String dfa_104s = "\1\u0086\34\uffff";
    static final String dfa_105s = "\1\uffff\33\2\1\1";
    static final String dfa_106s = "\1\0\34\uffff}>";
    static final String[] dfa_107s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\33\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\22\uffff\1\11\3\uffff\1\14\23\uffff\1\34\33\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);
    class DFA161 extends DFA {
        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "()* loopback of 9037:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_0 = input.LA(1);
                        int index161_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA161_0>=4 && LA161_0<=134 && (s=T2S.M_10[LA161_0-(4)])>=0) && (synpred108_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA161_0==CommercialAt) ) {s = 28;}
                        input.seek(index161_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA163 extends DFA {
        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "()* loopback of 9123:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_0 = input.LA(1);
                        int index163_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA163_0>=4 && LA163_0<=134 && (s=T2S.M_10[LA163_0-(4)])>=0) && (synpred109_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA163_0==CommercialAt) ) {s = 28;}
                        input.seek(index163_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA165 extends DFA {
        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 9209:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_0 = input.LA(1);
                        int index165_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA165_0>=4 && LA165_0<=134 && (s=T2S.M_8[LA165_0-(4)])>=0) && (synpred110_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA165_0==CommercialAt) ) {s = 29;}
                        input.seek(index165_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA168 extends DFA {
        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 9315:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_0 = input.LA(1);
                        int index168_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA168_0>=4 && LA168_0<=134 && (s=T2S.M_8[LA168_0-(4)])>=0) && (synpred111_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA168_0==CommercialAt) ) {s = 29;}
                        input.seek(index168_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA171 extends DFA {
        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "()* loopback of 9421:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_0 = input.LA(1);
                        int index171_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA171_0>=4 && LA171_0<=134 && (s=T2S.M_10[LA171_0-(4)])>=0) && (synpred112_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA171_0==CommercialAt) ) {s = 28;}
                        input.seek(index171_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA174 extends DFA {
        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "()* loopback of 9527:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_0 = input.LA(1);
                        int index174_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA174_0>=4 && LA174_0<=134 && (s=T2S.M_10[LA174_0-(4)])>=0) && (synpred113_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA174_0==CommercialAt) ) {s = 28;}
                        input.seek(index174_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_108s = "\1\4\1\1\1\2\1\0\2\uffff\1\3\126\uffff}>";
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    class DFA183 extends DFA {
        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_108;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "10349:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA183_3 = input.LA(1);
                        int index183_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index183_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA183_1 = input.LA(1);
                        int index183_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index183_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA183_2 = input.LA(1);
                        int index183_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2==EOF) ) {s = 6;}
                        else if ((LA183_2>=-1 && LA183_2<=149 && (s=T2S.M_3[LA183_2-(-1)])>=0) && (synpred120_InternalN4JSParser())) { /* 86 cases */ }
                        input.seek(index183_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA183_6 = input.LA(1);
                        int index183_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_6==EOF) && (synpred120_InternalN4JSParser())) {s = 92;}
                        input.seek(index183_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA183_0 = input.LA(1);
                        int index183_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_0==Semicolon) ) {s = 1;}
                        else if ( (LA183_0==EOF) ) {s = 2;}
                        else if ( (LA183_0==RightCurlyBracket) ) {s = 3;}
                        else if ( (LA183_0==RULE_ML_COMMENT||LA183_0==RULE_EOL) && (synpred120_InternalN4JSParser())) {s = 4;}
                        else if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Default)||(LA183_0>=Private && LA183_0<=Break)||(LA183_0>=Class && LA183_0<=With)||(LA183_0>=For && LA183_0<=Var)||LA183_0==PlusSignPlusSign||(LA183_0>=HyphenMinusHyphenMinus && LA183_0<=SolidusEqualsSign)||LA183_0==CommercialAtCommercialAt||(LA183_0>=As && LA183_0<=If)||LA183_0==Of||LA183_0==ExclamationMark||LA183_0==LeftParenthesis||LA183_0==PlusSign||LA183_0==HyphenMinus||LA183_0==Solidus||LA183_0==LessThanSign||(LA183_0>=CommercialAt && LA183_0<=LeftSquareBracket)||LA183_0==LeftCurlyBracket||LA183_0==Tilde||(LA183_0>=RULE_TEMPLATE_HEAD && LA183_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA183_0==RULE_IDENTIFIER||LA183_0==RULE_INT||LA183_0==RULE_DOUBLE||(LA183_0>=RULE_BINARY_INT && LA183_0<=RULE_SCIENTIFIC_INT)||LA183_0==RULE_STRING) ) {s = 5;}
                        input.seek(index183_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_109s = "\104\uffff";
    static final String dfa_110s = "\1\4\1\0\102\uffff";
    static final String dfa_111s = "\1\u0095\1\0\102\uffff";
    static final String dfa_112s = "\2\uffff\1\2\100\uffff\1\1";
    static final String dfa_113s = "\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_114s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[][] dfa_114 = unpackEncodedStringArray(dfa_114s);
    class DFA203 extends DFA {
        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "10616:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm1_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_1 = input.LA(1);
                        int index203_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 67;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index203_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_115s = "\1\4\2\uffff\1\0\77\uffff";
    static final String dfa_116s = "\1\u0095\2\uffff\1\0\77\uffff";
    static final String dfa_117s = "\1\uffff\2\1\1\uffff\1\2\75\uffff\1\3";
    static final String dfa_118s = "\1\0\2\uffff\1\1\77\uffff}>";
    static final String[] dfa_119s = {
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\102\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\12\uffff\2\4\10\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);
    class DFA202 extends DFA {
        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "10698:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA202_0 = input.LA(1);
                        int index202_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_0==Var) && (synpred123_InternalN4JSParser())) {s = 1;}
                        else if ( (LA202_0==Const) && (synpred123_InternalN4JSParser())) {s = 2;}
                        else if ( (LA202_0==Let) ) {s = 3;}
                        else if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||(LA202_0>=Import && LA202_0<=Public)||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||LA202_0==Get||(LA202_0>=New && LA202_0<=Set)||LA202_0==PlusSignPlusSign||(LA202_0>=HyphenMinusHyphenMinus && LA202_0<=SolidusEqualsSign)||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_INT||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_BINARY_INT && LA202_0<=RULE_SCIENTIFIC_INT)||LA202_0==RULE_STRING) ) {s = 4;}
                        else if ( (LA202_0==Semicolon) ) {s = 66;}
                        input.seek(index202_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA202_3 = input.LA(1);
                        int index202_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index202_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_120s = "\41\uffff";
    static final String dfa_121s = "\1\4\34\125\1\uffff\2\0\1\uffff";
    static final String dfa_122s = "\1\u0086\34\147\1\uffff\2\0\1\uffff";
    static final String dfa_123s = "\35\uffff\1\2\2\uffff\1\1";
    static final String dfa_124s = "\36\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_125s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\23\uffff\2\35\2\uffff\1\35\27\uffff\1\1",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[][] dfa_125 = unpackEncodedStringArray(dfa_125s);
    class DFA194 extends DFA {
        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = dfa_120;
            this.eof = dfa_120;
            this.min = dfa_121;
            this.max = dfa_122;
            this.accept = dfa_123;
            this.special = dfa_124;
            this.transition = dfa_125;
        }
        public String getDescription() {
            return "10720:7: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_31 = input.LA(1);
                        int index194_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_InternalN4JSParser()) ) {s = 32;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index194_31);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_30 = input.LA(1);
                        int index194_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_InternalN4JSParser()) ) {s = 32;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index194_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_126s = "\1\4\100\uffff";
    static final String dfa_127s = "\1\u0095\100\uffff";
    static final String dfa_128s = "\1\uffff\77\1\1\2";
    static final String dfa_129s = "\1\0\100\uffff}>";
    static final String[] dfa_130s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\36\1\33\1\14\2\uffff\1\13\1\63\3\uffff\1\32\1\12\1\67\1\uffff\1\43\1\34\1\uffff\1\15\1\uffff\1\22\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\56\1\40\1\53\1\23\1\70\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\72\1\uffff\1\73\1\60\7\uffff\1\16\3\uffff\1\21\2\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\uffff\1\75\1\uffff\1\57\2\uffff\1\42\3\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\10\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);
    class DFA187 extends DFA {
        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "10921:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_0 = input.LA(1);
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA187_0>=4 && LA187_0<=149 && (s=T2S.M_17[LA187_0-(4)])>=0) && (synpred125_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA187_0==RightParenthesis) ) {s = 64;}
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA222 extends DFA {
        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "11375:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm3_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_1 = input.LA(1);
                        int index222_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 67;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index222_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA221 extends DFA {
        public DFA221(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 221;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "11457:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA221_0 = input.LA(1);
                        int index221_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA221_0==Var) && (synpred127_InternalN4JSParser())) {s = 1;}
                        else if ( (LA221_0==Const) && (synpred127_InternalN4JSParser())) {s = 2;}
                        else if ( (LA221_0==Let) ) {s = 3;}
                        else if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||(LA221_0>=Import && LA221_0<=Public)||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||LA221_0==Get||(LA221_0>=New && LA221_0<=Set)||LA221_0==PlusSignPlusSign||(LA221_0>=HyphenMinusHyphenMinus && LA221_0<=SolidusEqualsSign)||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_INT||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_BINARY_INT && LA221_0<=RULE_SCIENTIFIC_INT)||LA221_0==RULE_STRING) ) {s = 4;}
                        else if ( (LA221_0==Semicolon) ) {s = 66;}
                        input.seek(index221_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA221_3 = input.LA(1);
                        int index221_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index221_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 221, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_131s = "\40\uffff";
    static final String dfa_132s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_133s = "\1\u0086\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_134s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_135s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_136s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\33\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\22\uffff\1\11\3\uffff\1\14\23\uffff\2\34\2\uffff\1\34\27\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_131 = DFA.unpackEncodedString(dfa_131s);
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[][] dfa_136 = unpackEncodedStringArray(dfa_136s);
    class DFA213 extends DFA {
        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = dfa_131;
            this.eof = dfa_131;
            this.min = dfa_132;
            this.max = dfa_133;
            this.accept = dfa_134;
            this.special = dfa_135;
            this.transition = dfa_136;
        }
        public String getDescription() {
            return "11479:7: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_29 = input.LA(1);
                        int index213_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index213_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_30 = input.LA(1);
                        int index213_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index213_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_137s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\6\uffff\1\6\1\10\1\37\1\34\1\7\7\uffff\1\72\1\uffff\1\73\1\60\7\uffff\1\15\3\uffff\1\20\2\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\uffff\1\75\1\uffff\1\57\2\uffff\1\42\3\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\10\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);
    class DFA206 extends DFA {
        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = dfa_74;
            this.eof = dfa_74;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "11680:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA206_0 = input.LA(1);
                        int index206_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA206_0>=4 && LA206_0<=149 && (s=T2S.M_18[LA206_0-(4)])>=0) && (synpred129_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA206_0==RightParenthesis) ) {s = 64;}
                        input.seek(index206_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 206, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\3\uffff\34\37\2\uffff";
    static final String dfa_139s = "\1\4\2\uffff\34\135\2\uffff";
    static final String dfa_140s = "\1\u0086\2\uffff\34\144\2\uffff";
    static final String dfa_141s = "\1\uffff\2\1\34\uffff\1\3\1\2";
    static final String dfa_142s = "\1\24\2\uffff\1\25\1\14\1\15\1\26\1\0\1\6\1\16\1\27\1\1\1\7\1\17\1\30\1\2\1\10\1\20\1\31\1\3\1\11\1\21\1\32\1\4\1\12\1\22\1\33\1\5\1\13\1\23\1\34\2\uffff}>";
    static final String[] dfa_143s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\36\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\7\uffff\1\5\1\7\1\uffff\1\35\1\6\22\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\27\uffff\1\3",
            "",
            "",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "\1\37\6\uffff\1\40",
            "",
            ""
    };
    static final short[] dfa_138 = DFA.unpackEncodedString(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final char[] dfa_140 = DFA.unpackEncodedStringToUnsignedChars(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[] dfa_142 = DFA.unpackEncodedString(dfa_142s);
    static final short[][] dfa_143 = unpackEncodedStringArray(dfa_143s);
    class DFA243 extends DFA {
        public DFA243(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 243;
            this.eot = dfa_120;
            this.eof = dfa_138;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_143;
        }
        public String getDescription() {
            return "13727:2: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (lv_name_3_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA243_7 = input.LA(1);
                        int index243_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_7==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_7==EOF||LA243_7==RightParenthesis) ) {s = 31;}
                        input.seek(index243_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA243_11 = input.LA(1);
                        int index243_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_11==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_11==EOF||LA243_11==RightParenthesis) ) {s = 31;}
                        input.seek(index243_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA243_15 = input.LA(1);
                        int index243_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_15==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_15==EOF||LA243_15==RightParenthesis) ) {s = 31;}
                        input.seek(index243_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA243_19 = input.LA(1);
                        int index243_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_19==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_19==EOF||LA243_19==RightParenthesis) ) {s = 31;}
                        input.seek(index243_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA243_23 = input.LA(1);
                        int index243_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_23==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_23==EOF||LA243_23==RightParenthesis) ) {s = 31;}
                        input.seek(index243_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA243_27 = input.LA(1);
                        int index243_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_27==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_27==EOF||LA243_27==RightParenthesis) ) {s = 31;}
                        input.seek(index243_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA243_8 = input.LA(1);
                        int index243_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_8==EOF||LA243_8==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_8==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA243_12 = input.LA(1);
                        int index243_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_12==EOF||LA243_12==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_12==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA243_16 = input.LA(1);
                        int index243_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_16==EOF||LA243_16==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_16==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA243_20 = input.LA(1);
                        int index243_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_20==EOF||LA243_20==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_20==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA243_24 = input.LA(1);
                        int index243_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_24==EOF||LA243_24==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_24==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA243_28 = input.LA(1);
                        int index243_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_28==EOF||LA243_28==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_28==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA243_4 = input.LA(1);
                        int index243_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_4==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_4==EOF||LA243_4==RightParenthesis) ) {s = 31;}
                        input.seek(index243_4);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA243_5 = input.LA(1);
                        int index243_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_5==EOF||LA243_5==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_5==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA243_9 = input.LA(1);
                        int index243_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_9==EOF||LA243_9==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_9==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA243_13 = input.LA(1);
                        int index243_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_13==EOF||LA243_13==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_13==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_13);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA243_17 = input.LA(1);
                        int index243_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_17==EOF||LA243_17==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_17==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA243_21 = input.LA(1);
                        int index243_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_21==EOF||LA243_21==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_21==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA243_25 = input.LA(1);
                        int index243_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_25==EOF||LA243_25==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_25==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA243_29 = input.LA(1);
                        int index243_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_29==EOF||LA243_29==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_29==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA243_0 = input.LA(1);
                        int index243_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_0==LeftCurlyBracket) && (synpred136_InternalN4JSParser())) {s = 1;}
                        else if ( (LA243_0==LeftSquareBracket) && (synpred136_InternalN4JSParser())) {s = 2;}
                        else if ((LA243_0>=4 && LA243_0<=134 && (s=T2S.M_19[LA243_0-(4)])>=0)) { /* 28 cases */ }
                        input.seek(index243_0);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA243_3 = input.LA(1);
                        int index243_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_3==EOF||LA243_3==RightParenthesis) ) {s = 31;}
                        else if ( (LA243_3==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        input.seek(index243_3);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA243_6 = input.LA(1);
                        int index243_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_6==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_6==EOF||LA243_6==RightParenthesis) ) {s = 31;}
                        input.seek(index243_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA243_10 = input.LA(1);
                        int index243_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_10==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_10==EOF||LA243_10==RightParenthesis) ) {s = 31;}
                        input.seek(index243_10);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA243_14 = input.LA(1);
                        int index243_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_14==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_14==EOF||LA243_14==RightParenthesis) ) {s = 31;}
                        input.seek(index243_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA243_18 = input.LA(1);
                        int index243_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_18==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_18==EOF||LA243_18==RightParenthesis) ) {s = 31;}
                        input.seek(index243_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA243_22 = input.LA(1);
                        int index243_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_22==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_22==EOF||LA243_22==RightParenthesis) ) {s = 31;}
                        input.seek(index243_22);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA243_26 = input.LA(1);
                        int index243_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_26==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_26==EOF||LA243_26==RightParenthesis) ) {s = 31;}
                        input.seek(index243_26);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA243_30 = input.LA(1);
                        int index243_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_30==Colon) && (synpred137_InternalN4JSParser())) {s = 32;}
                        else if ( (LA243_30==EOF||LA243_30==RightParenthesis) ) {s = 31;}
                        input.seek(index243_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 243, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_144s = "\1\4\2\uffff\33\135\2\uffff";
    static final String dfa_145s = "\1\u0086\2\uffff\33\144\2\uffff";
    static final String dfa_146s = "\1\uffff\2\1\33\uffff\1\2\1\3";
    static final String dfa_147s = "\1\33\2\uffff\1\7\1\24\1\0\1\10\1\16\1\25\1\1\1\11\1\17\1\26\1\2\1\12\1\20\1\27\1\3\1\13\1\21\1\30\1\4\1\14\1\22\1\31\1\5\1\15\1\23\1\32\1\6\2\uffff}>";
    static final String[] dfa_148s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\35\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\7\uffff\1\4\1\6\1\uffff\1\34\1\5\22\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\27\uffff\1\3",
            "",
            "",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "",
            ""
    };
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);
    class DFA244 extends DFA {
        public DFA244(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 244;
            this.eot = dfa_131;
            this.eof = dfa_131;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "13830:2: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= norm1_BindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (lv_name_3_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA244_5 = input.LA(1);
                        int index244_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_5==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_5==RightParenthesis) ) {s = 31;}
                        input.seek(index244_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA244_9 = input.LA(1);
                        int index244_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_9==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_9==RightParenthesis) ) {s = 31;}
                        input.seek(index244_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA244_13 = input.LA(1);
                        int index244_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_13==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_13==RightParenthesis) ) {s = 31;}
                        input.seek(index244_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA244_17 = input.LA(1);
                        int index244_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_17==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_17==RightParenthesis) ) {s = 31;}
                        input.seek(index244_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA244_21 = input.LA(1);
                        int index244_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_21==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_21==RightParenthesis) ) {s = 31;}
                        input.seek(index244_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA244_25 = input.LA(1);
                        int index244_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_25==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_25==RightParenthesis) ) {s = 31;}
                        input.seek(index244_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA244_29 = input.LA(1);
                        int index244_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_29==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_29==RightParenthesis) ) {s = 31;}
                        input.seek(index244_29);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA244_3 = input.LA(1);
                        int index244_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_3==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_3==RightParenthesis) ) {s = 31;}
                        input.seek(index244_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA244_6 = input.LA(1);
                        int index244_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_6==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_6==RightParenthesis) ) {s = 31;}
                        input.seek(index244_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA244_10 = input.LA(1);
                        int index244_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_10==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_10==RightParenthesis) ) {s = 31;}
                        input.seek(index244_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA244_14 = input.LA(1);
                        int index244_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_14==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_14==RightParenthesis) ) {s = 31;}
                        input.seek(index244_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA244_18 = input.LA(1);
                        int index244_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_18==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_18==RightParenthesis) ) {s = 31;}
                        input.seek(index244_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA244_22 = input.LA(1);
                        int index244_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_22==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_22==RightParenthesis) ) {s = 31;}
                        input.seek(index244_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA244_26 = input.LA(1);
                        int index244_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_26==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_26==RightParenthesis) ) {s = 31;}
                        input.seek(index244_26);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA244_7 = input.LA(1);
                        int index244_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_7==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_7==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_7);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA244_11 = input.LA(1);
                        int index244_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_11==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_11==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_11);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA244_15 = input.LA(1);
                        int index244_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_15==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_15==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_15);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA244_19 = input.LA(1);
                        int index244_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_19==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_19==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA244_23 = input.LA(1);
                        int index244_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_23==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_23==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_23);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA244_27 = input.LA(1);
                        int index244_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_27==RightParenthesis) ) {s = 31;}
                        else if ( (LA244_27==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        input.seek(index244_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA244_4 = input.LA(1);
                        int index244_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_4==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_4==RightParenthesis) ) {s = 31;}
                        input.seek(index244_4);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA244_8 = input.LA(1);
                        int index244_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_8==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_8==RightParenthesis) ) {s = 31;}
                        input.seek(index244_8);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA244_12 = input.LA(1);
                        int index244_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_12==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_12==RightParenthesis) ) {s = 31;}
                        input.seek(index244_12);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA244_16 = input.LA(1);
                        int index244_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_16==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_16==RightParenthesis) ) {s = 31;}
                        input.seek(index244_16);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA244_20 = input.LA(1);
                        int index244_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_20==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_20==RightParenthesis) ) {s = 31;}
                        input.seek(index244_20);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA244_24 = input.LA(1);
                        int index244_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_24==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_24==RightParenthesis) ) {s = 31;}
                        input.seek(index244_24);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA244_28 = input.LA(1);
                        int index244_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_28==Colon) && (synpred140_InternalN4JSParser())) {s = 30;}
                        else if ( (LA244_28==RightParenthesis) ) {s = 31;}
                        input.seek(index244_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA244_0 = input.LA(1);
                        int index244_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA244_0==LeftCurlyBracket) && (synpred139_InternalN4JSParser())) {s = 1;}
                        else if ( (LA244_0==LeftSquareBracket) && (synpred139_InternalN4JSParser())) {s = 2;}
                        else if ((LA244_0>=4 && LA244_0<=134 && (s=T2S.M_20[LA244_0-(4)])>=0)) { /* 27 cases */ }
                        input.seek(index244_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 244, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_149s = "\51\uffff";
    static final String dfa_150s = "\4\uffff\1\3\44\uffff";
    static final String dfa_151s = "\1\4\3\uffff\1\6\1\4\14\uffff\11\4\2\uffff\2\4\1\10\11\4";
    static final String dfa_152s = "\1\u0095\3\uffff\1\u0099\1\u0095\14\uffff\11\u0086\2\uffff\3\u0086\2\u0095\7\u0086";
    static final String dfa_153s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\7\11\uffff\1\4\1\5\14\uffff";
    static final String dfa_154s = "\4\uffff\1\0\44\uffff}>";
    static final String[] dfa_155s = {
            "\3\3\1\uffff\5\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\7\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\15\uffff\2\16\10\uffff\1\3\1\uffff\1\7\2\uffff\1\7\1\uffff\5\7\3\uffff\1\7",
            "",
            "",
            "",
            "\2\3\10\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\16\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\13\uffff\2\3\5\uffff\1\17\23\uffff\1\3\1\uffff\1\3",
            "\1\32\1\30\1\34\1\uffff\1\25\4\34\2\uffff\1\34\1\uffff\1\21\2\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\26\1\uffff\1\34\1\24\4\uffff\1\21\2\uffff\1\31\1\uffff\1\34\1\23\3\uffff\1\34\1\uffff\2\21\1\27\1\21\6\uffff\2\34\1\uffff\2\34\22\uffff\1\34\3\uffff\1\34\5\uffff\1\21\2\uffff\1\21\1\uffff\1\21\6\uffff\1\33\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\24\uffff\1\22\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\41\27\uffff\1\34",
            "",
            "",
            "\4\34\1\45\10\34\1\47\13\34\1\46\2\34\1\44\12\34\1\43\10\34\1\42\1\34\4\uffff\10\34\20\uffff\5\34\17\uffff\1\34\37\uffff\1\50",
            "\3\21\1\uffff\5\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\7\uffff\1\21\1\uffff\2\21\3\uffff\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\22\uffff\1\21\3\uffff\1\21\17\uffff\1\34\7\uffff\1\34\27\uffff\1\21",
            "\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\12\uffff\1\21\5\uffff\1\21\2\uffff\1\21\2\uffff\1\34\61\uffff\1\21\34\uffff\1\21",
            "\2\21\2\uffff\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\4\uffff\1\21\2\uffff\1\21\2\uffff\1\21\5\uffff\4\21\2\uffff\1\34\44\uffff\1\21\2\uffff\1\21\1\uffff\1\21\7\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\24\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\2\21\2\uffff\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\4\uffff\1\21\2\uffff\1\21\2\uffff\1\21\5\uffff\4\21\2\uffff\1\34\44\uffff\1\21\2\uffff\1\21\1\uffff\1\21\7\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\24\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\26\uffff\1\34"
    };
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);
    class DFA245 extends DFA {
        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "14080:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= ruleIdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= ruleImportCallExpression | this_ParameterizedCallExpression_6= ruleParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= ruleArrayLiteral | this_ObjectLiteral_9= ruleObjectLiteral | this_ParenExpression_10= ruleParenExpression | this_AnnotatedExpression_11= ruleAnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= ruleN4ClassExpression | this_TemplateLiteral_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA245_4 = input.LA(1);
                        int index245_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA245_4==EOF||(LA245_4>=Implements && LA245_4<=Instanceof)||LA245_4==ExclamationMarkEqualsSignEqualsSign||(LA245_4>=LessThanSignLessThanSignEqualsSign && LA245_4<=EqualsSignEqualsSignEqualsSign)||(LA245_4>=ExclamationMarkEqualsSign && LA245_4<=QuestionMarkQuestionMark)||(LA245_4>=CircumflexAccentEqualsSign && LA245_4<=As)||(LA245_4>=In && LA245_4<=VerticalLineVerticalLine)||(LA245_4>=PercentSign && LA245_4<=QuestionMark)||(LA245_4>=LeftSquareBracket && LA245_4<=RightCurlyBracket)||(LA245_4>=RULE_TEMPLATE_HEAD && LA245_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA245_4==RULE_ML_COMMENT||LA245_4==RULE_EOL) ) {s = 3;}
                        else if ( (LA245_4==RULE_NO_LINE_TERMINATOR) && (synpred144_InternalN4JSParser())) {s = 15;}
                        else if ( (LA245_4==Function) && (synpred144_InternalN4JSParser())) {s = 16;}
                        input.seek(index245_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 245, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_156s = "\1\4\3\uffff\1\6\1\4\14\uffff\1\4\1\uffff\10\4\1\uffff\2\4\1\10\11\4";
    static final String dfa_157s = "\1\u0095\3\uffff\1\u0099\1\u0095\14\uffff\1\u0086\1\uffff\10\u0086\1\uffff\3\u0086\2\u0095\7\u0086";
    static final String dfa_158s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\4\1\uffff\1\5\10\uffff\1\7\14\uffff";
    static final String[] dfa_159s = {
            "\3\3\1\uffff\5\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\7\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\15\uffff\2\16\10\uffff\1\3\1\uffff\1\7\2\uffff\1\7\1\uffff\5\7\3\uffff\1\7",
            "",
            "",
            "",
            "\2\3\10\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\16\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\13\uffff\2\3\5\uffff\1\17\23\uffff\1\3\1\uffff\1\3",
            "\1\30\1\24\1\23\1\uffff\1\32\4\23\2\uffff\1\23\1\uffff\1\34\2\uffff\2\23\3\uffff\1\23\1\uffff\1\23\1\uffff\1\25\1\uffff\1\23\1\33\4\uffff\1\34\2\uffff\1\27\1\uffff\1\23\1\31\3\uffff\1\23\1\uffff\2\34\1\26\1\34\6\uffff\2\23\1\uffff\2\23\22\uffff\1\23\3\uffff\1\23\5\uffff\1\34\2\uffff\1\34\1\uffff\1\34\6\uffff\1\21\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\24\uffff\1\22\1\uffff\1\34\2\uffff\1\34\1\uffff\5\34\3\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\37\27\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\37\27\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\27\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\41\27\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "",
            "\4\23\1\47\10\23\1\43\13\23\1\45\2\23\1\50\12\23\1\46\10\23\1\44\1\23\4\uffff\10\23\20\uffff\5\23\17\uffff\1\23\37\uffff\1\42",
            "\3\34\1\uffff\5\34\2\uffff\1\34\4\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\2\34\7\uffff\1\34\2\uffff\1\34\3\uffff\1\34\3\uffff\1\34\7\uffff\2\34\1\uffff\2\34\22\uffff\1\34\3\uffff\1\34\17\uffff\1\23\7\uffff\1\23\27\uffff\1\34",
            "\1\34\10\uffff\1\34\13\uffff\1\34\2\uffff\1\34\12\uffff\1\34\5\uffff\1\34\2\uffff\1\34\2\uffff\1\23\61\uffff\1\34\34\uffff\1\34",
            "\2\34\2\uffff\1\34\10\uffff\1\34\13\uffff\1\34\2\uffff\1\34\4\uffff\1\34\2\uffff\1\34\2\uffff\1\34\5\uffff\4\34\2\uffff\1\23\44\uffff\1\34\2\uffff\1\34\1\uffff\1\34\7\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\24\uffff\1\34\1\uffff\1\34\2\uffff\1\34\1\uffff\5\34\3\uffff\1\34",
            "\2\34\2\uffff\1\34\10\uffff\1\34\13\uffff\1\34\2\uffff\1\34\4\uffff\1\34\2\uffff\1\34\2\uffff\1\34\5\uffff\4\34\2\uffff\1\23\44\uffff\1\34\2\uffff\1\34\1\uffff\1\34\7\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\24\uffff\1\34\1\uffff\1\34\2\uffff\1\34\1\uffff\5\34\3\uffff\1\34",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23",
            "\62\23\4\uffff\10\23\14\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\23\1\34\26\uffff\1\23"
    };
    static final char[] dfa_156 = DFA.unpackEncodedStringToUnsignedChars(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final short[] dfa_158 = DFA.unpackEncodedString(dfa_158s);
    static final short[][] dfa_159 = unpackEncodedStringArray(dfa_159s);
    class DFA246 extends DFA {
        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_156;
            this.max = dfa_157;
            this.accept = dfa_158;
            this.special = dfa_154;
            this.transition = dfa_159;
        }
        public String getDescription() {
            return "14248:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= norm1_IdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= norm1_ImportCallExpression | this_ParameterizedCallExpression_6= norm1_ParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= norm1_ArrayLiteral | this_ObjectLiteral_9= norm1_ObjectLiteral | this_ParenExpression_10= norm1_ParenExpression | this_AnnotatedExpression_11= norm1_AnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= norm1_N4ClassExpression | this_TemplateLiteral_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA246_4 = input.LA(1);
                        int index246_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA246_4==EOF||(LA246_4>=Implements && LA246_4<=Instanceof)||LA246_4==ExclamationMarkEqualsSignEqualsSign||(LA246_4>=LessThanSignLessThanSignEqualsSign && LA246_4<=EqualsSignEqualsSignEqualsSign)||(LA246_4>=ExclamationMarkEqualsSign && LA246_4<=QuestionMarkQuestionMark)||(LA246_4>=CircumflexAccentEqualsSign && LA246_4<=As)||(LA246_4>=In && LA246_4<=VerticalLineVerticalLine)||(LA246_4>=PercentSign && LA246_4<=QuestionMark)||(LA246_4>=LeftSquareBracket && LA246_4<=RightCurlyBracket)||(LA246_4>=RULE_TEMPLATE_HEAD && LA246_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA246_4==RULE_ML_COMMENT||LA246_4==RULE_EOL) ) {s = 3;}
                        else if ( (LA246_4==RULE_NO_LINE_TERMINATOR) && (synpred145_InternalN4JSParser())) {s = 15;}
                        else if ( (LA246_4==Function) && (synpred145_InternalN4JSParser())) {s = 16;}
                        input.seek(index246_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 246, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_160s = "\5\uffff";
    static final String dfa_161s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_162s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_163s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_164s = "\5\uffff}>";
    static final String[] dfa_165s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\10\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\10\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            ""
    };
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final char[] dfa_162 = DFA.unpackEncodedStringToUnsignedChars(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[][] dfa_165 = unpackEncodedStringArray(dfa_165s);
    class DFA249 extends DFA {
        public DFA249(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 249;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "()* loopback of 14679:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= ruleArrayElement ) ) )*";
        }
    }
    class DFA255 extends DFA {
        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "()* loopback of 14826:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_166s = "\1\4\1\uffff\112\0\13\uffff";
    static final String dfa_167s = "\1\u0095\1\uffff\112\0\13\uffff";
    static final String dfa_168s = "\1\uffff\1\1\112\uffff\2\5\1\6\4\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_169s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\13\uffff}>";
    static final String[] dfa_170s = {
            "\1\17\1\14\1\75\1\42\1\6\1\76\1\103\1\100\1\67\1\25\1\26\1\66\1\36\1\10\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\7\1\51\1\74\1\5\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\4\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\3\1\54\1\uffff\1\123\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\20\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\116\1\uffff\1\115\1\116\1\uffff\1\116\4\uffff\1\114\2\uffff\1\116\1\1\1\113\2\uffff\1\15\2\uffff\1\11\24\uffff\1\2\1\uffff\1\106\2\uffff\1\105\1\uffff\1\107\1\110\1\116\1\111\1\112\3\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);
    class DFA267 extends DFA {
        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "15236:2: (this_AnnotatedPropertyAssignment_0= ruleAnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= rulePropertyNameValuePair ) | ( ( ( () ruleGetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= rulePropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= rulePropertySetterDeclaration ) | ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= rulePropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= rulePropertyNameValuePairSingleName | this_PropertySpread_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA267_0 = input.LA(1);
                        int index267_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA267_0>=4 && LA267_0<=149 && (s=T2S.M_21[LA267_0-(4)])>=0)) { /* 75 cases */ }
                        else if ( (LA267_0==LessThanSign) && (synpred149_InternalN4JSParser())) {s = 76;}
                        else if ( (LA267_0==Asterisk) && (synpred149_InternalN4JSParser())) {s = 77;}
                        else if ( (LA267_0==LeftParenthesis||LA267_0==PlusSign||LA267_0==HyphenMinus||LA267_0==QuestionMark||LA267_0==RULE_LEGACY_OCTAL_INT) ) {s = 78;}
                        else if ( (LA267_0==FullStopFullStopFullStop) ) {s = 83;}
                        input.seek(index267_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA267_2 = input.LA(1);
                        int index267_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA267_3 = input.LA(1);
                        int index267_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA267_4 = input.LA(1);
                        int index267_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA267_5 = input.LA(1);
                        int index267_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA267_6 = input.LA(1);
                        int index267_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA267_7 = input.LA(1);
                        int index267_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA267_8 = input.LA(1);
                        int index267_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA267_9 = input.LA(1);
                        int index267_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA267_10 = input.LA(1);
                        int index267_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA267_11 = input.LA(1);
                        int index267_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA267_12 = input.LA(1);
                        int index267_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA267_13 = input.LA(1);
                        int index267_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA267_14 = input.LA(1);
                        int index267_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA267_15 = input.LA(1);
                        int index267_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA267_16 = input.LA(1);
                        int index267_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA267_17 = input.LA(1);
                        int index267_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA267_18 = input.LA(1);
                        int index267_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA267_19 = input.LA(1);
                        int index267_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA267_20 = input.LA(1);
                        int index267_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA267_21 = input.LA(1);
                        int index267_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA267_22 = input.LA(1);
                        int index267_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA267_23 = input.LA(1);
                        int index267_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA267_24 = input.LA(1);
                        int index267_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA267_25 = input.LA(1);
                        int index267_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA267_26 = input.LA(1);
                        int index267_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA267_27 = input.LA(1);
                        int index267_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA267_28 = input.LA(1);
                        int index267_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA267_29 = input.LA(1);
                        int index267_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA267_30 = input.LA(1);
                        int index267_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA267_31 = input.LA(1);
                        int index267_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA267_32 = input.LA(1);
                        int index267_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA267_33 = input.LA(1);
                        int index267_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA267_34 = input.LA(1);
                        int index267_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA267_35 = input.LA(1);
                        int index267_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA267_36 = input.LA(1);
                        int index267_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA267_37 = input.LA(1);
                        int index267_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA267_38 = input.LA(1);
                        int index267_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA267_39 = input.LA(1);
                        int index267_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA267_40 = input.LA(1);
                        int index267_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA267_41 = input.LA(1);
                        int index267_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA267_42 = input.LA(1);
                        int index267_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA267_43 = input.LA(1);
                        int index267_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA267_44 = input.LA(1);
                        int index267_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA267_45 = input.LA(1);
                        int index267_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA267_46 = input.LA(1);
                        int index267_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA267_47 = input.LA(1);
                        int index267_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA267_48 = input.LA(1);
                        int index267_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA267_49 = input.LA(1);
                        int index267_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index267_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA267_50 = input.LA(1);
                        int index267_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred147_InternalN4JSParser()) ) {s = 85;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA267_51 = input.LA(1);
                        int index267_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred148_InternalN4JSParser()) ) {s = 86;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA267_52 = input.LA(1);
                        int index267_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA267_53 = input.LA(1);
                        int index267_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA267_54 = input.LA(1);
                        int index267_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA267_55 = input.LA(1);
                        int index267_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA267_56 = input.LA(1);
                        int index267_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA267_57 = input.LA(1);
                        int index267_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA267_58 = input.LA(1);
                        int index267_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA267_59 = input.LA(1);
                        int index267_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA267_60 = input.LA(1);
                        int index267_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA267_61 = input.LA(1);
                        int index267_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA267_62 = input.LA(1);
                        int index267_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA267_63 = input.LA(1);
                        int index267_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA267_64 = input.LA(1);
                        int index267_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA267_65 = input.LA(1);
                        int index267_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA267_66 = input.LA(1);
                        int index267_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA267_67 = input.LA(1);
                        int index267_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA267_68 = input.LA(1);
                        int index267_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA267_69 = input.LA(1);
                        int index267_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA267_70 = input.LA(1);
                        int index267_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA267_71 = input.LA(1);
                        int index267_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA267_72 = input.LA(1);
                        int index267_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA267_73 = input.LA(1);
                        int index267_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA267_74 = input.LA(1);
                        int index267_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_74);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA267_75 = input.LA(1);
                        int index267_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index267_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 267, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA268 extends DFA {
        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "15535:2: (this_AnnotatedPropertyAssignment_0= norm1_AnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= norm1_PropertyNameValuePair ) | ( ( ( () norm1_GetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= norm1_PropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= norm1_PropertySetterDeclaration ) | ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= norm1_PropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= norm1_PropertyNameValuePairSingleName | this_PropertySpread_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA268_0 = input.LA(1);
                        int index268_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA268_0>=4 && LA268_0<=149 && (s=T2S.M_21[LA268_0-(4)])>=0)) { /* 75 cases */ }
                        else if ( (LA268_0==LessThanSign) && (synpred153_InternalN4JSParser())) {s = 76;}
                        else if ( (LA268_0==Asterisk) && (synpred153_InternalN4JSParser())) {s = 77;}
                        else if ( (LA268_0==LeftParenthesis||LA268_0==PlusSign||LA268_0==HyphenMinus||LA268_0==QuestionMark||LA268_0==RULE_LEGACY_OCTAL_INT) ) {s = 78;}
                        else if ( (LA268_0==FullStopFullStopFullStop) ) {s = 83;}
                        input.seek(index268_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA268_2 = input.LA(1);
                        int index268_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA268_3 = input.LA(1);
                        int index268_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA268_4 = input.LA(1);
                        int index268_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA268_5 = input.LA(1);
                        int index268_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA268_6 = input.LA(1);
                        int index268_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA268_7 = input.LA(1);
                        int index268_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA268_8 = input.LA(1);
                        int index268_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA268_9 = input.LA(1);
                        int index268_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA268_10 = input.LA(1);
                        int index268_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA268_11 = input.LA(1);
                        int index268_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA268_12 = input.LA(1);
                        int index268_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA268_13 = input.LA(1);
                        int index268_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA268_14 = input.LA(1);
                        int index268_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA268_15 = input.LA(1);
                        int index268_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA268_16 = input.LA(1);
                        int index268_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA268_17 = input.LA(1);
                        int index268_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA268_18 = input.LA(1);
                        int index268_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA268_19 = input.LA(1);
                        int index268_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA268_20 = input.LA(1);
                        int index268_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA268_21 = input.LA(1);
                        int index268_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA268_22 = input.LA(1);
                        int index268_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA268_23 = input.LA(1);
                        int index268_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA268_24 = input.LA(1);
                        int index268_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA268_25 = input.LA(1);
                        int index268_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA268_26 = input.LA(1);
                        int index268_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA268_27 = input.LA(1);
                        int index268_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA268_28 = input.LA(1);
                        int index268_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA268_29 = input.LA(1);
                        int index268_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA268_30 = input.LA(1);
                        int index268_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA268_31 = input.LA(1);
                        int index268_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA268_32 = input.LA(1);
                        int index268_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA268_33 = input.LA(1);
                        int index268_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA268_34 = input.LA(1);
                        int index268_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA268_35 = input.LA(1);
                        int index268_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA268_36 = input.LA(1);
                        int index268_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA268_37 = input.LA(1);
                        int index268_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA268_38 = input.LA(1);
                        int index268_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA268_39 = input.LA(1);
                        int index268_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA268_40 = input.LA(1);
                        int index268_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA268_41 = input.LA(1);
                        int index268_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA268_42 = input.LA(1);
                        int index268_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA268_43 = input.LA(1);
                        int index268_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA268_44 = input.LA(1);
                        int index268_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA268_45 = input.LA(1);
                        int index268_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA268_46 = input.LA(1);
                        int index268_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA268_47 = input.LA(1);
                        int index268_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA268_48 = input.LA(1);
                        int index268_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA268_49 = input.LA(1);
                        int index268_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index268_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA268_50 = input.LA(1);
                        int index268_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 85;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA268_51 = input.LA(1);
                        int index268_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred152_InternalN4JSParser()) ) {s = 86;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA268_52 = input.LA(1);
                        int index268_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA268_53 = input.LA(1);
                        int index268_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA268_54 = input.LA(1);
                        int index268_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA268_55 = input.LA(1);
                        int index268_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA268_56 = input.LA(1);
                        int index268_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA268_57 = input.LA(1);
                        int index268_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA268_58 = input.LA(1);
                        int index268_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA268_59 = input.LA(1);
                        int index268_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA268_60 = input.LA(1);
                        int index268_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA268_61 = input.LA(1);
                        int index268_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA268_62 = input.LA(1);
                        int index268_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA268_63 = input.LA(1);
                        int index268_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA268_64 = input.LA(1);
                        int index268_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA268_65 = input.LA(1);
                        int index268_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA268_66 = input.LA(1);
                        int index268_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA268_67 = input.LA(1);
                        int index268_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA268_68 = input.LA(1);
                        int index268_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA268_69 = input.LA(1);
                        int index268_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA268_70 = input.LA(1);
                        int index268_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA268_71 = input.LA(1);
                        int index268_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA268_72 = input.LA(1);
                        int index268_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA268_73 = input.LA(1);
                        int index268_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA268_74 = input.LA(1);
                        int index268_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_74);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA268_75 = input.LA(1);
                        int index268_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index268_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 268, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\1\4\112\0\7\uffff";
    static final String dfa_172s = "\1\u0095\112\0\7\uffff";
    static final String dfa_173s = "\113\uffff\2\4\1\6\1\1\1\5\1\2\1\3";
    static final String dfa_174s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\7\uffff}>";
    static final String[] dfa_175s = {
            "\1\16\1\13\1\74\1\41\1\5\1\75\1\102\1\77\1\66\1\24\1\25\1\65\1\35\1\7\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\6\1\50\1\73\1\4\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\3\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\2\1\53\1\uffff\1\115\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\20\uffff\1\70\1\27\1\36\1\40\1\72\7\uffff\1\114\7\uffff\1\113\4\uffff\1\112\2\uffff\1\14\2\uffff\1\10\24\uffff\1\1\1\uffff\1\105\2\uffff\1\104\1\uffff\1\106\1\107\1\uffff\1\110\1\111\3\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_171 = DFA.unpackEncodedStringToUnsignedChars(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final short[] dfa_173 = DFA.unpackEncodedString(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[][] dfa_175 = unpackEncodedStringArray(dfa_175s);
    class DFA276 extends DFA {
        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_171;
            this.max = dfa_172;
            this.accept = dfa_173;
            this.special = dfa_174;
            this.transition = dfa_175;
        }
        public String getDescription() {
            return "15849:3: ( ( ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_declaredName_3_0= ruleLiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( () ruleGetterHeader[null] ) )=> ( () this_GetterHeader_7= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= ruleFormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeParameters_18= ruleTypeParameters[$current] )? ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_expression_28_0= rulePropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA276_0 = input.LA(1);
                        int index276_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA276_0>=4 && LA276_0<=149 && (s=T2S.M_23[LA276_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA276_0==LessThanSign) && (synpred160_InternalN4JSParser())) {s = 75;}
                        else if ( (LA276_0==Asterisk) && (synpred160_InternalN4JSParser())) {s = 76;}
                        else if ( (LA276_0==FullStopFullStopFullStop) ) {s = 77;}
                        input.seek(index276_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA276_1 = input.LA(1);
                        int index276_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA276_2 = input.LA(1);
                        int index276_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA276_3 = input.LA(1);
                        int index276_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA276_4 = input.LA(1);
                        int index276_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA276_5 = input.LA(1);
                        int index276_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA276_6 = input.LA(1);
                        int index276_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA276_7 = input.LA(1);
                        int index276_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA276_8 = input.LA(1);
                        int index276_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA276_9 = input.LA(1);
                        int index276_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA276_10 = input.LA(1);
                        int index276_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA276_11 = input.LA(1);
                        int index276_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA276_12 = input.LA(1);
                        int index276_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA276_13 = input.LA(1);
                        int index276_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA276_14 = input.LA(1);
                        int index276_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA276_15 = input.LA(1);
                        int index276_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA276_16 = input.LA(1);
                        int index276_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA276_17 = input.LA(1);
                        int index276_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA276_18 = input.LA(1);
                        int index276_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA276_19 = input.LA(1);
                        int index276_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA276_20 = input.LA(1);
                        int index276_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA276_21 = input.LA(1);
                        int index276_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA276_22 = input.LA(1);
                        int index276_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA276_23 = input.LA(1);
                        int index276_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA276_24 = input.LA(1);
                        int index276_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA276_25 = input.LA(1);
                        int index276_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA276_26 = input.LA(1);
                        int index276_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA276_27 = input.LA(1);
                        int index276_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA276_28 = input.LA(1);
                        int index276_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA276_29 = input.LA(1);
                        int index276_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA276_30 = input.LA(1);
                        int index276_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA276_31 = input.LA(1);
                        int index276_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA276_32 = input.LA(1);
                        int index276_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA276_33 = input.LA(1);
                        int index276_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA276_34 = input.LA(1);
                        int index276_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA276_35 = input.LA(1);
                        int index276_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA276_36 = input.LA(1);
                        int index276_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA276_37 = input.LA(1);
                        int index276_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA276_38 = input.LA(1);
                        int index276_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA276_39 = input.LA(1);
                        int index276_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA276_40 = input.LA(1);
                        int index276_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA276_41 = input.LA(1);
                        int index276_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA276_42 = input.LA(1);
                        int index276_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA276_43 = input.LA(1);
                        int index276_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA276_44 = input.LA(1);
                        int index276_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA276_45 = input.LA(1);
                        int index276_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA276_46 = input.LA(1);
                        int index276_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA276_47 = input.LA(1);
                        int index276_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA276_48 = input.LA(1);
                        int index276_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA276_49 = input.LA(1);
                        int index276_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred155_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA276_50 = input.LA(1);
                        int index276_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred157_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA276_51 = input.LA(1);
                        int index276_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA276_52 = input.LA(1);
                        int index276_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA276_53 = input.LA(1);
                        int index276_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA276_54 = input.LA(1);
                        int index276_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA276_55 = input.LA(1);
                        int index276_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA276_56 = input.LA(1);
                        int index276_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA276_57 = input.LA(1);
                        int index276_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA276_58 = input.LA(1);
                        int index276_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA276_59 = input.LA(1);
                        int index276_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA276_60 = input.LA(1);
                        int index276_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA276_61 = input.LA(1);
                        int index276_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA276_62 = input.LA(1);
                        int index276_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA276_63 = input.LA(1);
                        int index276_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA276_64 = input.LA(1);
                        int index276_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA276_65 = input.LA(1);
                        int index276_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA276_66 = input.LA(1);
                        int index276_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index276_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA276_67 = input.LA(1);
                        int index276_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA276_68 = input.LA(1);
                        int index276_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA276_69 = input.LA(1);
                        int index276_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA276_70 = input.LA(1);
                        int index276_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA276_71 = input.LA(1);
                        int index276_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA276_72 = input.LA(1);
                        int index276_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA276_73 = input.LA(1);
                        int index276_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_73);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA276_74 = input.LA(1);
                        int index276_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred160_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index276_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 276, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_176s = "\17\uffff";
    static final String dfa_177s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_178s = "\10\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_179s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_180s = "\17\uffff}>";
    static final String[] dfa_181s = {
            "\1\15\1\13\2\16\1\5\10\16\1\7\13\16\1\6\2\16\1\4\7\16\1\14\2\16\1\3\5\16\1\11\1\16\1\12\1\2\1\16\4\uffff\10\16\20\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\24\uffff\1\1\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };
    static final short[] dfa_176 = DFA.unpackEncodedString(dfa_176s);
    static final char[] dfa_177 = DFA.unpackEncodedStringToUnsignedChars(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final short[] dfa_179 = DFA.unpackEncodedString(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[][] dfa_181 = unpackEncodedStringArray(dfa_181s);
    class DFA269 extends DFA {
        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "15876:7: ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_182s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_183s = {
            "\1\15\1\13\2\16\1\5\10\16\1\7\13\16\1\6\2\16\1\4\7\16\1\14\2\16\1\3\5\16\1\11\1\16\1\12\1\2\1\16\4\uffff\10\16\20\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\24\uffff\1\1\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_182 = DFA.unpackEncodedStringToUnsignedChars(dfa_182s);
    static final short[][] dfa_183 = unpackEncodedStringArray(dfa_183s);
    class DFA272 extends DFA {
        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "16312:7: ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_184s = "\1\uffff\1\13\1\uffff\10\13\1\uffff";
    static final String dfa_185s = "\2\4\1\uffff\4\4\4\140\1\uffff";
    static final String dfa_186s = "\2\u0086\1\uffff\4\u0086\4\160\1\uffff";
    static final String dfa_187s = "\2\uffff\1\1\10\uffff\1\2";
    static final String[] dfa_188s = {
            "\1\12\1\10\1\13\1\uffff\1\5\4\13\2\uffff\1\13\1\uffff\1\2\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\6\1\uffff\1\13\1\4\7\uffff\1\11\1\uffff\1\13\1\3\3\uffff\1\13\1\uffff\1\2\1\uffff\1\7\1\2\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\27\uffff\1\2\2\uffff\1\2\24\uffff\1\1",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\1\uffff\2\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\1\uffff\1\2\3\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\1\uffff\2\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\1\uffff\2\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\1\uffff\2\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\1\uffff\2\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            ""
    };
    static final short[] dfa_184 = DFA.unpackEncodedString(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final char[] dfa_186 = DFA.unpackEncodedStringToUnsignedChars(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);
    class DFA275 extends DFA {
        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = dfa_46;
            this.eof = dfa_184;
            this.min = dfa_185;
            this.max = dfa_186;
            this.accept = dfa_187;
            this.special = dfa_51;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "16436:5: ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA284 extends DFA {
        public DFA284(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 284;
            this.eot = dfa_80;
            this.eof = dfa_80;
            this.min = dfa_171;
            this.max = dfa_172;
            this.accept = dfa_173;
            this.special = dfa_174;
            this.transition = dfa_175;
        }
        public String getDescription() {
            return "16530:3: ( ( ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_declaredName_3_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( () norm1_GetterHeader[null] ) )=> ( () this_GetterHeader_7= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= norm1_FormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeParameters_18= ruleTypeParameters[$current] )? ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_expression_28_0= norm1_PropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA284_0 = input.LA(1);
                        int index284_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA284_0>=4 && LA284_0<=149 && (s=T2S.M_23[LA284_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA284_0==LessThanSign) && (synpred169_InternalN4JSParser())) {s = 75;}
                        else if ( (LA284_0==Asterisk) && (synpred169_InternalN4JSParser())) {s = 76;}
                        else if ( (LA284_0==FullStopFullStopFullStop) ) {s = 77;}
                        input.seek(index284_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA284_1 = input.LA(1);
                        int index284_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA284_2 = input.LA(1);
                        int index284_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA284_3 = input.LA(1);
                        int index284_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA284_4 = input.LA(1);
                        int index284_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA284_5 = input.LA(1);
                        int index284_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA284_6 = input.LA(1);
                        int index284_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA284_7 = input.LA(1);
                        int index284_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA284_8 = input.LA(1);
                        int index284_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA284_9 = input.LA(1);
                        int index284_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA284_10 = input.LA(1);
                        int index284_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA284_11 = input.LA(1);
                        int index284_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA284_12 = input.LA(1);
                        int index284_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA284_13 = input.LA(1);
                        int index284_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA284_14 = input.LA(1);
                        int index284_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA284_15 = input.LA(1);
                        int index284_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA284_16 = input.LA(1);
                        int index284_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA284_17 = input.LA(1);
                        int index284_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA284_18 = input.LA(1);
                        int index284_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA284_19 = input.LA(1);
                        int index284_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA284_20 = input.LA(1);
                        int index284_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA284_21 = input.LA(1);
                        int index284_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA284_22 = input.LA(1);
                        int index284_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA284_23 = input.LA(1);
                        int index284_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA284_24 = input.LA(1);
                        int index284_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA284_25 = input.LA(1);
                        int index284_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA284_26 = input.LA(1);
                        int index284_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA284_27 = input.LA(1);
                        int index284_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA284_28 = input.LA(1);
                        int index284_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA284_29 = input.LA(1);
                        int index284_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA284_30 = input.LA(1);
                        int index284_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA284_31 = input.LA(1);
                        int index284_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA284_32 = input.LA(1);
                        int index284_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA284_33 = input.LA(1);
                        int index284_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA284_34 = input.LA(1);
                        int index284_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA284_35 = input.LA(1);
                        int index284_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA284_36 = input.LA(1);
                        int index284_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA284_37 = input.LA(1);
                        int index284_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA284_38 = input.LA(1);
                        int index284_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA284_39 = input.LA(1);
                        int index284_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA284_40 = input.LA(1);
                        int index284_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA284_41 = input.LA(1);
                        int index284_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA284_42 = input.LA(1);
                        int index284_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA284_43 = input.LA(1);
                        int index284_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA284_44 = input.LA(1);
                        int index284_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA284_45 = input.LA(1);
                        int index284_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA284_46 = input.LA(1);
                        int index284_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA284_47 = input.LA(1);
                        int index284_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA284_48 = input.LA(1);
                        int index284_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA284_49 = input.LA(1);
                        int index284_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred164_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA284_50 = input.LA(1);
                        int index284_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred166_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA284_51 = input.LA(1);
                        int index284_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA284_52 = input.LA(1);
                        int index284_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA284_53 = input.LA(1);
                        int index284_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA284_54 = input.LA(1);
                        int index284_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA284_55 = input.LA(1);
                        int index284_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA284_56 = input.LA(1);
                        int index284_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA284_57 = input.LA(1);
                        int index284_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA284_58 = input.LA(1);
                        int index284_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA284_59 = input.LA(1);
                        int index284_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA284_60 = input.LA(1);
                        int index284_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA284_61 = input.LA(1);
                        int index284_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA284_62 = input.LA(1);
                        int index284_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA284_63 = input.LA(1);
                        int index284_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA284_64 = input.LA(1);
                        int index284_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA284_65 = input.LA(1);
                        int index284_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA284_66 = input.LA(1);
                        int index284_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index284_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA284_67 = input.LA(1);
                        int index284_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA284_68 = input.LA(1);
                        int index284_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA284_69 = input.LA(1);
                        int index284_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA284_70 = input.LA(1);
                        int index284_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA284_71 = input.LA(1);
                        int index284_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA284_72 = input.LA(1);
                        int index284_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA284_73 = input.LA(1);
                        int index284_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_73);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA284_74 = input.LA(1);
                        int index284_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred169_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index284_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 284, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA277 extends DFA {
        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "16557:7: ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA280 extends DFA {
        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "16993:7: ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String[] dfa_189s = {
            "\1\12\1\10\1\13\1\uffff\1\5\4\13\2\uffff\1\13\1\uffff\1\2\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\6\1\uffff\1\13\1\4\7\uffff\1\11\2\uffff\1\3\3\uffff\1\13\1\uffff\1\2\1\uffff\1\7\1\2\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\27\uffff\1\2\2\uffff\1\2\24\uffff\1\1",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\2\uffff\1\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\1\uffff\1\2\3\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\2\uffff\1\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\2\uffff\1\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\2\uffff\1\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\3\2\1\uffff\5\2\2\uffff\1\2\4\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\7\uffff\1\2\2\uffff\1\2\3\uffff\1\2\3\uffff\1\2\7\uffff\2\2\1\uffff\2\2\22\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\13\5\uffff\1\2\1\13\1\uffff\1\2\6\uffff\1\13\25\uffff\1\2",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\2\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_189 = unpackEncodedStringArray(dfa_189s);
    class DFA283 extends DFA {
        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_46;
            this.eof = dfa_46;
            this.min = dfa_185;
            this.max = dfa_186;
            this.accept = dfa_187;
            this.special = dfa_51;
            this.transition = dfa_189;
        }
        public String getDescription() {
            return "17117:5: ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA286 extends DFA {
        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "17269:5: ( (lv_declaredReturnTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA290 extends DFA {
        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "17467:5: ( (lv_declaredReturnTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_190s = "\20\uffff";
    static final String dfa_191s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_192s = "\10\u0095\1\uffff\1\u0095\4\156\1\uffff\1\u0095";
    static final String dfa_193s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_194s = "\20\uffff}>";
    static final String[] dfa_195s = {
            "\1\15\1\13\2\16\1\5\10\16\1\7\13\16\1\6\2\16\1\4\7\16\1\14\2\16\1\3\5\16\1\11\1\16\1\12\1\2\1\16\4\uffff\10\16\20\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\24\uffff\1\1\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\15\uffff\1\16\6\uffff\1\10\32\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10"
    };
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final char[] dfa_192 = DFA.unpackEncodedStringToUnsignedChars(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[] dfa_194 = DFA.unpackEncodedString(dfa_194s);
    static final short[][] dfa_195 = unpackEncodedStringArray(dfa_195s);
    class DFA293 extends DFA {
        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "17641:5: ( (lv_declaredTypeRefNode_1_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA295 extends DFA {
        public DFA295(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 295;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "17761:5: ( (lv_declaredTypeRefNode_1_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_196s = "\2\uffff\11\13\1\uffff";
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\u0095\1\uffff\5\u0086\4\160\1\uffff";
    static final String dfa_199s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\5\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\6\1\uffff\1\13\1\4\4\uffff\1\1\2\uffff\1\11\1\uffff\1\13\1\3\3\uffff\1\13\1\uffff\2\1\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\24\uffff\1\2\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);
    class DFA297 extends DFA {
        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = dfa_46;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_51;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "17857:3: ( (lv_declaredTypeRefNode_0_0= ruleTypeReferenceNode ) )?";
        }
    }
    static final String[] dfa_201s = {
            "\1\12\1\10\1\13\1\uffff\1\5\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\6\1\uffff\1\13\1\4\4\uffff\1\1\2\uffff\1\11\2\uffff\1\3\3\uffff\1\13\1\uffff\2\1\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\24\uffff\1\2\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\25\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_201 = unpackEncodedStringArray(dfa_201s);
    class DFA298 extends DFA {
        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = dfa_46;
            this.eof = dfa_46;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_51;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "17908:3: ( (lv_declaredTypeRefNode_0_0= ruleTypeReferenceNode ) )?";
        }
    }
    static final String dfa_202s = "\72\uffff";
    static final String dfa_203s = "\2\4\70\uffff";
    static final String dfa_204s = "\2\u0095\70\uffff";
    static final String dfa_205s = "\2\uffff\1\3\1\1\66\2";
    static final String dfa_206s = "\1\uffff\1\0\70\uffff}>";
    static final String[] dfa_207s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\15\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\42\1\37\1\16\2\uffff\1\15\1\66\3\uffff\1\36\1\14\2\uffff\1\44\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\67\1\uffff\1\55\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\57\1\5\1\54\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\12\uffff\1\61\7\uffff\1\20\3\uffff\1\23\5\uffff\1\64\5\uffff\1\3\1\60\2\uffff\1\43\3\uffff\1\65\1\62\2\uffff\1\63\15\uffff\1\71\1\70\10\uffff\1\7\1\uffff\1\46\2\uffff\1\45\1\uffff\1\47\1\50\1\51\1\52\1\53\3\uffff\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final char[] dfa_204 = DFA.unpackEncodedStringToUnsignedChars(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final short[][] dfa_207 = unpackEncodedStringArray(dfa_207s);
    class DFA329 extends DFA {
        public DFA329(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 329;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_203;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_207;
        }
        public String getDescription() {
            return "19987:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= ruleMemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= ruleArguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= ruleTemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= rulePrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA329_1 = input.LA(1);
                        int index329_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA329_1==FullStop) && (synpred192_InternalN4JSParser())) {s = 3;}
                        else if ((LA329_1>=4 && LA329_1<=149 && (s=T2S.M_25[LA329_1-(4)])>=0) && (synpred193_InternalN4JSParser())) { /* 55 cases */ }
                        input.seek(index329_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 329, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_208s = "\71\uffff";
    static final String dfa_209s = "\2\4\67\uffff";
    static final String dfa_210s = "\2\u0095\67\uffff";
    static final String dfa_211s = "\2\uffff\1\3\1\1\65\2";
    static final String dfa_212s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_213s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\15\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\41\1\36\1\15\2\uffff\1\14\1\65\3\uffff\1\35\1\13\2\uffff\1\43\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\56\1\5\1\53\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\60\7\uffff\1\17\3\uffff\1\22\5\uffff\1\63\5\uffff\1\3\1\57\2\uffff\1\42\3\uffff\1\64\1\61\2\uffff\1\62\15\uffff\1\70\1\67\10\uffff\1\7\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_208 = DFA.unpackEncodedString(dfa_208s);
    static final char[] dfa_209 = DFA.unpackEncodedStringToUnsignedChars(dfa_209s);
    static final char[] dfa_210 = DFA.unpackEncodedStringToUnsignedChars(dfa_210s);
    static final short[] dfa_211 = DFA.unpackEncodedString(dfa_211s);
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[][] dfa_213 = unpackEncodedStringArray(dfa_213s);
    class DFA337 extends DFA {
        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = dfa_208;
            this.eof = dfa_208;
            this.min = dfa_209;
            this.max = dfa_210;
            this.accept = dfa_211;
            this.special = dfa_212;
            this.transition = dfa_213;
        }
        public String getDescription() {
            return "20309:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= norm1_Arguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= norm1_TemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= norm1_PrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA337_1 = input.LA(1);
                        int index337_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_1==FullStop) && (synpred196_InternalN4JSParser())) {s = 3;}
                        else if ((LA337_1>=4 && LA337_1<=149 && (s=T2S.M_26[LA337_1-(4)])>=0) && (synpred197_InternalN4JSParser())) { /* 54 cases */ }
                        input.seek(index337_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 337, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_214s = "\1\1\102\uffff";
    static final String dfa_215s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_216s = "\1\u0099\1\uffff\1\u0095\100\uffff";
    static final String dfa_217s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_218s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_219s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\42\1\37\1\16\2\uffff\1\15\1\66\3\uffff\1\36\1\14\1\72\1\uffff\1\44\1\40\1\uffff\1\17\1\uffff\1\24\1\74\1\33\1\32\2\uffff\1\67\1\uffff\1\55\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\57\1\5\1\54\1\25\1\73\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\75\1\uffff\1\76\1\61\7\uffff\1\20\3\uffff\1\23\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\12\uffff\1\71\1\70\10\uffff\1\7\1\uffff\1\46\2\uffff\1\45\1\uffff\1\47\1\50\1\51\1\52\1\53\3\uffff\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final char[] dfa_215 = DFA.unpackEncodedStringToUnsignedChars(dfa_215s);
    static final char[] dfa_216 = DFA.unpackEncodedStringToUnsignedChars(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[][] dfa_219 = unpackEncodedStringArray(dfa_219s);
    class DFA352 extends DFA {
        public DFA352(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 352;
            this.eot = dfa_26;
            this.eof = dfa_214;
            this.min = dfa_215;
            this.max = dfa_216;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_219;
        }
        public String getDescription() {
            return "()* loopback of 21454:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA352_2 = input.LA(1);
                        int index352_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA352_2==EqualsSign) ) {s = 1;}
                        else if ((LA352_2>=4 && LA352_2<=149 && (s=T2S.M_27[LA352_2-(4)])>=0) && (synpred206_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index352_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA352_0 = input.LA(1);
                        int index352_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA352_0==EOF||LA352_0==Instanceof||LA352_0==ExclamationMarkEqualsSignEqualsSign||(LA352_0>=LessThanSignLessThanSignEqualsSign && LA352_0<=EqualsSignEqualsSignEqualsSign)||(LA352_0>=ExclamationMarkEqualsSign && LA352_0<=AsteriskEqualsSign)||LA352_0==PlusSignEqualsSign||(LA352_0>=SolidusEqualsSign && LA352_0<=EqualsSignEqualsSign)||LA352_0==QuestionMarkQuestionMark||LA352_0==CircumflexAccentEqualsSign||(LA352_0>=In && LA352_0<=VerticalLineVerticalLine)||LA352_0==Ampersand||LA352_0==RightParenthesis||LA352_0==Comma||(LA352_0>=Colon && LA352_0<=QuestionMark)||(LA352_0>=RightSquareBracket && LA352_0<=CircumflexAccent)||(LA352_0>=VerticalLine && LA352_0<=RightCurlyBracket)||LA352_0==RULE_ML_COMMENT||LA352_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA352_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA352_0==PlusSign) && (synpred206_InternalN4JSParser())) {s = 3;}
                        input.seek(index352_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 352, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_220s = "\102\uffff";
    static final String dfa_221s = "\1\1\101\uffff";
    static final String dfa_222s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_223s = "\1\u0099\1\uffff\1\u0095\77\uffff";
    static final String dfa_224s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_225s = "\1\1\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_226s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\41\1\36\1\15\2\uffff\1\14\1\65\3\uffff\1\35\1\13\1\71\1\uffff\1\43\1\37\1\uffff\1\16\1\uffff\1\23\1\73\1\32\1\31\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\56\1\5\1\53\1\24\1\72\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\74\1\uffff\1\75\1\60\7\uffff\1\17\3\uffff\1\22\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\12\uffff\1\70\1\67\10\uffff\1\7\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_220 = DFA.unpackEncodedString(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final char[] dfa_222 = DFA.unpackEncodedStringToUnsignedChars(dfa_222s);
    static final char[] dfa_223 = DFA.unpackEncodedStringToUnsignedChars(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[][] dfa_226 = unpackEncodedStringArray(dfa_226s);
    class DFA353 extends DFA {
        public DFA353(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 353;
            this.eot = dfa_220;
            this.eof = dfa_221;
            this.min = dfa_222;
            this.max = dfa_223;
            this.accept = dfa_224;
            this.special = dfa_225;
            this.transition = dfa_226;
        }
        public String getDescription() {
            return "()* loopback of 21536:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA353_2 = input.LA(1);
                        int index353_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA353_2==EqualsSign) ) {s = 1;}
                        else if ((LA353_2>=4 && LA353_2<=149 && (s=T2S.M_28[LA353_2-(4)])>=0) && (synpred207_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index353_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA353_0 = input.LA(1);
                        int index353_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA353_0==EOF||LA353_0==Instanceof||LA353_0==ExclamationMarkEqualsSignEqualsSign||(LA353_0>=LessThanSignLessThanSignEqualsSign && LA353_0<=EqualsSignEqualsSignEqualsSign)||(LA353_0>=ExclamationMarkEqualsSign && LA353_0<=AsteriskEqualsSign)||LA353_0==PlusSignEqualsSign||(LA353_0>=SolidusEqualsSign && LA353_0<=EqualsSignEqualsSign)||LA353_0==QuestionMarkQuestionMark||LA353_0==CircumflexAccentEqualsSign||(LA353_0>=In && LA353_0<=VerticalLineVerticalLine)||LA353_0==Ampersand||LA353_0==RightParenthesis||LA353_0==Comma||(LA353_0>=Colon && LA353_0<=QuestionMark)||(LA353_0>=RightSquareBracket && LA353_0<=CircumflexAccent)||(LA353_0>=VerticalLine && LA353_0<=RightCurlyBracket)||LA353_0==RULE_ML_COMMENT||LA353_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA353_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA353_0==PlusSign) && (synpred207_InternalN4JSParser())) {s = 3;}
                        input.seek(index353_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 353, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_227s = "\105\uffff";
    static final String dfa_228s = "\1\1\104\uffff";
    static final String dfa_229s = "\1\7\1\uffff\1\4\1\uffff\2\4\77\uffff";
    static final String dfa_230s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\77\uffff";
    static final String dfa_231s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\77\1";
    static final String dfa_232s = "\1\1\3\uffff\1\0\1\2\77\uffff}>";
    static final String[] dfa_233s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\7\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\12\uffff\2\1\10\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\61\1\7\1\56\1\27\1\75\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\1\1\5\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\10\uffff\1\11\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\61\1\7\1\56\1\27\1\75\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\1\2\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\10\uffff\1\11\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final char[] dfa_229 = DFA.unpackEncodedStringToUnsignedChars(dfa_229s);
    static final char[] dfa_230 = DFA.unpackEncodedStringToUnsignedChars(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[][] dfa_233 = unpackEncodedStringArray(dfa_233s);
    class DFA354 extends DFA {
        public DFA354(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 354;
            this.eot = dfa_227;
            this.eof = dfa_228;
            this.min = dfa_229;
            this.max = dfa_230;
            this.accept = dfa_231;
            this.special = dfa_232;
            this.transition = dfa_233;
        }
        public String getDescription() {
            return "()* loopback of 21624:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA354_4 = input.LA(1);
                        int index354_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA354_4==EqualsSign) ) {s = 1;}
                        else if ((LA354_4>=4 && LA354_4<=149 && (s=T2S.M_29[LA354_4-(4)])>=0) && (synpred208_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index354_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA354_0 = input.LA(1);
                        int index354_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_0==EOF||LA354_0==Instanceof||LA354_0==ExclamationMarkEqualsSignEqualsSign||(LA354_0>=LessThanSignLessThanSignEqualsSign && LA354_0<=EqualsSignEqualsSignEqualsSign)||(LA354_0>=ExclamationMarkEqualsSign && LA354_0<=AsteriskEqualsSign)||LA354_0==PlusSignEqualsSign||LA354_0==SolidusEqualsSign||(LA354_0>=LessThanSignEqualsSign && LA354_0<=EqualsSignEqualsSign)||LA354_0==QuestionMarkQuestionMark||LA354_0==CircumflexAccentEqualsSign||(LA354_0>=In && LA354_0<=VerticalLineVerticalLine)||LA354_0==Ampersand||LA354_0==RightParenthesis||(LA354_0>=Comma && LA354_0<=HyphenMinus)||(LA354_0>=Colon && LA354_0<=EqualsSign)||LA354_0==QuestionMark||(LA354_0>=RightSquareBracket && LA354_0<=CircumflexAccent)||(LA354_0>=VerticalLine && LA354_0<=RightCurlyBracket)||LA354_0==RULE_ML_COMMENT||LA354_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA354_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA354_0==LessThanSignLessThanSign) && (synpred208_InternalN4JSParser())) {s = 3;}
                        input.seek(index354_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA354_5 = input.LA(1);
                        int index354_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_5==EqualsSign) ) {s = 1;}
                        else if ((LA354_5>=4 && LA354_5<=149 && (s=T2S.M_30[LA354_5-(4)])>=0) && (synpred208_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index354_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 354, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_234s = "\1\1\103\uffff";
    static final String dfa_235s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_236s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\76\uffff";
    static final String dfa_237s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_238s = "\1\1\3\uffff\1\0\1\2\76\uffff}>";
    static final String[] dfa_239s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\7\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\12\uffff\2\1\10\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\43\1\40\1\17\2\uffff\1\16\1\67\3\uffff\1\37\1\15\1\73\1\uffff\1\45\1\41\1\uffff\1\20\1\uffff\1\25\1\75\1\34\1\33\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\60\1\7\1\55\1\26\1\74\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\76\1\uffff\1\77\1\62\7\uffff\1\21\3\uffff\1\24\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\12\uffff\1\72\1\71\10\uffff\1\11\1\uffff\1\47\2\uffff\1\46\1\uffff\1\50\1\51\1\52\1\53\1\54\3\uffff\1\57",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\43\1\40\1\17\2\uffff\1\16\1\67\3\uffff\1\37\1\15\1\73\1\uffff\1\45\1\41\1\uffff\1\20\1\uffff\1\25\1\75\1\34\1\33\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\60\1\7\1\55\1\26\1\74\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\76\1\uffff\1\77\1\62\7\uffff\1\21\3\uffff\1\24\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\12\uffff\1\72\1\71\10\uffff\1\11\1\uffff\1\47\2\uffff\1\46\1\uffff\1\50\1\51\1\52\1\53\1\54\3\uffff\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final char[] dfa_236 = DFA.unpackEncodedStringToUnsignedChars(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final short[][] dfa_239 = unpackEncodedStringArray(dfa_239s);
    class DFA355 extends DFA {
        public DFA355(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 355;
            this.eot = dfa_109;
            this.eof = dfa_234;
            this.min = dfa_235;
            this.max = dfa_236;
            this.accept = dfa_237;
            this.special = dfa_238;
            this.transition = dfa_239;
        }
        public String getDescription() {
            return "()* loopback of 21832:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA355_4 = input.LA(1);
                        int index355_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA355_4==EqualsSign) ) {s = 1;}
                        else if ((LA355_4>=4 && LA355_4<=149 && (s=T2S.M_31[LA355_4-(4)])>=0) && (synpred210_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index355_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA355_0 = input.LA(1);
                        int index355_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_0==EOF||LA355_0==Instanceof||LA355_0==ExclamationMarkEqualsSignEqualsSign||(LA355_0>=LessThanSignLessThanSignEqualsSign && LA355_0<=EqualsSignEqualsSignEqualsSign)||(LA355_0>=ExclamationMarkEqualsSign && LA355_0<=AsteriskEqualsSign)||LA355_0==PlusSignEqualsSign||LA355_0==SolidusEqualsSign||(LA355_0>=LessThanSignEqualsSign && LA355_0<=EqualsSignEqualsSign)||LA355_0==QuestionMarkQuestionMark||LA355_0==CircumflexAccentEqualsSign||(LA355_0>=In && LA355_0<=VerticalLineVerticalLine)||LA355_0==Ampersand||LA355_0==RightParenthesis||(LA355_0>=Comma && LA355_0<=HyphenMinus)||(LA355_0>=Colon && LA355_0<=EqualsSign)||LA355_0==QuestionMark||(LA355_0>=RightSquareBracket && LA355_0<=CircumflexAccent)||(LA355_0>=VerticalLine && LA355_0<=RightCurlyBracket)||LA355_0==RULE_ML_COMMENT||LA355_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA355_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA355_0==LessThanSignLessThanSign) && (synpred210_InternalN4JSParser())) {s = 3;}
                        input.seek(index355_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA355_5 = input.LA(1);
                        int index355_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_5==EqualsSign) ) {s = 1;}
                        else if ((LA355_5>=4 && LA355_5<=149 && (s=T2S.M_32[LA355_5-(4)])>=0) && (synpred210_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index355_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 355, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_240s = "\106\uffff";
    static final String dfa_241s = "\1\1\105\uffff";
    static final String dfa_242s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_243s = "\1\160\1\uffff\1\u0095\103\uffff";
    static final String dfa_244s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_245s = "\1\1\1\uffff\1\0\103\uffff}>";
    static final String[] dfa_246s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\45\1\42\1\21\2\uffff\1\20\1\71\3\uffff\1\41\1\17\1\75\1\uffff\1\47\1\43\1\uffff\1\22\1\uffff\1\27\1\77\1\36\1\35\2\uffff\1\72\1\uffff\1\60\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\62\1\10\1\57\1\30\1\76\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\100\1\uffff\1\101\1\64\7\uffff\1\23\3\uffff\1\26\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\6\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\12\uffff\1\74\1\73\10\uffff\1\12\1\uffff\1\51\2\uffff\1\50\1\uffff\1\52\1\53\1\54\1\55\1\56\3\uffff\1\61",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final char[] dfa_242 = DFA.unpackEncodedStringToUnsignedChars(dfa_242s);
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final short[] dfa_244 = DFA.unpackEncodedString(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[][] dfa_246 = unpackEncodedStringArray(dfa_246s);
    class DFA358 extends DFA {
        public DFA358(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 358;
            this.eot = dfa_240;
            this.eof = dfa_241;
            this.min = dfa_242;
            this.max = dfa_243;
            this.accept = dfa_244;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "()* loopback of 22088:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA358_2 = input.LA(1);
                        int index358_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA358_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA358_2>=4 && LA358_2<=149 && (s=T2S.M_33[LA358_2-(4)])>=0) && (synpred212_InternalN4JSParser())) { /* 65 cases */ }
                        input.seek(index358_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA358_0 = input.LA(1);
                        int index358_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA358_0==EOF||LA358_0==ExclamationMarkEqualsSignEqualsSign||(LA358_0>=LessThanSignLessThanSignEqualsSign && LA358_0<=EqualsSignEqualsSignEqualsSign)||(LA358_0>=ExclamationMarkEqualsSign && LA358_0<=AsteriskEqualsSign)||LA358_0==PlusSignEqualsSign||LA358_0==SolidusEqualsSign||LA358_0==EqualsSignEqualsSign||LA358_0==QuestionMarkQuestionMark||LA358_0==CircumflexAccentEqualsSign||(LA358_0>=In && LA358_0<=VerticalLineVerticalLine)||LA358_0==Ampersand||(LA358_0>=Comma && LA358_0<=HyphenMinus)||LA358_0==Semicolon||LA358_0==EqualsSign||LA358_0==QuestionMark||LA358_0==CircumflexAccent||(LA358_0>=VerticalLine && LA358_0<=RightCurlyBracket)) ) {s = 1;}
                        else if ( (LA358_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA358_0==LessThanSign) && (synpred212_InternalN4JSParser())) {s = 3;}
                        else if ( (LA358_0==LessThanSignEqualsSign) && (synpred212_InternalN4JSParser())) {s = 4;}
                        else if ( (LA358_0==Instanceof) && (synpred212_InternalN4JSParser())) {s = 5;}
                        input.seek(index358_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 358, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_247s = "\107\uffff";
    static final String dfa_248s = "\1\1\106\uffff";
    static final String dfa_249s = "\1\7\1\uffff\1\4\104\uffff";
    static final String dfa_250s = "\1\u0099\1\uffff\1\u0095\104\uffff";
    static final String dfa_251s = "\1\uffff\1\2\1\uffff\104\1";
    static final String dfa_252s = "\1\0\1\uffff\1\1\104\uffff}>";
    static final String[] dfa_253s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\46\1\43\1\22\2\uffff\1\21\1\72\3\uffff\1\42\1\20\1\76\1\uffff\1\50\1\44\1\uffff\1\23\1\uffff\1\30\1\100\1\37\1\36\2\uffff\1\73\1\uffff\1\61\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\63\1\11\1\60\1\31\1\77\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\101\1\uffff\1\102\1\65\7\uffff\1\24\3\uffff\1\27\2\uffff\1\106\2\uffff\1\70\2\uffff\1\103\1\uffff\1\104\1\uffff\1\64\2\uffff\1\47\1\7\1\1\1\uffff\1\71\1\66\2\uffff\1\67\2\uffff\1\105\12\uffff\1\75\1\74\10\uffff\1\13\1\uffff\1\52\2\uffff\1\51\1\uffff\1\53\1\54\1\55\1\56\1\57\3\uffff\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);
    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);
    static final char[] dfa_249 = DFA.unpackEncodedStringToUnsignedChars(dfa_249s);
    static final char[] dfa_250 = DFA.unpackEncodedStringToUnsignedChars(dfa_250s);
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final short[][] dfa_253 = unpackEncodedStringArray(dfa_253s);
    class DFA359 extends DFA {
        public DFA359(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 359;
            this.eot = dfa_247;
            this.eof = dfa_248;
            this.min = dfa_249;
            this.max = dfa_250;
            this.accept = dfa_251;
            this.special = dfa_252;
            this.transition = dfa_253;
        }
        public String getDescription() {
            return "()* loopback of 22296:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA359_0 = input.LA(1);
                        int index359_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA359_0==EOF||LA359_0==ExclamationMarkEqualsSignEqualsSign||(LA359_0>=LessThanSignLessThanSignEqualsSign && LA359_0<=EqualsSignEqualsSignEqualsSign)||(LA359_0>=ExclamationMarkEqualsSign && LA359_0<=AsteriskEqualsSign)||LA359_0==PlusSignEqualsSign||LA359_0==SolidusEqualsSign||LA359_0==EqualsSignEqualsSign||LA359_0==QuestionMarkQuestionMark||LA359_0==CircumflexAccentEqualsSign||(LA359_0>=VerticalLineEqualsSign && LA359_0<=VerticalLineVerticalLine)||LA359_0==Ampersand||LA359_0==RightParenthesis||(LA359_0>=Comma && LA359_0<=HyphenMinus)||(LA359_0>=Colon && LA359_0<=Semicolon)||LA359_0==EqualsSign||LA359_0==QuestionMark||(LA359_0>=RightSquareBracket && LA359_0<=CircumflexAccent)||(LA359_0>=VerticalLine && LA359_0<=RightCurlyBracket)||LA359_0==RULE_ML_COMMENT||LA359_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA359_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA359_0==LessThanSign) && (synpred214_InternalN4JSParser())) {s = 3;}
                        else if ( (LA359_0==LessThanSignEqualsSign) && (synpred214_InternalN4JSParser())) {s = 4;}
                        else if ( (LA359_0==Instanceof) && (synpred214_InternalN4JSParser())) {s = 5;}
                        else if ( (LA359_0==In) && (synpred214_InternalN4JSParser())) {s = 6;}
                        input.seek(index359_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA359_2 = input.LA(1);
                        int index359_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA359_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA359_2>=4 && LA359_2<=149 && (s=T2S.M_34[LA359_2-(4)])>=0) && (synpred214_InternalN4JSParser())) { /* 65 cases */ }
                        input.seek(index359_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 359, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_254s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_255s = "\1\157\1\uffff\1\u0095\102\uffff";
    static final String dfa_256s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_257s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_258s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\61\1\10\1\56\1\27\1\75\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\10\uffff\1\12\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_254 = DFA.unpackEncodedStringToUnsignedChars(dfa_254s);
    static final char[] dfa_255 = DFA.unpackEncodedStringToUnsignedChars(dfa_255s);
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final short[] dfa_257 = DFA.unpackEncodedString(dfa_257s);
    static final short[][] dfa_258 = unpackEncodedStringArray(dfa_258s);
    class DFA360 extends DFA {
        public DFA360(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 360;
            this.eot = dfa_227;
            this.eof = dfa_228;
            this.min = dfa_254;
            this.max = dfa_255;
            this.accept = dfa_256;
            this.special = dfa_257;
            this.transition = dfa_258;
        }
        public String getDescription() {
            return "()* loopback of 22504:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA360_2 = input.LA(1);
                        int index360_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA360_2>=4 && LA360_2<=149 && (s=T2S.M_35[LA360_2-(4)])>=0) && (synpred216_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA360_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index360_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA360_0 = input.LA(1);
                        int index360_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA360_0==EOF||LA360_0==ExclamationMarkEqualsSignEqualsSign||(LA360_0>=LessThanSignLessThanSignEqualsSign && LA360_0<=EqualsSignEqualsSignEqualsSign)||(LA360_0>=ExclamationMarkEqualsSign && LA360_0<=AsteriskEqualsSign)||LA360_0==PlusSignEqualsSign||LA360_0==SolidusEqualsSign||LA360_0==EqualsSignEqualsSign||LA360_0==QuestionMarkQuestionMark||LA360_0==CircumflexAccentEqualsSign||(LA360_0>=In && LA360_0<=VerticalLineVerticalLine)||LA360_0==Ampersand||(LA360_0>=Comma && LA360_0<=HyphenMinus)||LA360_0==Semicolon||LA360_0==EqualsSign||LA360_0==QuestionMark||LA360_0==CircumflexAccent||LA360_0==VerticalLine) ) {s = 1;}
                        else if ( (LA360_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA360_0==LessThanSign) && (synpred216_InternalN4JSParser())) {s = 3;}
                        else if ( (LA360_0==LessThanSignEqualsSign) && (synpred216_InternalN4JSParser())) {s = 4;}
                        else if ( (LA360_0==Instanceof) && (synpred216_InternalN4JSParser())) {s = 5;}
                        input.seek(index360_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 360, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_259s = "\1\u0099\1\uffff\1\u0095\103\uffff";
    static final String dfa_260s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_261s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\45\1\42\1\21\2\uffff\1\20\1\71\3\uffff\1\41\1\17\1\75\1\uffff\1\47\1\43\1\uffff\1\22\1\uffff\1\27\1\77\1\36\1\35\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\62\1\11\1\57\1\30\1\76\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\100\1\uffff\1\101\1\64\7\uffff\1\23\3\uffff\1\26\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\12\uffff\1\74\1\73\10\uffff\1\13\1\uffff\1\51\2\uffff\1\50\1\uffff\1\52\1\53\1\54\1\55\1\56\3\uffff\1\61",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_259 = DFA.unpackEncodedStringToUnsignedChars(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[][] dfa_261 = unpackEncodedStringArray(dfa_261s);
    class DFA361 extends DFA {
        public DFA361(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 361;
            this.eot = dfa_240;
            this.eof = dfa_241;
            this.min = dfa_242;
            this.max = dfa_259;
            this.accept = dfa_244;
            this.special = dfa_260;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "()* loopback of 22710:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA361_0 = input.LA(1);
                        int index361_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA361_0==EOF||LA361_0==ExclamationMarkEqualsSignEqualsSign||(LA361_0>=LessThanSignLessThanSignEqualsSign && LA361_0<=EqualsSignEqualsSignEqualsSign)||(LA361_0>=ExclamationMarkEqualsSign && LA361_0<=AsteriskEqualsSign)||LA361_0==PlusSignEqualsSign||LA361_0==SolidusEqualsSign||LA361_0==EqualsSignEqualsSign||LA361_0==QuestionMarkQuestionMark||LA361_0==CircumflexAccentEqualsSign||(LA361_0>=VerticalLineEqualsSign && LA361_0<=VerticalLineVerticalLine)||LA361_0==Ampersand||LA361_0==RightParenthesis||(LA361_0>=Comma && LA361_0<=HyphenMinus)||(LA361_0>=Colon && LA361_0<=Semicolon)||LA361_0==EqualsSign||LA361_0==QuestionMark||(LA361_0>=RightSquareBracket && LA361_0<=CircumflexAccent)||(LA361_0>=VerticalLine && LA361_0<=RightCurlyBracket)||LA361_0==RULE_ML_COMMENT||LA361_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA361_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA361_0==LessThanSign) && (synpred218_InternalN4JSParser())) {s = 3;}
                        else if ( (LA361_0==LessThanSignEqualsSign) && (synpred218_InternalN4JSParser())) {s = 4;}
                        else if ( (LA361_0==Instanceof) && (synpred218_InternalN4JSParser())) {s = 5;}
                        else if ( (LA361_0==In) && (synpred218_InternalN4JSParser())) {s = 6;}
                        input.seek(index361_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA361_2 = input.LA(1);
                        int index361_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA361_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA361_2>=4 && LA361_2<=149 && (s=T2S.M_36[LA361_2-(4)])>=0) && (synpred218_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index361_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 361, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_262s = "\1\4\36\0\44\uffff";
    static final String dfa_263s = "\1\u0095\36\0\44\uffff";
    static final String dfa_264s = "\37\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_265s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\44\uffff}>";
    static final String[] dfa_266s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\36\1\33\1\14\2\uffff\1\13\1\37\3\uffff\1\32\1\12\1\37\1\uffff\1\37\1\34\1\uffff\1\15\1\uffff\1\22\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\37\1\23\1\37\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\37\1\uffff\2\37\7\uffff\1\16\3\uffff\1\21\2\uffff\1\37\2\uffff\1\3\2\uffff\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\12\uffff\2\37\10\uffff\1\5\1\uffff\1\37\2\uffff\1\37\1\uffff\5\37\3\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final char[] dfa_263 = DFA.unpackEncodedStringToUnsignedChars(dfa_263s);
    static final short[] dfa_264 = DFA.unpackEncodedString(dfa_264s);
    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);
    static final short[][] dfa_266 = unpackEncodedStringArray(dfa_266s);
    class DFA399 extends DFA {
        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_262;
            this.max = dfa_263;
            this.accept = dfa_264;
            this.special = dfa_265;
            this.transition = dfa_266;
        }
        public String getDescription() {
            return "25750:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= ruleAwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= ruleArrowExpression ) | (this_ConditionalExpression_3= ruleConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA399_1 = input.LA(1);
                        int index399_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA399_2 = input.LA(1);
                        int index399_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA399_3 = input.LA(1);
                        int index399_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA399_4 = input.LA(1);
                        int index399_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA399_5 = input.LA(1);
                        int index399_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA399_6 = input.LA(1);
                        int index399_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA399_7 = input.LA(1);
                        int index399_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA399_8 = input.LA(1);
                        int index399_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA399_9 = input.LA(1);
                        int index399_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA399_10 = input.LA(1);
                        int index399_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA399_11 = input.LA(1);
                        int index399_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA399_12 = input.LA(1);
                        int index399_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA399_13 = input.LA(1);
                        int index399_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA399_14 = input.LA(1);
                        int index399_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA399_15 = input.LA(1);
                        int index399_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA399_16 = input.LA(1);
                        int index399_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA399_17 = input.LA(1);
                        int index399_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA399_18 = input.LA(1);
                        int index399_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA399_19 = input.LA(1);
                        int index399_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA399_20 = input.LA(1);
                        int index399_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA399_21 = input.LA(1);
                        int index399_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA399_22 = input.LA(1);
                        int index399_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA399_23 = input.LA(1);
                        int index399_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA399_24 = input.LA(1);
                        int index399_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA399_25 = input.LA(1);
                        int index399_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA399_26 = input.LA(1);
                        int index399_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA399_27 = input.LA(1);
                        int index399_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA399_28 = input.LA(1);
                        int index399_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA399_29 = input.LA(1);
                        int index399_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA399_30 = input.LA(1);
                        int index399_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index399_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 399, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_267s = "\16\uffff";
    static final String dfa_268s = "\1\14\15\uffff";
    static final String dfa_269s = "\1\70\13\0\2\uffff";
    static final String dfa_270s = "\1\160\13\0\2\uffff";
    static final String dfa_271s = "\14\uffff\1\2\1\1";
    static final String dfa_272s = "\1\uffff\1\0\1\4\1\6\1\12\1\1\1\11\1\7\1\2\1\3\1\5\1\10\2\uffff}>";
    static final String[] dfa_273s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);
    static final char[] dfa_269 = DFA.unpackEncodedStringToUnsignedChars(dfa_269s);
    static final char[] dfa_270 = DFA.unpackEncodedStringToUnsignedChars(dfa_270s);
    static final short[] dfa_271 = DFA.unpackEncodedString(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[][] dfa_273 = unpackEncodedStringArray(dfa_273s);
    class DFA398 extends DFA {
        public DFA398(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 398;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_273;
        }
        public String getDescription() {
            return "25854:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA398_1 = input.LA(1);
                        int index398_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA398_5 = input.LA(1);
                        int index398_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA398_8 = input.LA(1);
                        int index398_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA398_9 = input.LA(1);
                        int index398_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA398_2 = input.LA(1);
                        int index398_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA398_10 = input.LA(1);
                        int index398_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA398_3 = input.LA(1);
                        int index398_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA398_7 = input.LA(1);
                        int index398_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA398_11 = input.LA(1);
                        int index398_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA398_6 = input.LA(1);
                        int index398_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA398_4 = input.LA(1);
                        int index398_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 398, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA401 extends DFA {
        public DFA401(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 401;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_262;
            this.max = dfa_263;
            this.accept = dfa_264;
            this.special = dfa_265;
            this.transition = dfa_266;
        }
        public String getDescription() {
            return "25928:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm1_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm1_ArrowExpression ) | (this_ConditionalExpression_3= norm1_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA401_1 = input.LA(1);
                        int index401_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA401_2 = input.LA(1);
                        int index401_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA401_3 = input.LA(1);
                        int index401_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA401_4 = input.LA(1);
                        int index401_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA401_5 = input.LA(1);
                        int index401_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA401_6 = input.LA(1);
                        int index401_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA401_7 = input.LA(1);
                        int index401_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA401_8 = input.LA(1);
                        int index401_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA401_9 = input.LA(1);
                        int index401_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA401_10 = input.LA(1);
                        int index401_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA401_11 = input.LA(1);
                        int index401_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA401_12 = input.LA(1);
                        int index401_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA401_13 = input.LA(1);
                        int index401_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA401_14 = input.LA(1);
                        int index401_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA401_15 = input.LA(1);
                        int index401_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA401_16 = input.LA(1);
                        int index401_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA401_17 = input.LA(1);
                        int index401_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA401_18 = input.LA(1);
                        int index401_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA401_19 = input.LA(1);
                        int index401_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA401_20 = input.LA(1);
                        int index401_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA401_21 = input.LA(1);
                        int index401_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA401_22 = input.LA(1);
                        int index401_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA401_23 = input.LA(1);
                        int index401_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA401_24 = input.LA(1);
                        int index401_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA401_25 = input.LA(1);
                        int index401_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA401_26 = input.LA(1);
                        int index401_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA401_27 = input.LA(1);
                        int index401_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA401_28 = input.LA(1);
                        int index401_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA401_29 = input.LA(1);
                        int index401_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA401_30 = input.LA(1);
                        int index401_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index401_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 401, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_274s = "\1\u0099\13\0\2\uffff";
    static final String dfa_275s = "\1\uffff\1\0\1\4\1\6\1\12\1\1\1\11\1\7\1\3\1\2\1\5\1\10\2\uffff}>";
    static final String[] dfa_276s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_274 = DFA.unpackEncodedStringToUnsignedChars(dfa_274s);
    static final short[] dfa_275 = DFA.unpackEncodedString(dfa_275s);
    static final short[][] dfa_276 = unpackEncodedStringArray(dfa_276s);
    class DFA400 extends DFA {
        public DFA400(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 400;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_274;
            this.accept = dfa_271;
            this.special = dfa_275;
            this.transition = dfa_276;
        }
        public String getDescription() {
            return "26032:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA400_1 = input.LA(1);
                        int index400_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA400_5 = input.LA(1);
                        int index400_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA400_9 = input.LA(1);
                        int index400_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA400_8 = input.LA(1);
                        int index400_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA400_2 = input.LA(1);
                        int index400_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA400_10 = input.LA(1);
                        int index400_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA400_3 = input.LA(1);
                        int index400_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA400_7 = input.LA(1);
                        int index400_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA400_11 = input.LA(1);
                        int index400_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA400_6 = input.LA(1);
                        int index400_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA400_4 = input.LA(1);
                        int index400_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 400, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_277s = "\1\4\35\0\45\uffff";
    static final String dfa_278s = "\1\u0095\35\0\45\uffff";
    static final String dfa_279s = "\36\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_280s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\45\uffff}>";
    static final String[] dfa_281s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\37\3\uffff\1\31\1\11\1\37\1\uffff\1\37\1\33\1\uffff\1\14\1\uffff\1\21\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\3\37\1\22\1\37\6\uffff\1\6\1\10\1\37\1\34\1\7\7\uffff\1\37\1\uffff\2\37\7\uffff\1\15\3\uffff\1\20\2\uffff\1\37\2\uffff\1\3\2\uffff\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\12\uffff\2\37\10\uffff\1\5\1\uffff\1\37\2\uffff\1\37\1\uffff\5\37\3\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_277 = DFA.unpackEncodedStringToUnsignedChars(dfa_277s);
    static final char[] dfa_278 = DFA.unpackEncodedStringToUnsignedChars(dfa_278s);
    static final short[] dfa_279 = DFA.unpackEncodedString(dfa_279s);
    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final short[][] dfa_281 = unpackEncodedStringArray(dfa_281s);
    class DFA403 extends DFA {
        public DFA403(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 403;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_277;
            this.max = dfa_278;
            this.accept = dfa_279;
            this.special = dfa_280;
            this.transition = dfa_281;
        }
        public String getDescription() {
            return "26106:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm2_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm2_ArrowExpression ) | this_YieldExpression_3= ruleYieldExpression | (this_ConditionalExpression_4= norm2_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA403_1 = input.LA(1);
                        int index403_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA403_2 = input.LA(1);
                        int index403_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA403_3 = input.LA(1);
                        int index403_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA403_4 = input.LA(1);
                        int index403_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA403_5 = input.LA(1);
                        int index403_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA403_6 = input.LA(1);
                        int index403_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA403_7 = input.LA(1);
                        int index403_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA403_8 = input.LA(1);
                        int index403_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA403_9 = input.LA(1);
                        int index403_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA403_10 = input.LA(1);
                        int index403_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA403_11 = input.LA(1);
                        int index403_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA403_12 = input.LA(1);
                        int index403_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA403_13 = input.LA(1);
                        int index403_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA403_14 = input.LA(1);
                        int index403_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA403_15 = input.LA(1);
                        int index403_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA403_16 = input.LA(1);
                        int index403_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA403_17 = input.LA(1);
                        int index403_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA403_18 = input.LA(1);
                        int index403_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA403_19 = input.LA(1);
                        int index403_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA403_20 = input.LA(1);
                        int index403_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA403_21 = input.LA(1);
                        int index403_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA403_22 = input.LA(1);
                        int index403_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA403_23 = input.LA(1);
                        int index403_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA403_24 = input.LA(1);
                        int index403_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA403_25 = input.LA(1);
                        int index403_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA403_26 = input.LA(1);
                        int index403_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA403_27 = input.LA(1);
                        int index403_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA403_28 = input.LA(1);
                        int index403_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA403_29 = input.LA(1);
                        int index403_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index403_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 403, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_282s = "\1\150\13\0\2\uffff";
    static final String dfa_283s = "\1\uffff\1\0\1\7\1\1\1\10\1\2\1\11\1\3\1\4\1\5\1\12\1\6\2\uffff}>";
    static final String[] dfa_284s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[][] dfa_284 = unpackEncodedStringArray(dfa_284s);
    class DFA402 extends DFA {
        public DFA402(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 402;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_282;
            this.accept = dfa_271;
            this.special = dfa_283;
            this.transition = dfa_284;
        }
        public String getDescription() {
            return "26219:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA402_1 = input.LA(1);
                        int index402_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA402_3 = input.LA(1);
                        int index402_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA402_5 = input.LA(1);
                        int index402_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA402_7 = input.LA(1);
                        int index402_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA402_8 = input.LA(1);
                        int index402_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA402_9 = input.LA(1);
                        int index402_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA402_11 = input.LA(1);
                        int index402_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA402_2 = input.LA(1);
                        int index402_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA402_4 = input.LA(1);
                        int index402_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA402_6 = input.LA(1);
                        int index402_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA402_10 = input.LA(1);
                        int index402_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index402_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 402, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA405 extends DFA {
        public DFA405(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 405;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_277;
            this.max = dfa_278;
            this.accept = dfa_279;
            this.special = dfa_280;
            this.transition = dfa_281;
        }
        public String getDescription() {
            return "26293:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm3_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm3_ArrowExpression ) | this_YieldExpression_3= norm1_YieldExpression | (this_ConditionalExpression_4= norm3_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA405_1 = input.LA(1);
                        int index405_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA405_2 = input.LA(1);
                        int index405_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA405_3 = input.LA(1);
                        int index405_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA405_4 = input.LA(1);
                        int index405_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA405_5 = input.LA(1);
                        int index405_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA405_6 = input.LA(1);
                        int index405_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA405_7 = input.LA(1);
                        int index405_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA405_8 = input.LA(1);
                        int index405_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA405_9 = input.LA(1);
                        int index405_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA405_10 = input.LA(1);
                        int index405_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA405_11 = input.LA(1);
                        int index405_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA405_12 = input.LA(1);
                        int index405_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA405_13 = input.LA(1);
                        int index405_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA405_14 = input.LA(1);
                        int index405_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA405_15 = input.LA(1);
                        int index405_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA405_16 = input.LA(1);
                        int index405_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA405_17 = input.LA(1);
                        int index405_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA405_18 = input.LA(1);
                        int index405_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA405_19 = input.LA(1);
                        int index405_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA405_20 = input.LA(1);
                        int index405_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA405_21 = input.LA(1);
                        int index405_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA405_22 = input.LA(1);
                        int index405_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA405_23 = input.LA(1);
                        int index405_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA405_24 = input.LA(1);
                        int index405_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA405_25 = input.LA(1);
                        int index405_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA405_26 = input.LA(1);
                        int index405_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA405_27 = input.LA(1);
                        int index405_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA405_28 = input.LA(1);
                        int index405_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA405_29 = input.LA(1);
                        int index405_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index405_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 405, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_285s = "\1\uffff\1\4\1\0\1\5\1\1\1\6\1\7\1\10\1\3\1\11\1\2\1\12\2\uffff}>";
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    class DFA404 extends DFA {
        public DFA404(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 404;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_274;
            this.accept = dfa_271;
            this.special = dfa_285;
            this.transition = dfa_276;
        }
        public String getDescription() {
            return "26406:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA404_2 = input.LA(1);
                        int index404_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA404_4 = input.LA(1);
                        int index404_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA404_10 = input.LA(1);
                        int index404_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA404_8 = input.LA(1);
                        int index404_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA404_1 = input.LA(1);
                        int index404_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA404_3 = input.LA(1);
                        int index404_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA404_5 = input.LA(1);
                        int index404_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA404_6 = input.LA(1);
                        int index404_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA404_7 = input.LA(1);
                        int index404_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA404_9 = input.LA(1);
                        int index404_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA404_11 = input.LA(1);
                        int index404_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index404_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 404, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_286s = "\115\uffff";
    static final String dfa_287s = "\1\100\114\uffff";
    static final String dfa_288s = "\1\4\17\uffff\1\0\37\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_289s = "\1\u0095\17\uffff\1\0\37\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_290s = "\1\uffff\17\1\1\uffff\37\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_291s = "\1\0\17\uffff\1\1\37\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_292s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\3\uffff\1\100\2\uffff\1\6\1\10\1\37\1\34\1\7\3\uffff\1\100\1\uffff\2\100\1\72\1\100\1\73\1\60\6\uffff\1\100\1\15\2\uffff\1\100\1\20\1\100\1\uffff\1\77\2\uffff\1\3\2\uffff\1\74\1\100\1\75\1\uffff\1\57\1\uffff\1\100\1\42\2\100\1\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\10\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_286 = DFA.unpackEncodedString(dfa_286s);
    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final char[] dfa_288 = DFA.unpackEncodedStringToUnsignedChars(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final short[] dfa_290 = DFA.unpackEncodedString(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[][] dfa_292 = unpackEncodedStringArray(dfa_292s);
    class DFA407 extends DFA {
        public DFA407(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 407;
            this.eot = dfa_286;
            this.eof = dfa_287;
            this.min = dfa_288;
            this.max = dfa_289;
            this.accept = dfa_290;
            this.special = dfa_291;
            this.transition = dfa_292;
        }
        public String getDescription() {
            return "26516:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA407_0 = input.LA(1);
                        int index407_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA407_0>=5 && LA407_0<=134 && (s=T2S.M_37[LA407_0-(5)])>=0) && (synpred277_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA407_0==Of) ) {s = 16;}
                        else if ((LA407_0>=4 && LA407_0<=149 && (s=T2S.M_38[LA407_0-(4)])>=0) && (synpred277_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA407_0==SolidusEqualsSign) ) {s = 48;}
                        else if ((LA407_0>=16 && LA407_0<=125 && (s=T2S.M_39[LA407_0-(16)])>=0) && (synpred277_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA407_0==HyphenMinus) ) {s = 61;}
                        else if ( (LA407_0==Tilde) && (synpred277_InternalN4JSParser())) {s = 62;}
                        else if ( (LA407_0==ExclamationMark) && (synpred277_InternalN4JSParser())) {s = 63;}
                        else if ( (LA407_0==EOF||LA407_0==LessThanSignLessThanSignEqualsSign||LA407_0==PercentSignEqualsSign||(LA407_0>=AmpersandEqualsSign && LA407_0<=AsteriskEqualsSign)||LA407_0==PlusSignEqualsSign||LA407_0==CircumflexAccentEqualsSign||LA407_0==In||LA407_0==VerticalLineEqualsSign||LA407_0==Comma||LA407_0==Semicolon||(LA407_0>=EqualsSign && LA407_0<=GreaterThanSign)) ) {s = 64;}
                        input.seek(index407_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA407_16 = input.LA(1);
                        int index407_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index407_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA407_48 = input.LA(1);
                        int index407_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index407_48);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA407_61 = input.LA(1);
                        int index407_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index407_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 407, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_293s = "\121\uffff";
    static final String dfa_294s = "\1\100\120\uffff";
    static final String dfa_295s = "\1\4\57\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_296s = "\1\u0099\57\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_297s = "\1\uffff\57\1\1\uffff\14\1\1\uffff\2\1\1\2\20\uffff";
    static final String dfa_298s = "\1\0\57\uffff\1\1\14\uffff\1\2\23\uffff}>";
    static final String[] dfa_299s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\3\uffff\1\100\2\uffff\1\6\1\10\1\37\1\34\1\7\3\uffff\1\100\1\uffff\2\100\1\72\1\100\1\73\1\60\6\uffff\1\100\1\15\3\uffff\1\20\1\100\1\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\100\1\75\1\uffff\1\57\2\100\1\42\2\100\1\uffff\1\2\1\61\1\100\1\uffff\1\62\1\uffff\1\100\1\76\12\uffff\1\66\1\65\10\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55\1\uffff\1\100\1\uffff\1\100",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[] dfa_294 = DFA.unpackEncodedString(dfa_294s);
    static final char[] dfa_295 = DFA.unpackEncodedStringToUnsignedChars(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[][] dfa_299 = unpackEncodedStringArray(dfa_299s);
    class DFA409 extends DFA {
        public DFA409(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 409;
            this.eot = dfa_293;
            this.eof = dfa_294;
            this.min = dfa_295;
            this.max = dfa_296;
            this.accept = dfa_297;
            this.special = dfa_298;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "26578:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA409_0 = input.LA(1);
                        int index409_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA409_0>=4 && LA409_0<=149 && (s=T2S.M_40[LA409_0-(4)])>=0) && (synpred279_InternalN4JSParser())) { /* 47 cases */ }
                        else if ( (LA409_0==SolidusEqualsSign) ) {s = 48;}
                        else if ((LA409_0>=16 && LA409_0<=125 && (s=T2S.M_39[LA409_0-(16)])>=0) && (synpred279_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA409_0==HyphenMinus) ) {s = 61;}
                        else if ( (LA409_0==Tilde) && (synpred279_InternalN4JSParser())) {s = 62;}
                        else if ( (LA409_0==ExclamationMark) && (synpred279_InternalN4JSParser())) {s = 63;}
                        else if ( (LA409_0==EOF||LA409_0==LessThanSignLessThanSignEqualsSign||LA409_0==PercentSignEqualsSign||(LA409_0>=AmpersandEqualsSign && LA409_0<=AsteriskEqualsSign)||LA409_0==PlusSignEqualsSign||LA409_0==CircumflexAccentEqualsSign||LA409_0==VerticalLineEqualsSign||LA409_0==RightParenthesis||LA409_0==Comma||(LA409_0>=Colon && LA409_0<=Semicolon)||(LA409_0>=EqualsSign && LA409_0<=GreaterThanSign)||LA409_0==RightSquareBracket||LA409_0==RightCurlyBracket||LA409_0==RULE_ML_COMMENT||LA409_0==RULE_EOL) ) {s = 64;}
                        input.seek(index409_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA409_48 = input.LA(1);
                        int index409_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index409_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA409_61 = input.LA(1);
                        int index409_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index409_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 409, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_300s = "\136\uffff";
    static final String dfa_301s = "\1\2\135\uffff";
    static final String dfa_302s = "\1\4\1\0\134\uffff";
    static final String dfa_303s = "\1\u0095\1\0\134\uffff";
    static final String dfa_304s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_305s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_306s = {
            "\62\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_300 = DFA.unpackEncodedString(dfa_300s);
    static final short[] dfa_301 = DFA.unpackEncodedString(dfa_301s);
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final char[] dfa_303 = DFA.unpackEncodedStringToUnsignedChars(dfa_303s);
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[][] dfa_306 = unpackEncodedStringArray(dfa_306s);
    class DFA441 extends DFA {
        public DFA441(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 441;
            this.eot = dfa_300;
            this.eof = dfa_301;
            this.min = dfa_302;
            this.max = dfa_303;
            this.accept = dfa_304;
            this.special = dfa_305;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "28953:3: ( ( ( LeftParenthesis )=>otherlv_1= LeftParenthesis ) ( ( (lv_args_2_0= ruleAnnotationArgument ) ) (otherlv_3= Comma ( (lv_args_4_0= ruleAnnotationArgument ) ) )* )? otherlv_5= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA441_1 = input.LA(1);
                        int index441_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 93;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index441_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 441, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_307s = "\1\4\12\0\4\uffff";
    static final String dfa_308s = "\1\u0095\12\0\4\uffff";
    static final String dfa_309s = "\13\uffff\3\1\1\2";
    static final String dfa_310s = "\1\11\1\12\1\7\1\10\1\1\1\2\1\3\1\5\1\6\1\4\1\0\4\uffff}>";
    static final String[] dfa_311s = {
            "\2\16\2\uffff\1\16\10\uffff\1\16\13\uffff\1\16\2\uffff\1\16\4\uffff\1\11\2\uffff\1\16\2\uffff\1\16\4\uffff\1\13\1\16\1\10\2\16\25\uffff\1\15\21\uffff\1\16\2\uffff\1\16\1\uffff\1\16\1\uffff\1\14\5\uffff\1\16\1\uffff\1\16\2\uffff\1\16\2\uffff\1\16\24\uffff\1\16\1\uffff\1\2\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\6\1\7\3\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);
    class DFA442 extends DFA {
        public DFA442(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 442;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "29030:2: ( ( ( ruleLiteralAnnotationArgument )=>this_LiteralAnnotationArgument_0= ruleLiteralAnnotationArgument ) | this_TypeRefAnnotationArgument_1= ruleTypeRefAnnotationArgument )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA442_10 = input.LA(1);
                        int index442_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA442_4 = input.LA(1);
                        int index442_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA442_5 = input.LA(1);
                        int index442_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA442_6 = input.LA(1);
                        int index442_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA442_9 = input.LA(1);
                        int index442_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA442_7 = input.LA(1);
                        int index442_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA442_8 = input.LA(1);
                        int index442_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA442_2 = input.LA(1);
                        int index442_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA442_3 = input.LA(1);
                        int index442_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA442_0 = input.LA(1);
                        int index442_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA442_0>=37 && LA442_0<=149 && (s=T2S.M_42[LA442_0-(37)])>=0)) { /* 10 cases */ }
                        else if ( (LA442_0==Null) && (synpred289_InternalN4JSParser())) {s = 11;}
                        else if ( (LA442_0==Solidus) && (synpred289_InternalN4JSParser())) {s = 12;}
                        else if ( (LA442_0==SolidusEqualsSign) && (synpred289_InternalN4JSParser())) {s = 13;}
                        else if ( ((LA442_0>=Intersection && LA442_0<=Constructor)||LA442_0==Promisify||LA442_0==Default||LA442_0==Target||LA442_0==Await||LA442_0==Union||LA442_0==This||LA442_0==This_1||(LA442_0>=Type && LA442_0<=Void)||LA442_0==LeftParenthesis||LA442_0==PlusSign||LA442_0==HyphenMinus||LA442_0==QuestionMark||LA442_0==LeftSquareBracket||LA442_0==LeftCurlyBracket||LA442_0==Tilde||LA442_0==RULE_IDENTIFIER) ) {s = 14;}
                        input.seek(index442_0);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA442_1 = input.LA(1);
                        int index442_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index442_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 442, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_312s = "\1\4\1\uffff\12\0\1\uffff\1\0\1\uffff\75\0\4\uffff";
    static final String dfa_313s = "\1\u0095\1\uffff\12\0\1\uffff\1\0\1\uffff\75\0\4\uffff";
    static final String dfa_314s = "\1\uffff\1\1\12\uffff\1\4\1\uffff\1\4\75\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_315s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\13\1\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\4\uffff}>";
    static final String[] dfa_316s = {
            "\1\74\1\67\1\100\1\42\1\76\1\101\1\103\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\15\1\77\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\102\1\13\1\51\1\53\20\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\114\1\uffff\1\16\7\uffff\1\14\3\uffff\1\1\1\113\32\uffff\1\17\1\uffff\1\106\2\uffff\1\105\1\uffff\1\107\1\110\1\uffff\1\111\1\112\3\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);
    class DFA500 extends DFA {
        public DFA500(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 500;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "31177:2: (this_AnnotatedN4MemberDeclaration_0= ruleAnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=>this_N4GetterDeclaration_1= ruleN4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= ruleN4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= ruleN4MethodDeclaration ) | this_N4FieldDeclaration_4= ruleN4FieldDeclaration | this_N4CallableConstructorDeclaration_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA500_0 = input.LA(1);
                        int index500_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA500_0>=11 && LA500_0<=106 && (s=T2S.M_43[LA500_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA500_0==LessThanSign) && (synpred304_InternalN4JSParser())) {s = 12;}
                        else if ( (LA500_0==Async) ) {s = 13;}
                        else if ( (LA500_0==Asterisk) && (synpred304_InternalN4JSParser())) {s = 14;}
                        else if ((LA500_0>=4 && LA500_0<=149 && (s=T2S.M_44[LA500_0-(4)])>=0)) { /* 63 cases */ }
                        input.seek(index500_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA500_2 = input.LA(1);
                        int index500_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA500_3 = input.LA(1);
                        int index500_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA500_4 = input.LA(1);
                        int index500_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA500_5 = input.LA(1);
                        int index500_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA500_6 = input.LA(1);
                        int index500_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA500_7 = input.LA(1);
                        int index500_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA500_8 = input.LA(1);
                        int index500_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA500_9 = input.LA(1);
                        int index500_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA500_10 = input.LA(1);
                        int index500_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA500_11 = input.LA(1);
                        int index500_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA500_13 = input.LA(1);
                        int index500_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA500_15 = input.LA(1);
                        int index500_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA500_16 = input.LA(1);
                        int index500_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA500_17 = input.LA(1);
                        int index500_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA500_18 = input.LA(1);
                        int index500_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA500_19 = input.LA(1);
                        int index500_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA500_20 = input.LA(1);
                        int index500_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA500_21 = input.LA(1);
                        int index500_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA500_22 = input.LA(1);
                        int index500_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA500_23 = input.LA(1);
                        int index500_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA500_24 = input.LA(1);
                        int index500_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA500_25 = input.LA(1);
                        int index500_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA500_26 = input.LA(1);
                        int index500_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA500_27 = input.LA(1);
                        int index500_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA500_28 = input.LA(1);
                        int index500_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA500_29 = input.LA(1);
                        int index500_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA500_30 = input.LA(1);
                        int index500_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA500_31 = input.LA(1);
                        int index500_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA500_32 = input.LA(1);
                        int index500_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA500_33 = input.LA(1);
                        int index500_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA500_34 = input.LA(1);
                        int index500_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA500_35 = input.LA(1);
                        int index500_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA500_36 = input.LA(1);
                        int index500_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA500_37 = input.LA(1);
                        int index500_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA500_38 = input.LA(1);
                        int index500_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA500_39 = input.LA(1);
                        int index500_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA500_40 = input.LA(1);
                        int index500_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA500_41 = input.LA(1);
                        int index500_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA500_42 = input.LA(1);
                        int index500_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA500_43 = input.LA(1);
                        int index500_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA500_44 = input.LA(1);
                        int index500_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA500_45 = input.LA(1);
                        int index500_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA500_46 = input.LA(1);
                        int index500_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA500_47 = input.LA(1);
                        int index500_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA500_48 = input.LA(1);
                        int index500_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA500_49 = input.LA(1);
                        int index500_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA500_50 = input.LA(1);
                        int index500_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA500_51 = input.LA(1);
                        int index500_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA500_52 = input.LA(1);
                        int index500_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA500_53 = input.LA(1);
                        int index500_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA500_54 = input.LA(1);
                        int index500_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA500_55 = input.LA(1);
                        int index500_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA500_56 = input.LA(1);
                        int index500_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA500_57 = input.LA(1);
                        int index500_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA500_58 = input.LA(1);
                        int index500_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA500_59 = input.LA(1);
                        int index500_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA500_60 = input.LA(1);
                        int index500_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA500_61 = input.LA(1);
                        int index500_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA500_62 = input.LA(1);
                        int index500_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA500_63 = input.LA(1);
                        int index500_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA500_64 = input.LA(1);
                        int index500_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA500_65 = input.LA(1);
                        int index500_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA500_66 = input.LA(1);
                        int index500_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA500_67 = input.LA(1);
                        int index500_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA500_68 = input.LA(1);
                        int index500_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA500_69 = input.LA(1);
                        int index500_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA500_70 = input.LA(1);
                        int index500_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA500_71 = input.LA(1);
                        int index500_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA500_72 = input.LA(1);
                        int index500_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA500_73 = input.LA(1);
                        int index500_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA500_74 = input.LA(1);
                        int index500_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA500_75 = input.LA(1);
                        int index500_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index500_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 500, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA501 extends DFA {
        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "31454:2: (this_AnnotatedN4MemberDeclaration_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=>this_N4GetterDeclaration_1= norm1_N4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= norm1_N4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= norm1_N4MethodDeclaration ) | this_N4FieldDeclaration_4= norm1_N4FieldDeclaration | this_N4CallableConstructorDeclaration_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA501_0 = input.LA(1);
                        int index501_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA501_0>=11 && LA501_0<=106 && (s=T2S.M_43[LA501_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA501_0==LessThanSign) && (synpred307_InternalN4JSParser())) {s = 12;}
                        else if ( (LA501_0==Async) ) {s = 13;}
                        else if ( (LA501_0==Asterisk) && (synpred307_InternalN4JSParser())) {s = 14;}
                        else if ((LA501_0>=4 && LA501_0<=149 && (s=T2S.M_44[LA501_0-(4)])>=0)) { /* 63 cases */ }
                        input.seek(index501_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA501_2 = input.LA(1);
                        int index501_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA501_3 = input.LA(1);
                        int index501_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA501_4 = input.LA(1);
                        int index501_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA501_5 = input.LA(1);
                        int index501_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA501_6 = input.LA(1);
                        int index501_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA501_7 = input.LA(1);
                        int index501_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA501_8 = input.LA(1);
                        int index501_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA501_9 = input.LA(1);
                        int index501_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA501_10 = input.LA(1);
                        int index501_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA501_11 = input.LA(1);
                        int index501_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA501_13 = input.LA(1);
                        int index501_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA501_15 = input.LA(1);
                        int index501_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA501_16 = input.LA(1);
                        int index501_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA501_17 = input.LA(1);
                        int index501_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA501_18 = input.LA(1);
                        int index501_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA501_19 = input.LA(1);
                        int index501_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA501_20 = input.LA(1);
                        int index501_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA501_21 = input.LA(1);
                        int index501_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA501_22 = input.LA(1);
                        int index501_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA501_23 = input.LA(1);
                        int index501_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA501_24 = input.LA(1);
                        int index501_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA501_25 = input.LA(1);
                        int index501_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA501_26 = input.LA(1);
                        int index501_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA501_27 = input.LA(1);
                        int index501_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA501_28 = input.LA(1);
                        int index501_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA501_29 = input.LA(1);
                        int index501_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA501_30 = input.LA(1);
                        int index501_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA501_31 = input.LA(1);
                        int index501_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA501_32 = input.LA(1);
                        int index501_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA501_33 = input.LA(1);
                        int index501_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA501_34 = input.LA(1);
                        int index501_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA501_35 = input.LA(1);
                        int index501_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA501_36 = input.LA(1);
                        int index501_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA501_37 = input.LA(1);
                        int index501_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA501_38 = input.LA(1);
                        int index501_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA501_39 = input.LA(1);
                        int index501_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA501_40 = input.LA(1);
                        int index501_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA501_41 = input.LA(1);
                        int index501_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA501_42 = input.LA(1);
                        int index501_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA501_43 = input.LA(1);
                        int index501_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA501_44 = input.LA(1);
                        int index501_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA501_45 = input.LA(1);
                        int index501_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA501_46 = input.LA(1);
                        int index501_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA501_47 = input.LA(1);
                        int index501_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA501_48 = input.LA(1);
                        int index501_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA501_49 = input.LA(1);
                        int index501_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA501_50 = input.LA(1);
                        int index501_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA501_51 = input.LA(1);
                        int index501_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA501_52 = input.LA(1);
                        int index501_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA501_53 = input.LA(1);
                        int index501_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA501_54 = input.LA(1);
                        int index501_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA501_55 = input.LA(1);
                        int index501_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA501_56 = input.LA(1);
                        int index501_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA501_57 = input.LA(1);
                        int index501_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA501_58 = input.LA(1);
                        int index501_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA501_59 = input.LA(1);
                        int index501_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA501_60 = input.LA(1);
                        int index501_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA501_61 = input.LA(1);
                        int index501_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA501_62 = input.LA(1);
                        int index501_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA501_63 = input.LA(1);
                        int index501_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA501_64 = input.LA(1);
                        int index501_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA501_65 = input.LA(1);
                        int index501_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA501_66 = input.LA(1);
                        int index501_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA501_67 = input.LA(1);
                        int index501_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA501_68 = input.LA(1);
                        int index501_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA501_69 = input.LA(1);
                        int index501_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA501_70 = input.LA(1);
                        int index501_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA501_71 = input.LA(1);
                        int index501_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA501_72 = input.LA(1);
                        int index501_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA501_73 = input.LA(1);
                        int index501_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA501_74 = input.LA(1);
                        int index501_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA501_75 = input.LA(1);
                        int index501_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index501_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 501, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\116\uffff";
    static final String dfa_318s = "\1\4\12\0\2\uffff\76\0\3\uffff";
    static final String dfa_319s = "\1\u0095\12\0\2\uffff\76\0\3\uffff";
    static final String dfa_320s = "\13\uffff\2\3\76\uffff\1\1\1\2\1\4";
    static final String dfa_321s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\3\uffff}>";
    static final String[] dfa_322s = {
            "\1\73\1\66\1\77\1\41\1\75\1\100\1\102\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\15\1\76\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\101\1\12\1\50\1\52\20\uffff\1\64\1\27\1\36\1\40\1\67\7\uffff\1\14\7\uffff\1\13\4\uffff\1\112\32\uffff\1\16\1\uffff\1\105\2\uffff\1\104\1\uffff\1\106\1\107\1\uffff\1\110\1\111\3\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] dfa_317 = DFA.unpackEncodedString(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final char[] dfa_319 = DFA.unpackEncodedStringToUnsignedChars(dfa_319s);
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final short[][] dfa_322 = unpackEncodedStringArray(dfa_322s);
    class DFA513 extends DFA {
        public DFA513(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 513;
            this.eot = dfa_317;
            this.eof = dfa_317;
            this.min = dfa_318;
            this.max = dfa_319;
            this.accept = dfa_320;
            this.special = dfa_321;
            this.transition = dfa_322;
        }
        public String getDescription() {
            return "31746:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= ruleFormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeParameters_18= ruleTypeParameters[$current] )? ( ( ( (lv_generator_19_0= Asterisk ) ) ( (lv_declaredName_20_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_21= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_22= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_24= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () this_FieldDeclarationImpl_27= ruleFieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA513_0 = input.LA(1);
                        int index513_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA513_0>=11 && LA513_0<=63 && (s=T2S.M_47[LA513_0-(11)])>=0)) { /* 10 cases */ }
                        else if ( (LA513_0==LessThanSign) && (synpred313_InternalN4JSParser())) {s = 11;}
                        else if ( (LA513_0==Asterisk) && (synpred313_InternalN4JSParser())) {s = 12;}
                        else if ((LA513_0>=4 && LA513_0<=149 && (s=T2S.M_48[LA513_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index513_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA513_1 = input.LA(1);
                        int index513_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA513_2 = input.LA(1);
                        int index513_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA513_3 = input.LA(1);
                        int index513_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA513_4 = input.LA(1);
                        int index513_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA513_5 = input.LA(1);
                        int index513_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA513_6 = input.LA(1);
                        int index513_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA513_7 = input.LA(1);
                        int index513_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA513_8 = input.LA(1);
                        int index513_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA513_9 = input.LA(1);
                        int index513_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA513_10 = input.LA(1);
                        int index513_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA513_13 = input.LA(1);
                        int index513_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA513_14 = input.LA(1);
                        int index513_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA513_15 = input.LA(1);
                        int index513_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA513_16 = input.LA(1);
                        int index513_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA513_17 = input.LA(1);
                        int index513_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA513_18 = input.LA(1);
                        int index513_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA513_19 = input.LA(1);
                        int index513_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA513_20 = input.LA(1);
                        int index513_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA513_21 = input.LA(1);
                        int index513_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA513_22 = input.LA(1);
                        int index513_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA513_23 = input.LA(1);
                        int index513_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA513_24 = input.LA(1);
                        int index513_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA513_25 = input.LA(1);
                        int index513_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA513_26 = input.LA(1);
                        int index513_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA513_27 = input.LA(1);
                        int index513_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA513_28 = input.LA(1);
                        int index513_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA513_29 = input.LA(1);
                        int index513_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA513_30 = input.LA(1);
                        int index513_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA513_31 = input.LA(1);
                        int index513_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA513_32 = input.LA(1);
                        int index513_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA513_33 = input.LA(1);
                        int index513_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA513_34 = input.LA(1);
                        int index513_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA513_35 = input.LA(1);
                        int index513_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA513_36 = input.LA(1);
                        int index513_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA513_37 = input.LA(1);
                        int index513_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA513_38 = input.LA(1);
                        int index513_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA513_39 = input.LA(1);
                        int index513_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA513_40 = input.LA(1);
                        int index513_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA513_41 = input.LA(1);
                        int index513_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA513_42 = input.LA(1);
                        int index513_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA513_43 = input.LA(1);
                        int index513_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA513_44 = input.LA(1);
                        int index513_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA513_45 = input.LA(1);
                        int index513_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA513_46 = input.LA(1);
                        int index513_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA513_47 = input.LA(1);
                        int index513_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA513_48 = input.LA(1);
                        int index513_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA513_49 = input.LA(1);
                        int index513_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA513_50 = input.LA(1);
                        int index513_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA513_51 = input.LA(1);
                        int index513_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA513_52 = input.LA(1);
                        int index513_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA513_53 = input.LA(1);
                        int index513_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA513_54 = input.LA(1);
                        int index513_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA513_55 = input.LA(1);
                        int index513_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA513_56 = input.LA(1);
                        int index513_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA513_57 = input.LA(1);
                        int index513_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA513_58 = input.LA(1);
                        int index513_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA513_59 = input.LA(1);
                        int index513_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA513_60 = input.LA(1);
                        int index513_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA513_61 = input.LA(1);
                        int index513_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA513_62 = input.LA(1);
                        int index513_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA513_63 = input.LA(1);
                        int index513_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA513_64 = input.LA(1);
                        int index513_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA513_65 = input.LA(1);
                        int index513_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA513_66 = input.LA(1);
                        int index513_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA513_67 = input.LA(1);
                        int index513_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA513_68 = input.LA(1);
                        int index513_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA513_69 = input.LA(1);
                        int index513_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA513_70 = input.LA(1);
                        int index513_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA513_71 = input.LA(1);
                        int index513_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA513_72 = input.LA(1);
                        int index513_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA513_73 = input.LA(1);
                        int index513_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA513_74 = input.LA(1);
                        int index513_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index513_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 513, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_323s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_324s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_325s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_326s = {
            "\7\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\20\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\32\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\2\1\3\uffff\1\1",
            "",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\32\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            ""
    };
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final char[] dfa_324 = DFA.unpackEncodedStringToUnsignedChars(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);
    class DFA509 extends DFA {
        public DFA509(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 509;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 32166:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    class DFA525 extends DFA {
        public DFA525(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 525;
            this.eot = dfa_317;
            this.eof = dfa_317;
            this.min = dfa_318;
            this.max = dfa_319;
            this.accept = dfa_320;
            this.special = dfa_321;
            this.transition = dfa_322;
        }
        public String getDescription() {
            return "32348:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= norm1_FormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeParameters_18= ruleTypeParameters[$current] )? ( ( ( (lv_generator_19_0= Asterisk ) ) ( (lv_declaredName_20_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_21= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_22= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_24= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () this_FieldDeclarationImpl_27= norm1_FieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA525_0 = input.LA(1);
                        int index525_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA525_0>=11 && LA525_0<=63 && (s=T2S.M_47[LA525_0-(11)])>=0)) { /* 10 cases */ }
                        else if ( (LA525_0==LessThanSign) && (synpred321_InternalN4JSParser())) {s = 11;}
                        else if ( (LA525_0==Asterisk) && (synpred321_InternalN4JSParser())) {s = 12;}
                        else if ((LA525_0>=4 && LA525_0<=149 && (s=T2S.M_48[LA525_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index525_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA525_1 = input.LA(1);
                        int index525_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA525_2 = input.LA(1);
                        int index525_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA525_3 = input.LA(1);
                        int index525_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA525_4 = input.LA(1);
                        int index525_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA525_5 = input.LA(1);
                        int index525_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA525_6 = input.LA(1);
                        int index525_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA525_7 = input.LA(1);
                        int index525_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA525_8 = input.LA(1);
                        int index525_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA525_9 = input.LA(1);
                        int index525_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA525_10 = input.LA(1);
                        int index525_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA525_13 = input.LA(1);
                        int index525_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA525_14 = input.LA(1);
                        int index525_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA525_15 = input.LA(1);
                        int index525_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA525_16 = input.LA(1);
                        int index525_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA525_17 = input.LA(1);
                        int index525_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA525_18 = input.LA(1);
                        int index525_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA525_19 = input.LA(1);
                        int index525_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA525_20 = input.LA(1);
                        int index525_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA525_21 = input.LA(1);
                        int index525_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA525_22 = input.LA(1);
                        int index525_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA525_23 = input.LA(1);
                        int index525_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA525_24 = input.LA(1);
                        int index525_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA525_25 = input.LA(1);
                        int index525_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA525_26 = input.LA(1);
                        int index525_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA525_27 = input.LA(1);
                        int index525_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA525_28 = input.LA(1);
                        int index525_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA525_29 = input.LA(1);
                        int index525_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA525_30 = input.LA(1);
                        int index525_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA525_31 = input.LA(1);
                        int index525_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA525_32 = input.LA(1);
                        int index525_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA525_33 = input.LA(1);
                        int index525_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA525_34 = input.LA(1);
                        int index525_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA525_35 = input.LA(1);
                        int index525_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA525_36 = input.LA(1);
                        int index525_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA525_37 = input.LA(1);
                        int index525_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA525_38 = input.LA(1);
                        int index525_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA525_39 = input.LA(1);
                        int index525_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA525_40 = input.LA(1);
                        int index525_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA525_41 = input.LA(1);
                        int index525_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA525_42 = input.LA(1);
                        int index525_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA525_43 = input.LA(1);
                        int index525_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA525_44 = input.LA(1);
                        int index525_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA525_45 = input.LA(1);
                        int index525_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA525_46 = input.LA(1);
                        int index525_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA525_47 = input.LA(1);
                        int index525_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA525_48 = input.LA(1);
                        int index525_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA525_49 = input.LA(1);
                        int index525_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA525_50 = input.LA(1);
                        int index525_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA525_51 = input.LA(1);
                        int index525_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA525_52 = input.LA(1);
                        int index525_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA525_53 = input.LA(1);
                        int index525_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA525_54 = input.LA(1);
                        int index525_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA525_55 = input.LA(1);
                        int index525_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA525_56 = input.LA(1);
                        int index525_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA525_57 = input.LA(1);
                        int index525_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA525_58 = input.LA(1);
                        int index525_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA525_59 = input.LA(1);
                        int index525_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA525_60 = input.LA(1);
                        int index525_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA525_61 = input.LA(1);
                        int index525_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA525_62 = input.LA(1);
                        int index525_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA525_63 = input.LA(1);
                        int index525_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA525_64 = input.LA(1);
                        int index525_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA525_65 = input.LA(1);
                        int index525_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA525_66 = input.LA(1);
                        int index525_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA525_67 = input.LA(1);
                        int index525_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA525_68 = input.LA(1);
                        int index525_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA525_69 = input.LA(1);
                        int index525_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA525_70 = input.LA(1);
                        int index525_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA525_71 = input.LA(1);
                        int index525_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA525_72 = input.LA(1);
                        int index525_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA525_73 = input.LA(1);
                        int index525_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA525_74 = input.LA(1);
                        int index525_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index525_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 525, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA521 extends DFA {
        public DFA521(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 521;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 32768:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_327s = "\2\uffff\10\1\1\uffff";
    static final String dfa_328s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_329s = {
            "\7\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\20\uffff\5\1\24\uffff\1\1\32\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\2\1\3\uffff\1\1",
            "",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\25\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);
    class DFA526 extends DFA {
        public DFA526(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 526;
            this.eot = dfa_20;
            this.eof = dfa_327;
            this.min = dfa_323;
            this.max = dfa_328;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 32942:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    class DFA530 extends DFA {
        public DFA530(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 530;
            this.eot = dfa_20;
            this.eof = dfa_327;
            this.min = dfa_323;
            this.max = dfa_328;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 33052:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    class DFA534 extends DFA {
        public DFA534(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 534;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 33283:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    class DFA538 extends DFA {
        public DFA538(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 538;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 33481:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_330s = "\1\154\1\u0086\1\uffff\1\u0086\1\uffff";
    static final String[] dfa_331s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\27\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\27\uffff\1\4",
            ""
    };
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final short[][] dfa_331 = unpackEncodedStringArray(dfa_331s);
    class DFA576 extends DFA {
        public DFA576(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 576;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_330;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_331;
        }
        public String getDescription() {
            return "()* loopback of 35134:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_332s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\27\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\27\uffff\1\4",
            ""
    };
    static final short[][] dfa_332 = unpackEncodedStringArray(dfa_332s);
    class DFA582 extends DFA {
        public DFA582(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 582;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_330;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_332;
        }
        public String getDescription() {
            return "()* loopback of 35271:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_333s = "\113\uffff";
    static final String dfa_334s = "\1\uffff\1\111\40\uffff\1\111\4\uffff\32\111\12\uffff";
    static final String dfa_335s = "\1\4\1\140\40\uffff\1\140\4\uffff\32\140\12\uffff";
    static final String dfa_336s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\32\160\12\uffff";
    static final String dfa_337s = "\2\uffff\40\1\1\uffff\4\1\32\uffff\10\1\1\2\1\1";
    static final String dfa_338s = "\1\3\1\22\40\uffff\1\12\4\uffff\1\16\1\23\1\27\1\32\1\0\1\4\1\7\1\13\1\17\1\24\1\30\1\33\1\1\1\5\1\10\1\14\1\20\1\25\1\31\1\34\1\2\1\6\1\11\1\15\1\21\1\26\12\uffff}>";
    static final String[] dfa_339s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\100\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\20\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\111\1\110\32\uffff\1\1\1\uffff\1\103\2\uffff\1\102\1\uffff\1\104\1\105\1\uffff\1\106\1\107\3\uffff\1\101",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final char[] dfa_335 = DFA.unpackEncodedStringToUnsignedChars(dfa_335s);
    static final char[] dfa_336 = DFA.unpackEncodedStringToUnsignedChars(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final short[] dfa_338 = DFA.unpackEncodedString(dfa_338s);
    static final short[][] dfa_339 = unpackEncodedStringArray(dfa_339s);
    class DFA586 extends DFA {
        public DFA586(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 586;
            this.eot = dfa_333;
            this.eof = dfa_334;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_338;
            this.transition = dfa_339;
        }
        public String getDescription() {
            return "35363:2: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= ruleLiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= ruleBindingElement ) ) ) | ( (lv_value_3_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA586_43 = input.LA(1);
                        int index586_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_43==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_43==EOF||LA586_43==Comma||LA586_43==EqualsSign||LA586_43==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_43);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA586_51 = input.LA(1);
                        int index586_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_51==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_51==EOF||LA586_51==Comma||LA586_51==EqualsSign||LA586_51==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA586_59 = input.LA(1);
                        int index586_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_59==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_59==EOF||LA586_59==Comma||LA586_59==EqualsSign||LA586_59==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA586_0 = input.LA(1);
                        int index586_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA586_0>=7 && LA586_0<=134 && (s=T2S.M_51[LA586_0-(7)])>=0) && (synpred346_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA586_0==Yield) ) {s = 34;}
                        else if ( (LA586_0==Null) && (synpred346_InternalN4JSParser())) {s = 35;}
                        else if ( (LA586_0==True) && (synpred346_InternalN4JSParser())) {s = 36;}
                        else if ( (LA586_0==False) && (synpred346_InternalN4JSParser())) {s = 37;}
                        else if ( (LA586_0==Enum) && (synpred346_InternalN4JSParser())) {s = 38;}
                        else if ((LA586_0>=4 && LA586_0<=86 && (s=T2S.M_52[LA586_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA586_0==RULE_STRING) && (synpred346_InternalN4JSParser())) {s = 65;}
                        else if ( (LA586_0==RULE_DOUBLE) && (synpred346_InternalN4JSParser())) {s = 66;}
                        else if ( (LA586_0==RULE_INT) && (synpred346_InternalN4JSParser())) {s = 67;}
                        else if ( (LA586_0==RULE_BINARY_INT) && (synpred346_InternalN4JSParser())) {s = 68;}
                        else if ( (LA586_0==RULE_OCTAL_INT) && (synpred346_InternalN4JSParser())) {s = 69;}
                        else if ( (LA586_0==RULE_HEX_INT) && (synpred346_InternalN4JSParser())) {s = 70;}
                        else if ( (LA586_0==RULE_SCIENTIFIC_INT) && (synpred346_InternalN4JSParser())) {s = 71;}
                        else if ( (LA586_0==LeftSquareBracket) && (synpred346_InternalN4JSParser())) {s = 72;}
                        else if ( (LA586_0==CommercialAt) ) {s = 73;}
                        input.seek(index586_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA586_44 = input.LA(1);
                        int index586_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_44==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_44==EOF||LA586_44==Comma||LA586_44==EqualsSign||LA586_44==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA586_52 = input.LA(1);
                        int index586_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_52==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_52==EOF||LA586_52==Comma||LA586_52==EqualsSign||LA586_52==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_52);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA586_60 = input.LA(1);
                        int index586_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_60==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_60==EOF||LA586_60==Comma||LA586_60==EqualsSign||LA586_60==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_60);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA586_45 = input.LA(1);
                        int index586_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_45==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_45==EOF||LA586_45==Comma||LA586_45==EqualsSign||LA586_45==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_45);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA586_53 = input.LA(1);
                        int index586_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_53==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_53==EOF||LA586_53==Comma||LA586_53==EqualsSign||LA586_53==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_53);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA586_61 = input.LA(1);
                        int index586_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_61==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_61==EOF||LA586_61==Comma||LA586_61==EqualsSign||LA586_61==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA586_34 = input.LA(1);
                        int index586_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_34==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_34==EOF||LA586_34==Comma||LA586_34==EqualsSign||LA586_34==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA586_46 = input.LA(1);
                        int index586_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_46==EOF||LA586_46==Comma||LA586_46==EqualsSign||LA586_46==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_46==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_46);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA586_54 = input.LA(1);
                        int index586_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_54==EOF||LA586_54==Comma||LA586_54==EqualsSign||LA586_54==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_54==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA586_62 = input.LA(1);
                        int index586_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_62==EOF||LA586_62==Comma||LA586_62==EqualsSign||LA586_62==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_62==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_62);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA586_39 = input.LA(1);
                        int index586_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_39==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_39==EOF||LA586_39==Comma||LA586_39==EqualsSign||LA586_39==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_39);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA586_47 = input.LA(1);
                        int index586_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_47==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_47==EOF||LA586_47==Comma||LA586_47==EqualsSign||LA586_47==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_47);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA586_55 = input.LA(1);
                        int index586_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_55==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_55==EOF||LA586_55==Comma||LA586_55==EqualsSign||LA586_55==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA586_63 = input.LA(1);
                        int index586_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_63==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_63==EOF||LA586_63==Comma||LA586_63==EqualsSign||LA586_63==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_63);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA586_1 = input.LA(1);
                        int index586_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_1==EOF||LA586_1==Comma||LA586_1==EqualsSign||LA586_1==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_1==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_1);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA586_40 = input.LA(1);
                        int index586_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_40==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_40==EOF||LA586_40==Comma||LA586_40==EqualsSign||LA586_40==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_40);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA586_48 = input.LA(1);
                        int index586_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_48==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_48==EOF||LA586_48==Comma||LA586_48==EqualsSign||LA586_48==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_48);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA586_56 = input.LA(1);
                        int index586_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_56==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_56==EOF||LA586_56==Comma||LA586_56==EqualsSign||LA586_56==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_56);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA586_64 = input.LA(1);
                        int index586_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_64==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_64==EOF||LA586_64==Comma||LA586_64==EqualsSign||LA586_64==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_64);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA586_41 = input.LA(1);
                        int index586_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_41==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_41==EOF||LA586_41==Comma||LA586_41==EqualsSign||LA586_41==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_41);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA586_49 = input.LA(1);
                        int index586_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_49==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_49==EOF||LA586_49==Comma||LA586_49==EqualsSign||LA586_49==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_49);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA586_57 = input.LA(1);
                        int index586_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_57==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        else if ( (LA586_57==EOF||LA586_57==Comma||LA586_57==EqualsSign||LA586_57==RightCurlyBracket) ) {s = 73;}
                        input.seek(index586_57);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA586_42 = input.LA(1);
                        int index586_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_42==EOF||LA586_42==Comma||LA586_42==EqualsSign||LA586_42==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_42==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_42);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA586_50 = input.LA(1);
                        int index586_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_50==EOF||LA586_50==Comma||LA586_50==EqualsSign||LA586_50==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_50==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_50);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA586_58 = input.LA(1);
                        int index586_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA586_58==EOF||LA586_58==Comma||LA586_58==EqualsSign||LA586_58==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA586_58==Colon) && (synpred346_InternalN4JSParser())) {s = 74;}
                        input.seek(index586_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 586, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_340s = "\1\4\1\140\45\uffff\32\140\12\uffff";
    static final String dfa_341s = "\1\u0095\1\160\45\uffff\32\160\12\uffff";
    static final String dfa_342s = "\2\uffff\45\1\32\uffff\10\1\1\2\1\1";
    static final String dfa_343s = "\1\6\1\22\45\uffff\1\12\1\16\1\23\1\26\1\31\1\0\1\3\1\7\1\13\1\17\1\24\1\27\1\32\1\1\1\4\1\10\1\14\1\20\1\25\1\30\1\33\1\2\1\5\1\11\1\15\1\21\12\uffff}>";
    static final String[] dfa_344s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\100\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\20\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\111\1\110\32\uffff\1\1\1\uffff\1\103\2\uffff\1\102\1\uffff\1\104\1\105\1\uffff\1\106\1\107\3\uffff\1\101",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_340 = DFA.unpackEncodedStringToUnsignedChars(dfa_340s);
    static final char[] dfa_341 = DFA.unpackEncodedStringToUnsignedChars(dfa_341s);
    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final short[] dfa_343 = DFA.unpackEncodedString(dfa_343s);
    static final short[][] dfa_344 = unpackEncodedStringArray(dfa_344s);
    class DFA587 extends DFA {
        public DFA587(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 587;
            this.eot = dfa_333;
            this.eof = dfa_333;
            this.min = dfa_340;
            this.max = dfa_341;
            this.accept = dfa_342;
            this.special = dfa_343;
            this.transition = dfa_344;
        }
        public String getDescription() {
            return "35453:2: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= norm1_BindingElement ) ) ) | ( (lv_value_3_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA587_44 = input.LA(1);
                        int index587_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_44==Comma||LA587_44==EqualsSign||LA587_44==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_44==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA587_52 = input.LA(1);
                        int index587_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_52==Comma||LA587_52==EqualsSign||LA587_52==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_52==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_52);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA587_60 = input.LA(1);
                        int index587_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_60==Comma||LA587_60==EqualsSign||LA587_60==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_60==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA587_45 = input.LA(1);
                        int index587_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_45==Comma||LA587_45==EqualsSign||LA587_45==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_45==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_45);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA587_53 = input.LA(1);
                        int index587_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_53==Comma||LA587_53==EqualsSign||LA587_53==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_53==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_53);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA587_61 = input.LA(1);
                        int index587_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_61==Comma||LA587_61==EqualsSign||LA587_61==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_61==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_61);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA587_0 = input.LA(1);
                        int index587_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA587_0>=7 && LA587_0<=134 && (s=T2S.M_53[LA587_0-(7)])>=0) && (synpred347_InternalN4JSParser())) { /* 38 cases */ }
                        else if ((LA587_0>=4 && LA587_0<=86 && (s=T2S.M_52[LA587_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA587_0==RULE_STRING) && (synpred347_InternalN4JSParser())) {s = 65;}
                        else if ( (LA587_0==RULE_DOUBLE) && (synpred347_InternalN4JSParser())) {s = 66;}
                        else if ( (LA587_0==RULE_INT) && (synpred347_InternalN4JSParser())) {s = 67;}
                        else if ( (LA587_0==RULE_BINARY_INT) && (synpred347_InternalN4JSParser())) {s = 68;}
                        else if ( (LA587_0==RULE_OCTAL_INT) && (synpred347_InternalN4JSParser())) {s = 69;}
                        else if ( (LA587_0==RULE_HEX_INT) && (synpred347_InternalN4JSParser())) {s = 70;}
                        else if ( (LA587_0==RULE_SCIENTIFIC_INT) && (synpred347_InternalN4JSParser())) {s = 71;}
                        else if ( (LA587_0==LeftSquareBracket) && (synpred347_InternalN4JSParser())) {s = 72;}
                        else if ( (LA587_0==CommercialAt) ) {s = 73;}
                        input.seek(index587_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA587_46 = input.LA(1);
                        int index587_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_46==Comma||LA587_46==EqualsSign||LA587_46==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_46==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA587_54 = input.LA(1);
                        int index587_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_54==Comma||LA587_54==EqualsSign||LA587_54==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_54==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_54);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA587_62 = input.LA(1);
                        int index587_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_62==Comma||LA587_62==EqualsSign||LA587_62==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_62==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_62);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA587_39 = input.LA(1);
                        int index587_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_39==Comma||LA587_39==EqualsSign||LA587_39==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_39==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_39);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA587_47 = input.LA(1);
                        int index587_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_47==Comma||LA587_47==EqualsSign||LA587_47==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_47==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA587_55 = input.LA(1);
                        int index587_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_55==Comma||LA587_55==EqualsSign||LA587_55==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_55==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA587_63 = input.LA(1);
                        int index587_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_63==Comma||LA587_63==EqualsSign||LA587_63==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_63==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA587_40 = input.LA(1);
                        int index587_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_40==Comma||LA587_40==EqualsSign||LA587_40==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_40==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA587_48 = input.LA(1);
                        int index587_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_48==Comma||LA587_48==EqualsSign||LA587_48==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_48==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA587_56 = input.LA(1);
                        int index587_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_56==Comma||LA587_56==EqualsSign||LA587_56==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_56==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA587_64 = input.LA(1);
                        int index587_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_64==Comma||LA587_64==EqualsSign||LA587_64==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_64==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_64);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA587_1 = input.LA(1);
                        int index587_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_1==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        else if ( (LA587_1==Comma||LA587_1==EqualsSign||LA587_1==RightCurlyBracket) ) {s = 73;}
                        input.seek(index587_1);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA587_41 = input.LA(1);
                        int index587_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_41==Comma||LA587_41==EqualsSign||LA587_41==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_41==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_41);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA587_49 = input.LA(1);
                        int index587_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_49==Comma||LA587_49==EqualsSign||LA587_49==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_49==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_49);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA587_57 = input.LA(1);
                        int index587_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_57==Comma||LA587_57==EqualsSign||LA587_57==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_57==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA587_42 = input.LA(1);
                        int index587_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_42==Comma||LA587_42==EqualsSign||LA587_42==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_42==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_42);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA587_50 = input.LA(1);
                        int index587_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_50==Comma||LA587_50==EqualsSign||LA587_50==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_50==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_50);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA587_58 = input.LA(1);
                        int index587_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_58==Comma||LA587_58==EqualsSign||LA587_58==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_58==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_58);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA587_43 = input.LA(1);
                        int index587_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_43==Comma||LA587_43==EqualsSign||LA587_43==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_43==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_43);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA587_51 = input.LA(1);
                        int index587_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_51==Comma||LA587_51==EqualsSign||LA587_51==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_51==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_51);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA587_59 = input.LA(1);
                        int index587_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_59==Comma||LA587_59==EqualsSign||LA587_59==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA587_59==Colon) && (synpred347_InternalN4JSParser())) {s = 74;}
                        input.seek(index587_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 587, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_345s = "\110\uffff";
    static final String dfa_346s = "\1\107\107\uffff";
    static final String dfa_347s = "\1\4\6\uffff\100\0\1\uffff";
    static final String dfa_348s = "\1\u0091\6\uffff\100\0\1\uffff";
    static final String dfa_349s = "\1\uffff\6\1\100\uffff\1\2";
    static final String dfa_350s = "\1\51\6\uffff\1\16\1\23\1\34\1\44\1\55\1\65\1\75\1\3\1\12\1\22\1\33\1\45\1\56\1\66\1\76\1\4\1\13\1\24\1\35\1\46\1\57\1\67\1\77\1\5\1\14\1\25\1\36\1\47\1\60\1\70\1\100\1\6\1\15\1\26\1\37\1\50\1\61\1\71\1\27\1\40\1\52\1\62\1\72\1\0\1\7\1\17\1\30\1\41\1\53\1\63\1\73\1\1\1\10\1\20\1\31\1\42\1\54\1\64\1\74\1\2\1\11\1\21\1\32\1\43\1\uffff}>";
    static final String[] dfa_351s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\106\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\107\10\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\107\1\uffff\1\107\3\uffff\2\107\5\uffff\1\107\27\uffff\1\7\1\uffff\1\1\4\uffff\1\3\1\4\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final char[] dfa_347 = DFA.unpackEncodedStringToUnsignedChars(dfa_347s);
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[][] dfa_351 = unpackEncodedStringArray(dfa_351s);
    class DFA605 extends DFA {
        public DFA605(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 605;
            this.eot = dfa_345;
            this.eof = dfa_346;
            this.min = dfa_347;
            this.max = dfa_348;
            this.accept = dfa_349;
            this.special = dfa_350;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "36699:4: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> (this_INT_3= RULE_INT | this_HEX_INT_4= RULE_HEX_INT | this_BINARY_INT_5= RULE_BINARY_INT | this_OCTAL_INT_6= RULE_OCTAL_INT | this_SCIENTIFIC_INT_7= RULE_SCIENTIFIC_INT | this_LEGACY_OCTAL_INT_8= RULE_LEGACY_OCTAL_INT | this_IdentifierName_9= ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA605_50 = input.LA(1);
                        int index605_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA605_58 = input.LA(1);
                        int index605_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_58);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA605_66 = input.LA(1);
                        int index605_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA605_14 = input.LA(1);
                        int index605_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA605_22 = input.LA(1);
                        int index605_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA605_30 = input.LA(1);
                        int index605_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_30);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA605_38 = input.LA(1);
                        int index605_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA605_51 = input.LA(1);
                        int index605_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_51);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA605_59 = input.LA(1);
                        int index605_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_59);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA605_67 = input.LA(1);
                        int index605_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_67);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA605_15 = input.LA(1);
                        int index605_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA605_23 = input.LA(1);
                        int index605_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA605_31 = input.LA(1);
                        int index605_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_31);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA605_39 = input.LA(1);
                        int index605_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_39);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA605_7 = input.LA(1);
                        int index605_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_7);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA605_52 = input.LA(1);
                        int index605_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA605_60 = input.LA(1);
                        int index605_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_60);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA605_68 = input.LA(1);
                        int index605_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_68);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA605_16 = input.LA(1);
                        int index605_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_16);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA605_8 = input.LA(1);
                        int index605_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_8);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA605_24 = input.LA(1);
                        int index605_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA605_32 = input.LA(1);
                        int index605_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA605_40 = input.LA(1);
                        int index605_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA605_45 = input.LA(1);
                        int index605_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_45);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA605_53 = input.LA(1);
                        int index605_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_53);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA605_61 = input.LA(1);
                        int index605_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_61);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA605_69 = input.LA(1);
                        int index605_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_69);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA605_17 = input.LA(1);
                        int index605_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_17);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA605_9 = input.LA(1);
                        int index605_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_9);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA605_25 = input.LA(1);
                        int index605_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_25);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA605_33 = input.LA(1);
                        int index605_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA605_41 = input.LA(1);
                        int index605_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_41);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA605_46 = input.LA(1);
                        int index605_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_46);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA605_54 = input.LA(1);
                        int index605_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_54);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA605_62 = input.LA(1);
                        int index605_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_62);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA605_70 = input.LA(1);
                        int index605_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_70);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA605_10 = input.LA(1);
                        int index605_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_10);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA605_18 = input.LA(1);
                        int index605_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_18);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA605_26 = input.LA(1);
                        int index605_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_26);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA605_34 = input.LA(1);
                        int index605_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_34);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA605_42 = input.LA(1);
                        int index605_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA605_0 = input.LA(1);
                        int index605_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA605_0==RULE_INT) && (synpred350_InternalN4JSParser())) {s = 1;}
                        else if ( (LA605_0==RULE_HEX_INT) && (synpred350_InternalN4JSParser())) {s = 2;}
                        else if ( (LA605_0==RULE_BINARY_INT) && (synpred350_InternalN4JSParser())) {s = 3;}
                        else if ( (LA605_0==RULE_OCTAL_INT) && (synpred350_InternalN4JSParser())) {s = 4;}
                        else if ( (LA605_0==RULE_SCIENTIFIC_INT) && (synpred350_InternalN4JSParser())) {s = 5;}
                        else if ( (LA605_0==RULE_LEGACY_OCTAL_INT) && (synpred350_InternalN4JSParser())) {s = 6;}
                        else if ((LA605_0>=4 && LA605_0<=134 && (s=T2S.M_55[LA605_0-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA605_0==EOF||LA605_0==HyphenMinusHyphenMinus||LA605_0==HyphenMinus||LA605_0==Solidus||(LA605_0>=EqualsSign && LA605_0<=GreaterThanSign)||LA605_0==LeftCurlyBracket) ) {s = 71;}
                        input.seek(index605_0);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA605_47 = input.LA(1);
                        int index605_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_47);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA605_55 = input.LA(1);
                        int index605_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_55);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA605_63 = input.LA(1);
                        int index605_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_63);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA605_11 = input.LA(1);
                        int index605_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_11);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA605_19 = input.LA(1);
                        int index605_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_19);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA605_27 = input.LA(1);
                        int index605_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_27);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA605_35 = input.LA(1);
                        int index605_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_35);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA605_43 = input.LA(1);
                        int index605_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_43);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA605_48 = input.LA(1);
                        int index605_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_48);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA605_56 = input.LA(1);
                        int index605_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_56);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA605_64 = input.LA(1);
                        int index605_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_64);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA605_12 = input.LA(1);
                        int index605_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_12);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA605_20 = input.LA(1);
                        int index605_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_20);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA605_28 = input.LA(1);
                        int index605_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_28);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA605_36 = input.LA(1);
                        int index605_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_36);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA605_44 = input.LA(1);
                        int index605_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_44);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA605_49 = input.LA(1);
                        int index605_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_49);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA605_57 = input.LA(1);
                        int index605_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_57);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA605_65 = input.LA(1);
                        int index605_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_65);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA605_13 = input.LA(1);
                        int index605_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_13);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA605_21 = input.LA(1);
                        int index605_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_21);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA605_29 = input.LA(1);
                        int index605_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_29);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA605_37 = input.LA(1);
                        int index605_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index605_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 605, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_352s = "\1\4\14\uffff\1\0\21\uffff";
    static final String dfa_353s = "\1\u0095\14\uffff\1\0\21\uffff";
    static final String dfa_354s = "\1\uffff\1\1\14\uffff\1\3\1\4\15\uffff\1\2\1\5";
    static final String dfa_355s = "\15\uffff\1\0\21\uffff}>";
    static final String[] dfa_356s = {
            "\2\17\2\uffff\1\17\10\uffff\1\17\13\uffff\1\17\2\uffff\1\17\4\uffff\1\1\2\uffff\1\17\2\uffff\1\17\5\uffff\1\17\1\1\2\17\47\uffff\1\15\2\uffff\1\1\1\uffff\1\1\11\uffff\1\16\2\uffff\1\17\2\uffff\1\17\24\uffff\1\17\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_352 = DFA.unpackEncodedStringToUnsignedChars(dfa_352s);
    static final char[] dfa_353 = DFA.unpackEncodedStringToUnsignedChars(dfa_353s);
    static final short[] dfa_354 = DFA.unpackEncodedString(dfa_354s);
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final short[][] dfa_356 = unpackEncodedStringArray(dfa_356s);
    class DFA617 extends DFA {
        public DFA617(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 617;
            this.eot = dfa_53;
            this.eof = dfa_53;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "37286:2: (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis ruleArrow ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA617_13 = input.LA(1);
                        int index617_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_InternalN4JSParser()) ) {s = 29;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index617_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 617, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_357s = "\172\uffff";
    static final String dfa_358s = "\1\2\171\uffff";
    static final String dfa_359s = "\1\4\1\0\170\uffff";
    static final String dfa_360s = "\1\u0099\1\0\170\uffff";
    static final String dfa_361s = "\2\uffff\1\2\166\uffff\1\1";
    static final String dfa_362s = "\1\uffff\1\0\170\uffff}>";
    static final String[] dfa_363s = {
            "\63\2\1\uffff\26\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[] dfa_358 = DFA.unpackEncodedString(dfa_358s);
    static final char[] dfa_359 = DFA.unpackEncodedStringToUnsignedChars(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final short[][] dfa_363 = unpackEncodedStringArray(dfa_363s);
    class DFA618 extends DFA {
        public DFA618(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 618;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_363;
        }
        public String getDescription() {
            return "37379:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA618_1 = input.LA(1);
                        int index618_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index618_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 618, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_364s = {
            "\63\2\1\uffff\26\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);
    class DFA620 extends DFA {
        public DFA620(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 620;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "37436:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA620_1 = input.LA(1);
                        int index620_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index620_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 620, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_365s = "\1\uffff\1\35\14\uffff\1\35\3\uffff\3\35\12\uffff";
    static final String dfa_366s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\12\uffff";
    static final String dfa_367s = "\1\u0095\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\12\uffff";
    static final String dfa_368s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\10\1\1\2\1\1";
    static final String dfa_369s = "\1\6\1\4\12\uffff\1\10\1\uffff\1\11\1\5\1\3\1\0\1\7\1\1\1\2\12\uffff}>";
    static final String[] dfa_370s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\1\uffff\1\35\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\4\uffff\1\35\2\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\2\35\1\17\1\35\6\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\5\uffff\1\35\2\uffff\1\35\1\uffff\1\35\7\uffff\1\35\1\uffff\1\35\2\uffff\1\35\2\uffff\1\35\24\uffff\1\1\1\uffff\1\35\2\uffff\1\35\1\uffff\5\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36\11\uffff\1\35",
            "",
            "\1\35\1\uffff\1\35\1\uffff\2\35\3\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\3\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\3\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\3\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_365 = DFA.unpackEncodedString(dfa_365s);
    static final char[] dfa_366 = DFA.unpackEncodedStringToUnsignedChars(dfa_366s);
    static final char[] dfa_367 = DFA.unpackEncodedStringToUnsignedChars(dfa_367s);
    static final short[] dfa_368 = DFA.unpackEncodedString(dfa_368s);
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[][] dfa_370 = unpackEncodedStringArray(dfa_370s);
    class DFA637 extends DFA {
        public DFA637(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 637;
            this.eot = dfa_53;
            this.eof = dfa_365;
            this.min = dfa_366;
            this.max = dfa_367;
            this.accept = dfa_368;
            this.special = dfa_369;
            this.transition = dfa_370;
        }
        public String getDescription() {
            return "38374:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA637_17 = input.LA(1);
                        int index637_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_17==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        else if ( (LA637_17==LeftCurlyBracket) ) {s = 29;}
                        input.seek(index637_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA637_19 = input.LA(1);
                        int index637_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_19==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        else if ( (LA637_19==EOF||LA637_19==Ampersand||LA637_19==RightParenthesis||(LA637_19>=PlusSign && LA637_19<=Comma)||(LA637_19>=LessThanSign && LA637_19<=EqualsSign)||LA637_19==QuestionMark||LA637_19==LeftSquareBracket||LA637_19==VerticalLine) ) {s = 29;}
                        input.seek(index637_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA637_20 = input.LA(1);
                        int index637_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_20==EOF||LA637_20==Ampersand||LA637_20==RightParenthesis||(LA637_20>=PlusSign && LA637_20<=Comma)||(LA637_20>=LessThanSign && LA637_20<=EqualsSign)||LA637_20==QuestionMark||LA637_20==LeftSquareBracket||LA637_20==VerticalLine) ) {s = 29;}
                        else if ( (LA637_20==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA637_16 = input.LA(1);
                        int index637_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_16==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA637_16==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA637_1 = input.LA(1);
                        int index637_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_1==EOF||LA637_1==Ampersand||LA637_1==RightParenthesis||(LA637_1>=PlusSign && LA637_1<=Comma)||LA637_1==FullStop||(LA637_1>=LessThanSign && LA637_1<=EqualsSign)||LA637_1==QuestionMark||LA637_1==LeftSquareBracket||LA637_1==VerticalLine) ) {s = 29;}
                        else if ( (LA637_1==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA637_15 = input.LA(1);
                        int index637_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_15==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        else if ( (LA637_15==LeftCurlyBracket) ) {s = 29;}
                        input.seek(index637_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA637_0 = input.LA(1);
                        int index637_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA637_0>=12 && LA637_0<=134 && (s=T2S.M_56[LA637_0-(12)])>=0) && (synpred359_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA637_0==Constructor) ) {s = 12;}
                        else if ( (LA637_0==Of) && (synpred359_InternalN4JSParser())) {s = 13;}
                        else if ( (LA637_0==Target) ) {s = 14;}
                        else if ( (LA637_0==Type) ) {s = 15;}
                        else if ( (LA637_0==Union) ) {s = 16;}
                        else if ( (LA637_0==Intersection) ) {s = 17;}
                        else if ( (LA637_0==This) ) {s = 18;}
                        else if ( (LA637_0==Promisify) ) {s = 19;}
                        else if ( (LA637_0==Await) ) {s = 20;}
                        else if ( (LA637_0==Async) && (synpred359_InternalN4JSParser())) {s = 21;}
                        else if ( (LA637_0==Implements) && (synpred359_InternalN4JSParser())) {s = 22;}
                        else if ( (LA637_0==Interface) && (synpred359_InternalN4JSParser())) {s = 23;}
                        else if ( (LA637_0==Private) && (synpred359_InternalN4JSParser())) {s = 24;}
                        else if ( (LA637_0==Protected) && (synpred359_InternalN4JSParser())) {s = 25;}
                        else if ( (LA637_0==Public) && (synpred359_InternalN4JSParser())) {s = 26;}
                        else if ( (LA637_0==Out) && (synpred359_InternalN4JSParser())) {s = 27;}
                        else if ( (LA637_0==Namespace) && (synpred359_InternalN4JSParser())) {s = 28;}
                        else if ( (LA637_0==Default||LA637_0==False||(LA637_0>=This_1 && LA637_0<=True)||LA637_0==Void||LA637_0==LeftParenthesis||LA637_0==PlusSign||LA637_0==HyphenMinus||LA637_0==QuestionMark||LA637_0==LeftSquareBracket||LA637_0==LeftCurlyBracket||LA637_0==Tilde||LA637_0==RULE_INT||LA637_0==RULE_DOUBLE||(LA637_0>=RULE_BINARY_INT && LA637_0<=RULE_SCIENTIFIC_INT)||LA637_0==RULE_STRING) ) {s = 29;}
                        input.seek(index637_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA637_18 = input.LA(1);
                        int index637_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_18==EOF||LA637_18==Ampersand||LA637_18==RightParenthesis||(LA637_18>=PlusSign && LA637_18<=Comma)||(LA637_18>=LessThanSign && LA637_18<=EqualsSign)||LA637_18==QuestionMark||LA637_18==LeftSquareBracket||LA637_18==VerticalLine) ) {s = 29;}
                        else if ( (LA637_18==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA637_12 = input.LA(1);
                        int index637_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_12==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA637_12==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA637_14 = input.LA(1);
                        int index637_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA637_14==EOF||LA637_14==Ampersand||LA637_14==RightParenthesis||(LA637_14>=PlusSign && LA637_14<=Comma)||(LA637_14>=LessThanSign && LA637_14<=EqualsSign)||LA637_14==QuestionMark||LA637_14==LeftSquareBracket||LA637_14==VerticalLine) ) {s = 29;}
                        else if ( (LA637_14==Colon) && (synpred359_InternalN4JSParser())) {s = 30;}
                        input.seek(index637_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 637, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_371s = {
            "\63\2\1\uffff\26\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\12\uffff\2\2\10\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_371 = unpackEncodedStringArray(dfa_371s);
    class DFA643 extends DFA {
        public DFA643(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 643;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_371;
        }
        public String getDescription() {
            return "38729:3: ( ( LessThanSign )=>this_TypeArguments_1= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA643_1 = input.LA(1);
                        int index643_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index643_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 643, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA644 extends DFA {
        public DFA644(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 644;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_371;
        }
        public String getDescription() {
            return "38792:3: ( ( LessThanSign )=>this_TypeArguments_2= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA644_1 = input.LA(1);
                        int index644_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index644_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 644, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_372s = "\1\4\2\0\1\uffff\76\0\3\uffff";
    static final String dfa_373s = "\1\u0086\2\0\1\uffff\76\0\3\uffff";
    static final String dfa_374s = "\3\uffff\1\3\76\uffff\1\1\1\4\1\2";
    static final String dfa_375s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\3\uffff}>";
    static final String[] dfa_376s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\101\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\20\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\37\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_372 = DFA.unpackEncodedStringToUnsignedChars(dfa_372s);
    static final char[] dfa_373 = DFA.unpackEncodedStringToUnsignedChars(dfa_373s);
    static final short[] dfa_374 = DFA.unpackEncodedString(dfa_374s);
    static final short[] dfa_375 = DFA.unpackEncodedString(dfa_375s);
    static final short[][] dfa_376 = unpackEncodedStringArray(dfa_376s);
    class DFA652 extends DFA {
        public DFA652(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 652;
            this.eot = dfa_227;
            this.eof = dfa_227;
            this.min = dfa_372;
            this.max = dfa_373;
            this.accept = dfa_374;
            this.special = dfa_375;
            this.transition = dfa_376;
        }
        public String getDescription() {
            return "39142:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA652_0 = input.LA(1);
                        int index652_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA652_0==Get) ) {s = 1;}
                        else if ( (LA652_0==Set) ) {s = 2;}
                        else if ( (LA652_0==LessThanSign) && (synpred365_InternalN4JSParser())) {s = 3;}
                        else if ((LA652_0>=4 && LA652_0<=134 && (s=T2S.M_57[LA652_0-(4)])>=0)) { /* 63 cases */ }
                        input.seek(index652_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA652_1 = input.LA(1);
                        int index652_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_InternalN4JSParser()) ) {s = 66;}
                        else if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA652_2 = input.LA(1);
                        int index652_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_InternalN4JSParser()) ) {s = 68;}
                        else if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA652_4 = input.LA(1);
                        int index652_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA652_5 = input.LA(1);
                        int index652_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA652_6 = input.LA(1);
                        int index652_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA652_7 = input.LA(1);
                        int index652_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA652_8 = input.LA(1);
                        int index652_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA652_9 = input.LA(1);
                        int index652_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA652_10 = input.LA(1);
                        int index652_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA652_11 = input.LA(1);
                        int index652_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA652_12 = input.LA(1);
                        int index652_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA652_13 = input.LA(1);
                        int index652_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA652_14 = input.LA(1);
                        int index652_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA652_15 = input.LA(1);
                        int index652_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA652_16 = input.LA(1);
                        int index652_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA652_17 = input.LA(1);
                        int index652_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA652_18 = input.LA(1);
                        int index652_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA652_19 = input.LA(1);
                        int index652_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA652_20 = input.LA(1);
                        int index652_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA652_21 = input.LA(1);
                        int index652_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA652_22 = input.LA(1);
                        int index652_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA652_23 = input.LA(1);
                        int index652_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA652_24 = input.LA(1);
                        int index652_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA652_25 = input.LA(1);
                        int index652_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA652_26 = input.LA(1);
                        int index652_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA652_27 = input.LA(1);
                        int index652_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA652_28 = input.LA(1);
                        int index652_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA652_29 = input.LA(1);
                        int index652_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA652_30 = input.LA(1);
                        int index652_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA652_31 = input.LA(1);
                        int index652_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA652_32 = input.LA(1);
                        int index652_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA652_33 = input.LA(1);
                        int index652_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA652_34 = input.LA(1);
                        int index652_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA652_35 = input.LA(1);
                        int index652_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA652_36 = input.LA(1);
                        int index652_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA652_37 = input.LA(1);
                        int index652_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA652_38 = input.LA(1);
                        int index652_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA652_39 = input.LA(1);
                        int index652_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA652_40 = input.LA(1);
                        int index652_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA652_41 = input.LA(1);
                        int index652_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA652_42 = input.LA(1);
                        int index652_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA652_43 = input.LA(1);
                        int index652_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA652_44 = input.LA(1);
                        int index652_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA652_45 = input.LA(1);
                        int index652_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA652_46 = input.LA(1);
                        int index652_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA652_47 = input.LA(1);
                        int index652_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA652_48 = input.LA(1);
                        int index652_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA652_49 = input.LA(1);
                        int index652_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA652_50 = input.LA(1);
                        int index652_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA652_51 = input.LA(1);
                        int index652_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA652_52 = input.LA(1);
                        int index652_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA652_53 = input.LA(1);
                        int index652_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA652_54 = input.LA(1);
                        int index652_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA652_55 = input.LA(1);
                        int index652_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA652_56 = input.LA(1);
                        int index652_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA652_57 = input.LA(1);
                        int index652_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA652_58 = input.LA(1);
                        int index652_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA652_59 = input.LA(1);
                        int index652_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA652_60 = input.LA(1);
                        int index652_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA652_61 = input.LA(1);
                        int index652_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA652_62 = input.LA(1);
                        int index652_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA652_63 = input.LA(1);
                        int index652_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA652_64 = input.LA(1);
                        int index652_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA652_65 = input.LA(1);
                        int index652_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 67;}
                        input.seek(index652_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 652, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA762 extends DFA {
        public DFA762(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 762;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "15250:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA765 extends DFA {
        public DFA765(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 765;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "15464:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA767 extends DFA {
        public DFA767(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 767;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "15549:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA770 extends DFA {
        public DFA770(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 770;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "15763:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA772 extends DFA {
        public DFA772(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 772;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "15855:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA774 extends DFA {
        public DFA774(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 774;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "16260:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA776 extends DFA {
        public DFA776(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 776;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "16536:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA778 extends DFA {
        public DFA778(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 778;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_182;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "16941:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA824 extends DFA {
        public DFA824(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 824;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 31380:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA829 extends DFA {
        public DFA829(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 829;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 31657:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA834 extends DFA {
        public DFA834(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 834;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 32123:7: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA839 extends DFA {
        public DFA839(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 839;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_24;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 32725:7: ( ( ruleN4Modifier ) )*";
        }
    }
    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFC3FCFFBFFF1FF72L,0x30024C6A925D0683L,0x000000000023E940L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x000000100A309C00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x000840180AB09E00L,0x0001040000000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x000840188BB19A00L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x000000108A319800L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x000000180A309800L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0002000000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000000000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000040040L,0x0000404000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x000000100A309A00L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x000040100A309800L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000000007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x000800000A309800L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x001E092120020130L,0x00024A0290000000L,0x000000000023E940L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x100840188A339E00L,0x0000440040000002L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000800000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0xF81FCD79EB719F70L,0x30024C4A92440682L,0x000000000023E940L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0001000000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x100840188A319A00L,0x0000000000000002L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x100000100A309800L,0x0000000000000002L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0xD8088D01AA309F70L,0x00004C0000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400040440000L,0x0000000000200040L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400040440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010000007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000080010000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004050440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004010440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000000010440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C4A92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0xFC3FCFFBFFF1FF70L,0x30034C6A925D0683L,0x000000000023E940L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004010440000L,0x0000000000000048L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0020440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000880010000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0000404000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0000400000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000080020000100L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000040002L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x001E092120020132L,0x00024A0290000000L,0x000000000023E940L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0xD8888D01AA309F70L,0x0000040000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0xF81F8D69EB719F72L,0x30024C4A92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000040000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_24;
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0xFC3FCFFBFFF1FF70L,0x30024C6A925D0683L,0x000000000023E940L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000100000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0xF81F8D79EB719F70L,0x30024C6A92440682L,0x000000000023E940L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C4AB2440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C6A92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0001002000440000L,0x0000000002800040L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30034C6A92440680L,0x0000000002A3E940L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000100000020000L,0x0001000000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000100000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000400080000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000400080002L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000480000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30025C4B92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4B92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00034E42D07C0003L,0x000000000023E940L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00024E42D07C0003L,0x000000000023E940L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00024A42D07C0003L,0x000000000023E940L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024800007C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024800407C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0xD81E8D21AA329F70L,0x00024A0290440000L,0x000000000023E940L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xF80F8D69AB319F72L,0x30004C4C10444400L,0x000000000023E940L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xF80F8D69AB319F70L,0x30004C4810440400L,0x000000000023E940L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4AB2440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4A92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000040007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000280L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000082L,0x0000014000001000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000082L,0x0000014000201000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0240000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0100000000000002L,0x0000018200820568L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0xF81F8D69EB719F72L,0x30024C4AD2440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30034C4A92440680L,0x000000000023E940L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000080020000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x001F092120020130L,0x00024A0AB0000400L,0x000000000023E940L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x001F092120020130L,0x00024A0A90000400L,0x000000000023E940L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0002404000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x4000080020000100L,0x0000000000200000L,0x0000000000000040L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00034C40507C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000040042L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0xF81F8D69AB339F70L,0x30004C4810440400L,0x000000000023E940L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0010080120020100L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0xD8088D01AA309F70L,0x000000C000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024840407C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x080000100A309800L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x800000100A309800L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024C40507C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00034C00007C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024C00007C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00005C0100440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0100440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00004108007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000200L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF2L,0x00000002007C0203L,0x000000000003E140L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x4000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000003E900L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0000000000010000L,0x0000040000000000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x001A090120020130L,0x0002480000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x4000000000000000L,0x0000000000200000L,0x0000000000000040L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0xD89E8D21AA329F70L,0x00024A02B0440000L,0x000000000023E940L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0xD89E8D21AA329F70L,0x00024A0290440000L,0x000000000023E940L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x0010080120020102L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x0020000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x401E092120020130L,0x00025A0290200000L,0x000000000023E940L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010040007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010061007C0003L,0x0000000000000040L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x0012080120020100L,0x0000020000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x0000004000040002L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0xD8088D01AA309F72L,0x0000000000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0xD8088D01AA309F72L,0x0002000000440000L,0x0000000000000040L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000800007C0003L,0x0000000000236940L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0xF81F8969EB719F70L,0x30024C4A92440680L,0x000000000023E940L});
}
final class T2S{
	final static int[] M_0 = { 12, 10, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 84, 79, 89, -1, 86, 90, 95, 92, 75, -1, -1, 74, -1, -1, -1, -1, 91, 73, -1, -1, -1, 93, -1, 76, -1, 81, -1, 88, 87, -1, -1, -1, -1, -1, -1, -1, 83, -1, 69, 85, -1, -1, -1, 78, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, 70, 72, -1, 94, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68};
	final static int[] M_2 = { 53, 48, 58, -1, 55, 59, 64, 61, 44, -1, -1, 43, -1, -1, 66, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, 38, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_3 = { 6, -1, -1, -1, -1, 40, 36, 44, -1, 42, 19, 17, 11, 14, 80, 87, 13, 26, 90, -1, -1, 9, 10, 67, 23, 22, 12, 82, 15, 84, 38, 69, 25, 43, 81, -1, 18, 16, 59, 49, 85, 39, 78, 31, 41, 91, 89, 20, 35, 61, 48, 58, 21, 68, 83, -1, -1, -1, -1, 79, 32, 28, 47, 45, 33, 86, 27, -1, -1, -1, -1, -1, 70, -1, 71, 63, -1, -1, -1, -1, -1, 7, -1, 34, 77, 76, -1, 37, -1, -1, 75, -1, -1, 46, -1, -1, 72, -1, 73, -1, 62, -1, 29, 50, -1, -1, -1, 8, 64, -1, -1, 24, -1, 88, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, 52, -1, -1, 51, -1, 53, 54, 55, 56, 57, -1, -1, -1, 60};
	final static int[] M_4 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_5 = { 26, 21, 30, -1, 28, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 25, 20, 29, -1, 27, 30, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 17, 12, 22, -1, 19, 23, 28, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_10 = { 16, 11, 21, -1, 18, 22, 27, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 21, 16, 24, -1, 23, 25, 30, 27, 12, -1, -1, 11, 51, -1, -1, -1, 26, 10, 55, -1, 35, 28, -1, 13, -1, 18, 57, 4, 1, -1, -1, 52, -1, 44, 33, -1, 20, -1, 6, 22, -1, -1, -1, 15, 46, 32, 43, 19, 56, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 63, -1, -1, 3, -1, -1, 60, -1, 61, -1, 47, -1, -1, 34, -1, -1, -1, 2, 49, -1, -1, 50, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_18 = { 20, 15, 23, -1, 22, 24, 29, 26, 11, -1, -1, 10, 51, -1, -1, -1, 25, 9, 55, -1, 35, 27, -1, 12, -1, 17, 57, 4, 1, -1, -1, 52, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, 14, 46, 32, 43, 18, 56, -1, -1, -1, -1, -1, -1, 6, 8, 31, 28, 7, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 63, -1, -1, 3, -1, -1, 60, -1, 61, -1, 47, -1, -1, 34, -1, -1, -1, 2, 49, -1, -1, 50, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_19 = { 19, 14, 24, -1, 21, 25, 30, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 18, 13, 23, -1, 20, 24, 29, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 15, 12, 61, 34, 6, 62, 67, 64, 55, 21, 22, 54, 30, 8, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 7, 41, 60, 5, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 4, 17, 25, 49, 58, 46, 10, 47, 11, 3, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 75, -1, -1, 13, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 70, -1, -1, 69, -1, 71, 72, -1, 73, 74, -1, -1, -1, 68};
	final static int[] M_23 = { 14, 11, 60, 33, 5, 61, 66, 63, 54, 20, 21, 53, 29, 7, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 6, 40, 59, 4, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 3, 16, 24, 48, 57, 45, 9, 46, 10, 2, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 69, -1, -1, 68, -1, 70, 71, -1, 72, 73, -1, -1, -1, 67};
	final static int[] M_25 = { 23, 18, 28, -1, 25, 29, 34, 31, 14, -1, -1, 13, 54, -1, -1, -1, 30, 12, -1, -1, 36, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 55, -1, 45, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 47, 5, 44, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, 3, 48, -1, -1, 35, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 38, -1, -1, 37, -1, 39, 40, 41, 42, 43, -1, -1, -1, 46};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 33, 30, 13, -1, -1, 12, 53, -1, -1, -1, 29, 11, -1, -1, 35, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 54, -1, 44, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 46, 5, 43, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, 3, 47, -1, -1, 34, -1, -1, -1, 52, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_27 = { 23, 18, 28, -1, 25, 29, 34, 31, 14, -1, -1, 13, 54, -1, -1, -1, 30, 12, 58, -1, 36, 32, -1, 15, -1, 20, 60, 27, 26, -1, -1, 55, -1, 45, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 47, 5, 44, 21, 59, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 38, -1, -1, 37, -1, 39, 40, 41, 42, 43, -1, -1, -1, 46};
	final static int[] M_28 = { 22, 17, 27, -1, 24, 28, 33, 30, 13, -1, -1, 12, 53, -1, -1, -1, 29, 11, 57, -1, 35, 31, -1, 14, -1, 19, 59, 26, 25, -1, -1, 54, -1, 44, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 46, 5, 43, 20, 58, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_29 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 49, 7, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_30 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 49, 7, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_31 = { 24, 19, 29, -1, 26, 30, 35, 32, 15, -1, -1, 14, 55, -1, -1, -1, 31, 13, 59, -1, 37, 33, -1, 16, -1, 21, 61, 28, 27, -1, -1, 56, -1, 46, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 48, 7, 45, 22, 60, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 39, -1, -1, 38, -1, 40, 41, 42, 43, 44, -1, -1, -1, 47};
	final static int[] M_32 = { 24, 19, 29, -1, 26, 30, 35, 32, 15, -1, -1, 14, 55, -1, -1, -1, 31, 13, 59, -1, 37, 33, -1, 16, -1, 21, 61, 28, 27, -1, -1, 56, -1, 46, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 48, 7, 45, 22, 60, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 39, -1, -1, 38, -1, 40, 41, 42, 43, 44, -1, -1, -1, 47};
	final static int[] M_33 = { 26, 21, 31, -1, 28, 32, 37, 34, 17, -1, -1, 16, 57, -1, -1, -1, 33, 15, 61, -1, 39, 35, -1, 18, -1, 23, 63, 30, 29, -1, -1, 58, -1, 48, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 50, 8, 47, 24, 62, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 6, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 41, -1, -1, 40, -1, 42, 43, 44, 45, 46, -1, -1, -1, 49};
	final static int[] M_34 = { 27, 22, 32, -1, 29, 33, 38, 35, 18, -1, -1, 17, 58, -1, -1, -1, 34, 16, 62, -1, 40, 36, -1, 19, -1, 24, 64, 31, 30, -1, -1, 59, -1, 49, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 51, 9, 48, 25, 63, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 65, -1, 66, 53, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 70, -1, -1, 56, -1, -1, 67, -1, 68, -1, 52, -1, -1, 39, 7, 1, -1, 57, 54, -1, -1, 55, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 60, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 42, -1, -1, 41, -1, 43, 44, 45, 46, 47, -1, -1, -1, 50};
	final static int[] M_35 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 49, 8, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_36 = { 26, 21, 31, -1, 28, 32, 37, 34, 17, -1, -1, 16, 57, -1, -1, -1, 33, 15, 61, -1, 39, 35, -1, 18, -1, 23, 63, 30, 29, -1, -1, 58, -1, 48, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 50, 9, 47, 24, 62, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 41, -1, -1, 40, -1, 42, 43, 44, 45, 46, -1, -1, -1, 49};
	final static int[] M_37 = { 15, -1, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_38 = { 20, -1, 23, -1, 22, 24, 29, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 35, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, -1, 46, 32, 43, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_39 = { 51, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53};
	final static int[] M_40 = { 20, 15, 23, -1, 22, 24, 29, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 35, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, 14, 46, 32, 43, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 31, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 47, -1, -1, 34, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_42 = { 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 1, -1, 3, 4, 5, 6, 7, -1, -1, -1, 10};
	final static int[] M_43 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_44 = { 60, 55, 64, 34, 62, 65, 67, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, -1, 63, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, -1, 52, 35, 66, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, 76, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 70, -1, -1, 69, -1, 71, 72, -1, 73, 74, -1, -1, -1, 68};
	final static int[] M_47 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 10};
	final static int[] M_48 = { 59, 54, 63, 33, 61, 64, 66, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 13, 62, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, 65, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 69, -1, -1, 68, -1, 70, 71, -1, 72, 73, -1, -1, -1, 67};
	final static int[] M_51 = { 21, -1, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_52 = { 53, 48, 58, -1, 55, 59, 64, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_53 = { 21, -1, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_55 = { 59, 54, 64, 27, 61, 65, 70, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_56 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_57 = { 54, 49, 59, 24, 56, 60, 65, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}