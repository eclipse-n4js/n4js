package org.eclipse.n4js.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.services.N4JSGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_EOL=153;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int Out=61;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int RULE_ZWNJ=162;
    public static final int Project=20;
    public static final int EqualsSignEqualsSign=77;
    public static final int Switch=27;
    public static final int RULE_OCTAL_INT=121;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int LessThanSignLessThanSign=75;
    public static final int If=84;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int Target=28;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int LessThanSignEqualsSign=76;
    public static final int CommercialAtCommercialAt=80;
    public static final int Solidus=99;
    public static final int RightCurlyBracket=112;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Constructor=5;
    public static final int Abstract=11;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int Semicolon=101;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Try=63;
    public static final int Ampersand=91;
    public static final int AsteriskEqualsSign=69;
    public static final int Void=51;
    public static final int VerticalLineEqualsSign=87;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Public=24;
    public static final int Do=83;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int RULE_DOT_DOT=164;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int With=52;
    public static final int RULE_SL_COMMENT=152;
    public static final int Function=15;
    public static final int EqualsSign=103;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int HyphenMinusEqualsSign=73;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int While=40;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
    protected void setInRegularExpression() {}
    protected void setInTemplateSegment() {}
    protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    protected void promoteEOL() {} // overridden in subtype
    protected void addASIMessage() {} // overridden in subtype
    protected boolean hasDisallowedEOL() { return false; } // overridden in subtype

     	private N4JSGrammarAccess grammarAccess;

        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Script";
       	}

       	@Override
       	protected N4JSGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScript = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScript; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;

        EObject lv_scriptElements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getScriptAccess().getScriptAction_0(),
              					current);
              			
            }

            }
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getScriptAccess().getAnnotationsScriptAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_annotations_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getScriptRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.ScriptAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getScriptAccess().getScriptElementsScriptElementParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_scriptElements_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getScriptRule());
            	      					}
            	      					add(
            	      						current,
            	      						"scriptElements",
            	      						lv_scriptElements_2_0,
            	      						"org.eclipse.n4js.N4JS.ScriptElement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptElement=ruleScriptElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptElement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedScriptElement_0 = null;

        EObject this_N4ClassDeclaration_1 = null;

        EObject this_N4InterfaceDeclaration_2 = null;

        EObject this_N4EnumDeclaration_3 = null;

        EObject this_ImportDeclaration_4 = null;

        EObject this_ExportDeclaration_5 = null;

        EObject this_RootStatement_6 = null;



        	enterRule();

        try {
            {
            int alt3=7;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclaration_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ImportDeclaration_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedScriptElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedScriptElement=ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_11=null;
        Token otherlv_18=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        EObject this_AnnotationList_0 = null;

        EObject this_ExportDeclarationImpl_2 = null;

        EObject this_ImportDeclarationImpl_4 = null;

        Enumerator lv_declaredModifiers_6_0 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;

        Enumerator lv_declaredModifiers_10_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_12_0 = null;

        AntlrDatatypeRuleToken lv_name_13_0 = null;

        EObject this_TypeVariables_14 = null;

        EObject this_ClassExtendsClause_15 = null;

        Enumerator lv_declaredModifiers_17_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_19_0 = null;

        AntlrDatatypeRuleToken lv_name_20_0 = null;

        EObject this_TypeVariables_21 = null;

        EObject this_InterfaceImplementsList_22 = null;

        EObject this_Members_23 = null;

        Enumerator lv_declaredModifiers_25_0 = null;

        AntlrDatatypeRuleToken lv_name_27_0 = null;

        EObject lv_literals_29_0 = null;

        EObject lv_literals_31_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_5);
            this_AnnotationList_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
              			
            }

            }
            int alt16=5;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclarationImpl_2=ruleExportDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportDeclarationImpl_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclarationImpl_4=ruleImportDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ImportDeclarationImpl_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getFunctionDeclarationAnnotationListAction_1_2_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0_0_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_6);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_6_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1());
                      						
                    }
                    pushFollow(FOLLOW_6);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2());
                      							
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=ruleFunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_FunctionImpl_8;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt13=2;
                    alt13 = dfa13.predict(input);
                    switch (alt13) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4ClassDeclarationAnnotationListAction_1_3_0_0_0(),
                              									current);
                              							
                            }

                            }
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);

                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }


                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_0_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_7);
                            	    lv_declaredModifiers_10_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_10_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop5;
                                }
                            } while (true);

                            otherlv_11=(Token)match(input,Class,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_11, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                              						
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_typingStrategy_12_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_12_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_0_4_0());
                              								
                            }
                            pushFollow(FOLLOW_10);
                            lv_name_13_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_13_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_TypeVariables_14=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_14;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);

                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_ClassExtendsClause_15=ruleClassExtendsClause(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_ClassExtendsClause_15;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_3_0_1_0(),
                              									current);
                              							
                            }

                            }
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);

                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }


                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_1_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_11);
                            	    lv_declaredModifiers_17_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_17_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop9;
                                }
                            } while (true);

                            otherlv_18=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_18, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                              						
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_typingStrategy_19_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_19_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_1_4_0());
                              								
                            }
                            pushFollow(FOLLOW_10);
                            lv_name_20_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_20_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);

                            if ( (LA11_0==LessThanSign) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_TypeVariables_21=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_21;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( (LA12_0==Implements||LA12_0==Extends) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_InterfaceImplementsList_22=ruleInterfaceImplementsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_InterfaceImplementsList_22;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_23=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_23;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4EnumDeclarationAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_4_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_declaredModifiers_25_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_25_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    otherlv_26=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_26, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_27_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_27_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_28=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_5_0());
                      						
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_29_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_29_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==Comma) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    otherlv_30=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_30, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_31_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_31_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    otherlv_32=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_32, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportDeclaration=ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_ExportDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportDeclarationAccess().getExportDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ExportDeclarationImpl_1=ruleExportDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_wildcardExport_1_0=null;
        Token lv_defaultExport_8_0=null;
        EObject this_ExportFromClause_2 = null;

        EObject this_ExportClause_4 = null;

        EObject this_ExportFromClause_5 = null;

        EObject lv_exportedElement_7_0 = null;

        EObject lv_exportedElement_9_0 = null;

        EObject lv_defaultExportedExpression_10_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Export,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
              		
            }
            int alt19=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt19=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt19=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt19=3;
                }
                break;
            case Default:
                {
                alt19=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_wildcardExport_1_0=(Token)match(input,Asterisk,FOLLOW_17); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_wildcardExport_1_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "wildcardExport", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    this_ExportFromClause_2=ruleExportFromClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportFromClause_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_19);
                    this_ExportClause_4=ruleExportClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportClause_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==From) && (synpred8_InternalN4JSParser())) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                              						}
                              						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1());
                              					
                            }
                            pushFollow(FOLLOW_18);
                            this_ExportFromClause_5=ruleExportFromClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ExportFromClause_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_exportedElement_7_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"exportedElement",
                      							lv_exportedElement_7_0,
                      							"org.eclipse.n4js.N4JS.ExportableElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    lv_defaultExport_8_0=(Token)match(input,Default,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_defaultExport_8_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "defaultExport", true, "default");
                      						
                    }

                    }


                    }
                    int alt18=2;
                    alt18 = dfa18.predict(input);
                    switch (alt18) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_3_1_0_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_exportedElement_9_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              								}
                              								set(
                              									current,
                              									"exportedElement",
                              									lv_exportedElement_9_0,
                              									"org.eclipse.n4js.N4JS.ExportableElement");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_18);
                            lv_defaultExportedExpression_10_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              									}
                              									set(
                              										current,
                              										"defaultExportedExpression",
                              										lv_defaultExportedExpression_10_0,
                              										"org.eclipse.n4js.N4JS.AssignmentExpression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }

                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            ruleSemi();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportFromClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;


        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExportFromClauseRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportFromClauseAccess().getReexportedFromTModuleCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_namedExports_1_0 = null;

        EObject lv_namedExports_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( ((LA22_0>=Intersection && LA22_0<=Implements)||(LA22_0>=Promisify && LA22_0<=Abstract)||LA22_0==External||(LA22_0>=Private && LA22_0<=Project)||LA22_0==Public||LA22_0==Static||LA22_0==Target||(LA22_0>=Async && LA22_0<=Await)||LA22_0==Union||(LA22_0>=Yield && LA22_0<=This)||LA22_0==From||LA22_0==Type||(LA22_0>=Get && LA22_0<=Let)||(LA22_0>=Out && LA22_0<=Set)||LA22_0==As||LA22_0==Of||LA22_0==RULE_IDENTIFIER) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_namedExports_1_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportClauseRule());
                      						}
                      						add(
                      							current,
                      							"namedExports",
                      							lv_namedExports_1_0,
                      							"org.eclipse.n4js.N4JS.ExportSpecifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);

                        if ( (LA20_0==Comma) ) {
                            int LA20_1 = input.LA(2);

                            if ( ((LA20_1>=Intersection && LA20_1<=Implements)||(LA20_1>=Promisify && LA20_1<=Abstract)||LA20_1==External||(LA20_1>=Private && LA20_1<=Project)||LA20_1==Public||LA20_1==Static||LA20_1==Target||(LA20_1>=Async && LA20_1<=Await)||LA20_1==Union||(LA20_1>=Yield && LA20_1<=This)||LA20_1==From||LA20_1==Type||(LA20_1>=Get && LA20_1<=Let)||(LA20_1>=Out && LA20_1<=Set)||LA20_1==As||LA20_1==Of||LA20_1==RULE_IDENTIFIER) ) {
                                alt20=1;
                            }


                        }


                        switch (alt20) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_namedExports_3_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExportClauseRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"namedExports",
                    	      								lv_namedExports_3_0,
                    	      								"org.eclipse.n4js.N4JS.ExportSpecifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop20;
                        }
                    } while (true);
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==Comma) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            {
                            otherlv_4=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportSpecifier=ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_element_0_0 = null;

        AntlrDatatypeRuleToken lv_alias_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportSpecifierAccess().getElementIdentifierRefParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_element_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
              					}
              					set(
              						current,
              						"element",
              						lv_element_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==As) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,As,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportableElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportableElement=ruleExportableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportableElement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedExportableElement_0 = null;

        EObject this_N4ClassDeclaration_1 = null;

        EObject this_N4InterfaceDeclaration_2 = null;

        EObject this_N4EnumDeclaration_3 = null;

        EObject this_FunctionDeclaration_4 = null;

        EObject this_ExportedVariableStatement_5 = null;



        	enterRule();

        try {
            {
            int alt24=6;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExportableElement_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedExportableElement_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_4=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableStatement_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedExportableElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExportableElement=ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_9=null;
        Token otherlv_14=null;
        Token otherlv_21=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        EObject this_AnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_AsyncNoTrailingLineBreak_3 = null;

        EObject this_FunctionImpl_4 = null;

        Enumerator lv_declaredModifiers_6_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_varDeclsOrBindings_10_0 = null;

        Enumerator lv_declaredModifiers_13_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;

        AntlrDatatypeRuleToken lv_name_16_0 = null;

        EObject this_TypeVariables_17 = null;

        EObject this_ClassExtendsClause_18 = null;

        Enumerator lv_declaredModifiers_20_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_22_0 = null;

        AntlrDatatypeRuleToken lv_name_23_0 = null;

        EObject this_TypeVariables_24 = null;

        EObject this_InterfaceImplementsList_25 = null;

        EObject this_Members_26 = null;

        Enumerator lv_declaredModifiers_28_0 = null;

        AntlrDatatypeRuleToken lv_name_30_0 = null;

        EObject lv_literals_32_0 = null;

        EObject lv_literals_34_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_26);
            this_AnnotationList_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
              			
            }

            }
            int alt39=4;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( ((LA25_0>=Protected && LA25_0<=Abstract)||LA25_0==External||(LA25_0>=Private && LA25_0<=Project)||LA25_0==Public||LA25_0==Static||LA25_0==Const) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_6);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_2_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_6);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getExportedVariableStatementAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }
                    loop26:
                    do {
                        int alt26=2;
                        alt26 = dfa26.predict(input);
                        switch (alt26) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_27);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_6_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_1_1_2_0());
                      						
                    }
                    pushFollow(FOLLOW_28);
                    lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"varStmtKeyword",
                      								lv_varStmtKeyword_7_0,
                      								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_29);
                    lv_varDeclsOrBindings_8_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"varDeclsOrBindings",
                      								lv_varDeclsOrBindings_8_0,
                      								"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==Comma) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_9, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_29);
                    	    lv_varDeclsOrBindings_10_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"varDeclsOrBindings",
                    	      									lv_varDeclsOrBindings_10_0,
                    	      									"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt36=2;
                    alt36 = dfa36.predict(input);
                    switch (alt36) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4ClassDeclarationAnnotationListAction_1_2_0_0_0(),
                              									current);
                              							
                            }

                            }
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( ((LA28_0>=Protected && LA28_0<=Abstract)||LA28_0==External||(LA28_0>=Private && LA28_0<=Project)||LA28_0==Public||LA28_0==Static||LA28_0==Const) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_7);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop28;
                                }
                            } while (true);

                            otherlv_14=(Token)match(input,Class,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                              						
                            }
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==Tilde) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_0_4_0());
                              								
                            }
                            pushFollow(FOLLOW_10);
                            lv_name_16_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==LessThanSign) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_TypeVariables_17=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_17;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==Implements||LA31_0==Extends) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_ClassExtendsClause_18=ruleClassExtendsClause(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_ClassExtendsClause_18;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_2_0_1_0(),
                              									current);
                              							
                            }

                            }
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( ((LA32_0>=Protected && LA32_0<=Abstract)||LA32_0==External||(LA32_0>=Private && LA32_0<=Project)||LA32_0==Public||LA32_0==Static||LA32_0==Const) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_1_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_11);
                            	    lv_declaredModifiers_20_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_20_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            otherlv_21=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_21, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                              						
                            }
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==Tilde) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_typingStrategy_22_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_22_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_1_4_0());
                              								
                            }
                            pushFollow(FOLLOW_10);
                            lv_name_23_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_23_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==LessThanSign) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_TypeVariables_24=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_24;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==Implements||LA35_0==Extends) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_10);
                                    this_InterfaceImplementsList_25=ruleInterfaceImplementsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_InterfaceImplementsList_25;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_26=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_26;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4EnumDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( ((LA37_0>=Protected && LA37_0<=Abstract)||LA37_0==External||(LA37_0>=Private && LA37_0<=Project)||LA37_0==Public||LA37_0==Static||LA37_0==Const) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_declaredModifiers_28_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_28_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);

                    otherlv_29=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_29, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_30_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_30_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_5_0());
                      						
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_32_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_34_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleImportDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportDeclaration=ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_ImportDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ImportDeclarationImpl_1=ruleImportDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ImportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_importFrom_2_0=null;
        EObject this_ImportClause_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
              		
            }
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=Intersection && LA40_0<=Implements)||(LA40_0>=Promisify && LA40_0<=Abstract)||LA40_0==External||(LA40_0>=Private && LA40_0<=Project)||LA40_0==Public||LA40_0==Static||LA40_0==Target||(LA40_0>=Async && LA40_0<=Await)||LA40_0==Union||(LA40_0>=Yield && LA40_0<=This)||LA40_0==From||LA40_0==Type||(LA40_0>=Get && LA40_0<=Let)||(LA40_0>=Out && LA40_0<=Set)||LA40_0==As||LA40_0==Of||LA40_0==Asterisk||LA40_0==LeftCurlyBracket||LA40_0==RULE_IDENTIFIER) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_17);
                    this_ImportClause_1=ruleImportClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ImportClause_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    {
                    {
                    lv_importFrom_2_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_importFrom_2_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      						}
                      						setWithLastConsumed(current, "importFrom", true, "from");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getImportDeclarationImplRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getModuleTModuleCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_18);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_importSpecifiers_0_0 = null;

        EObject this_ImportSpecifiersExceptDefault_2 = null;

        EObject this_ImportSpecifiersExceptDefault_3 = null;



        	enterRule();

        try {
            {
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0>=Intersection && LA42_0<=Implements)||(LA42_0>=Promisify && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Target||(LA42_0>=Async && LA42_0<=Await)||LA42_0==Union||(LA42_0>=Yield && LA42_0<=This)||LA42_0==From||LA42_0==Type||(LA42_0>=Get && LA42_0<=Let)||(LA42_0>=Out && LA42_0<=Set)||LA42_0==As||LA42_0==Of||LA42_0==RULE_IDENTIFIER) ) {
                alt42=1;
            }
            else if ( (LA42_0==Asterisk||LA42_0==LeftCurlyBracket) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_importSpecifiers_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getImportClauseRule());
                      						}
                      						add(
                      							current,
                      							"importSpecifiers",
                      							lv_importSpecifiers_0_0,
                      							"org.eclipse.n4js.N4JS.DefaultImportSpecifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==Comma) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,Comma,FOLLOW_32); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getImportClauseRule());
                              					}
                              					newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ImportSpecifiersExceptDefault_2=ruleImportSpecifiersExceptDefault(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ImportSpecifiersExceptDefault_2;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getImportClauseRule());
                      			}
                      			newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportSpecifiersExceptDefault_3=ruleImportSpecifiersExceptDefault(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ImportSpecifiersExceptDefault_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportSpecifiersExceptDefault(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_importSpecifiers_0_0 = null;

        EObject lv_importSpecifiers_2_0 = null;

        EObject lv_importSpecifiers_4_0 = null;



        	enterRule();

        try {
            {
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Asterisk) ) {
                alt46=1;
            }
            else if ( (LA46_0==LeftCurlyBracket) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_importSpecifiers_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                      					}
                      					add(
                      						current,
                      						"importSpecifiers",
                      						lv_importSpecifiers_0_0,
                      						"org.eclipse.n4js.N4JS.NamespaceImportSpecifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_33); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                      			
                    }
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( ((LA45_0>=Intersection && LA45_0<=With)||(LA45_0>=For && LA45_0<=Var)||(LA45_0>=As && LA45_0<=Of)||LA45_0==RULE_IDENTIFIER) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_15);
                            lv_importSpecifiers_2_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                              							}
                              							add(
                              								current,
                              								"importSpecifiers",
                              								lv_importSpecifiers_2_0,
                              								"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            loop43:
                            do {
                                int alt43=2;
                                int LA43_0 = input.LA(1);

                                if ( (LA43_0==Comma) ) {
                                    int LA43_1 = input.LA(2);

                                    if ( ((LA43_1>=Intersection && LA43_1<=With)||(LA43_1>=For && LA43_1<=Var)||(LA43_1>=As && LA43_1<=Of)||LA43_1==RULE_IDENTIFIER) ) {
                                        alt43=1;
                                    }


                                }


                                switch (alt43) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_3, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_15);
                            	    lv_importSpecifiers_4_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"importSpecifiers",
                            	      									lv_importSpecifiers_4_0,
                            	      									"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop43;
                                }
                            } while (true);
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==Comma) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(otherlv_5, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                      					
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNamedImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedImportSpecifier=ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;



        	enterRule();

        try {
            {
            int alt47=2;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_34);
                    ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaultImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultImportSpecifier=ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNamespaceImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceImportSpecifier=ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_declaredDynamic_4_0=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceImportSpecifierAccess().getNamespaceImportSpecifierAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Asterisk,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,As,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNamespaceImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_35);
            lv_alias_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamespaceImportSpecifierRule());
              					}
              					set(
              						current,
              						"alias",
              						lv_alias_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==PlusSign) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredDynamic_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamespaceImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", true, "+");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleModuleSpecifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleModuleSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModuleSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModuleSpecifier=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModuleSpecifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleModuleSpecifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;


        	enterRule();

        try {
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING_0, grammarAccess.getModuleSpecifierAccess().getSTRINGTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( ((LA49_0>=Protected && LA49_0<=Abstract)||LA49_0==External||(LA49_0>=Private && LA49_0<=Project)||LA49_0==Public||LA49_0==Static||LA49_0==Const) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_6);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
              				
            }
            {
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
              					
            }
            pushFollow(FOLLOW_36);
            this_FunctionImpl_3=ruleFunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }
            int alt50=2;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( ((LA51_0>=Protected && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Const) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_37);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
              				
            }
            {
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
              					
            }
            pushFollow(FOLLOW_36);
            this_FunctionImpl_3=norm3_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==Semicolon) ) {
                int LA52_1 = input.LA(2);

                if ( (synpred21_InternalN4JSParser()) ) {
                    alt52=1;
                }
            }
            else if ( (LA52_0==EOF||LA52_0==RULE_ML_COMMENT||LA52_0==RULE_EOL) && (synpred21_InternalN4JSParser())) {
                alt52=1;
            }
            else if ( (LA52_0==RightCurlyBracket) ) {
                int LA52_3 = input.LA(2);

                if ( (synpred21_InternalN4JSParser()) ) {
                    alt52=1;
                }
            }
            switch (alt52) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncNoTrailingLineBreak(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredAsync_0_0=null;
        EObject this_NoLineTerminator_1 = null;



        	enterRule();

        try {
            {
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Async) ) {
                int LA53_1 = input.LA(2);

                if ( ((LA53_1>=Intersection && LA53_1<=With)||(LA53_1>=For && LA53_1<=Var)||(LA53_1>=As && LA53_1<=Of)||LA53_1==LeftSquareBracket||LA53_1==RULE_DOUBLE||LA53_1==RULE_HEX_INT||LA53_1==RULE_OCTAL_INT||LA53_1==RULE_SCIENTIFIC_INT||LA53_1==RULE_IDENTIFIER||LA53_1==RULE_STRING||LA53_1==RULE_NO_LINE_TERMINATOR||LA53_1==RULE_INT) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_38); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      					}
                      					setWithLastConsumed(current, "declaredAsync", true, "async");
                      				
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      			}
                      			newCompositeNode(grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NoLineTerminator_1=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NoLineTerminator_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Asterisk) ) {
                alt54=1;
            }
            else if ( ((LA54_0>=Intersection && LA54_0<=Implements)||(LA54_0>=Promisify && LA54_0<=Abstract)||LA54_0==External||(LA54_0>=Private && LA54_0<=Project)||LA54_0==Public||LA54_0==Static||LA54_0==Target||(LA54_0>=Async && LA54_0<=Await)||LA54_0==Union||(LA54_0>=Yield && LA54_0<=This)||LA54_0==From||LA54_0==Type||(LA54_0>=Get && LA54_0<=Let)||(LA54_0>=Out && LA54_0<=Set)||LA54_0==As||LA54_0==Of||LA54_0==LeftParenthesis||LA54_0==LessThanSign||LA54_0==RULE_IDENTIFIER) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm2_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm1_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=ruleFunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=ruleFunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( ((LA55_0>=Intersection && LA55_0<=Implements)||(LA55_0>=Promisify && LA55_0<=Abstract)||LA55_0==External||(LA55_0>=Private && LA55_0<=Project)||LA55_0==Public||LA55_0==Static||LA55_0==Target||(LA55_0>=Async && LA55_0<=Await)||LA55_0==Union||LA55_0==This||LA55_0==From||LA55_0==Type||(LA55_0>=Get && LA55_0<=Let)||(LA55_0>=Out && LA55_0<=Set)||LA55_0==As||LA55_0==Of||LA55_0==LeftParenthesis||LA55_0==LessThanSign||LA55_0==RULE_IDENTIFIER) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm3_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm1_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=norm1_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=ruleFunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Async && LA56_0<=Await)||LA56_0==Union||(LA56_0>=Yield && LA56_0<=This)||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||(LA56_0>=Out && LA56_0<=Set)||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm3_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm3_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=ruleFunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=norm2_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_StrictFormalParameters_2 = null;

        EObject this_ColonSepReturnTypeRef_3 = null;



        	enterRule();

        try {
            {
            {
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==LessThanSign) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_41);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( ((LA58_0>=Intersection && LA58_0<=Implements)||(LA58_0>=Promisify && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Target||(LA58_0>=Async && LA58_0<=Await)||LA58_0==Union||(LA58_0>=Yield && LA58_0<=This)||LA58_0==From||LA58_0==Type||(LA58_0>=Get && LA58_0<=Let)||(LA58_0>=Out && LA58_0<=Set)||LA58_0==As||LA58_0==Of||LA58_0==RULE_IDENTIFIER) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_42);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==Colon) && (synpred22_InternalN4JSParser())) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_3=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_StrictFormalParameters_2 = null;

        EObject this_ColonSepReturnTypeRef_3 = null;



        	enterRule();

        try {
            {
            {
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LessThanSign) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_41);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( ((LA61_0>=Intersection && LA61_0<=Implements)||(LA61_0>=Promisify && LA61_0<=Abstract)||LA61_0==External||(LA61_0>=Private && LA61_0<=Project)||LA61_0==Public||LA61_0==Static||LA61_0==Target||(LA61_0>=Async && LA61_0<=Await)||LA61_0==Union||LA61_0==This||LA61_0==From||LA61_0==Type||(LA61_0>=Get && LA61_0<=Let)||(LA61_0>=Out && LA61_0<=Set)||LA61_0==As||LA61_0==Of||LA61_0==RULE_IDENTIFIER) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_42);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_3=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_StrictFormalParameters_2 = null;

        EObject this_ColonSepReturnTypeRef_3 = null;



        	enterRule();

        try {
            {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LessThanSign) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||(LA64_0>=Yield && LA64_0<=This)||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==RULE_IDENTIFIER) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_40);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_3=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_StrictFormalParameters_2 = null;

        EObject this_ColonSepReturnTypeRef_3 = null;



        	enterRule();

        try {
            {
            {
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LessThanSign) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=Intersection && LA67_0<=Implements)||(LA67_0>=Promisify && LA67_0<=Abstract)||LA67_0==External||(LA67_0>=Private && LA67_0<=Project)||LA67_0==Public||LA67_0==Static||LA67_0==Target||(LA67_0>=Async && LA67_0<=Await)||LA67_0==Union||LA67_0==This||LA67_0==From||LA67_0==Type||(LA67_0>=Get && LA67_0<=Let)||(LA67_0>=Out && LA67_0<=Set)||LA67_0==As||LA67_0==Of||LA67_0==RULE_IDENTIFIER) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_40);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Colon) && (synpred25_InternalN4JSParser())) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_3=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedFunctionDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedFunctionDeclaration=ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_annotationList_0_0 = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_6);
            lv_annotationList_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( ((LA71_0>=Protected && LA71_0<=Abstract)||LA71_0==External||(LA71_0>=Private && LA71_0<=Project)||LA71_0==Public||LA71_0==Static||LA71_0==Const) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_6);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=ruleFunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_annotationList_0_0 = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_6);
            lv_annotationList_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>=Protected && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Const) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_37);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=norm3_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExpression=ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject this_FunctionImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_1=norm6_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAsyncFunctionExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsyncFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAsyncFunctionExpression=ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsyncFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_0_0=null;
        Token otherlv_2=null;
        EObject this_NoLineTerminator_1 = null;

        EObject this_FunctionHeader_3 = null;

        EObject this_FunctionBody_4 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
              						
            }
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              							}
              							setWithLastConsumed(current, "declaredAsync", true, "async");
              						
            }

            }


            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_45);
            this_NoLineTerminator_1=ruleNoLineTerminator(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_NoLineTerminator_1;
              					afterParserOrEnumRuleCall();
              				
            }
            otherlv_2=(Token)match(input,Function,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_13);
            this_FunctionHeader_3=ruleFunctionHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionHeader_3;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionBody_4=norm2_FunctionBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionBody_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowExpression=ruleArrowExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt75=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt75=1;
                }
                break;
            case Async:
                {
                int LA75_2 = input.LA(2);

                if ( (LA75_2==RULE_NO_LINE_TERMINATOR) && (synpred36_InternalN4JSParser())) {
                    alt75=2;
                }
                else if ( (LA75_2==LeftParenthesis) && (synpred36_InternalN4JSParser())) {
                    alt75=2;
                }
                else if ( (LA75_2==EqualsSignGreaterThanSign) ) {
                    alt75=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==Colon) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==Colon) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt79=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt79=1;
                }
                break;
            case Async:
                {
                int LA79_2 = input.LA(2);

                if ( (LA79_2==RULE_NO_LINE_TERMINATOR) && (synpred42_InternalN4JSParser())) {
                    alt79=2;
                }
                else if ( (LA79_2==LeftParenthesis) && (synpred42_InternalN4JSParser())) {
                    alt79=2;
                }
                else if ( (LA79_2==EqualsSignGreaterThanSign) ) {
                    alt79=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt79=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==Colon) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==Colon) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt83=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt83=1;
                }
                break;
            case Async:
                {
                int LA83_2 = input.LA(2);

                if ( (LA83_2==RULE_NO_LINE_TERMINATOR) && (synpred48_InternalN4JSParser())) {
                    alt83=2;
                }
                else if ( (LA83_2==LeftParenthesis) && (synpred48_InternalN4JSParser())) {
                    alt83=2;
                }
                else if ( (LA83_2==EqualsSignGreaterThanSign) ) {
                    alt83=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==Colon) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==Colon) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt87=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt87=1;
                }
                break;
            case Async:
                {
                int LA87_2 = input.LA(2);

                if ( (LA87_2==EqualsSignGreaterThanSign) ) {
                    alt87=3;
                }
                else if ( (LA87_2==RULE_NO_LINE_TERMINATOR) && (synpred54_InternalN4JSParser())) {
                    alt87=2;
                }
                else if ( (LA87_2==LeftParenthesis) && (synpred54_InternalN4JSParser())) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==Colon) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==Colon) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;

        EObject lv_fpars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( ((LA90_0>=Intersection && LA90_0<=Implements)||(LA90_0>=Promisify && LA90_0<=Abstract)||LA90_0==External||(LA90_0>=Private && LA90_0<=Project)||LA90_0==Public||LA90_0==Static||LA90_0==Target||(LA90_0>=Async && LA90_0<=Await)||LA90_0==Union||(LA90_0>=Yield && LA90_0<=This)||LA90_0==From||LA90_0==This_1||(LA90_0>=Type && LA90_0<=Void)||LA90_0==FullStopFullStopFullStop||(LA90_0>=Get && LA90_0<=Let)||(LA90_0>=Out && LA90_0<=Set)||LA90_0==As||LA90_0==Of||(LA90_0>=CommercialAt && LA90_0<=LeftSquareBracket)||LA90_0==LeftCurlyBracket||LA90_0==Tilde||LA90_0==RULE_IDENTIFIER) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_53);
                    lv_fpars_1_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==Comma) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_53);
                    	    lv_fpars_3_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_StrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;

        EObject lv_fpars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( ((LA92_0>=Intersection && LA92_0<=Implements)||(LA92_0>=Promisify && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Target||(LA92_0>=Async && LA92_0<=Await)||LA92_0==Union||LA92_0==This||LA92_0==From||LA92_0==This_1||(LA92_0>=Type && LA92_0<=Void)||LA92_0==FullStopFullStopFullStop||(LA92_0>=Get && LA92_0<=Let)||(LA92_0>=Out && LA92_0<=Set)||LA92_0==As||LA92_0==Of||(LA92_0>=CommercialAt && LA92_0<=LeftSquareBracket)||LA92_0==LeftCurlyBracket||LA92_0==Tilde||LA92_0==RULE_IDENTIFIER) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_53);
                    lv_fpars_1_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==Comma) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_53);
                    	    lv_fpars_3_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingIdentifierAsFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsFormalParameter=ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlockMinusBraces = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockMinusBracesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlockMinusBraces=ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockMinusBraces; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( ((LA93_0>=Intersection && LA93_0<=Implements)||(LA93_0>=Promisify && LA93_0<=Function)||(LA93_0>=Private && LA93_0<=Delete)||(LA93_0>=Public && LA93_0<=Break)||(LA93_0>=Class && LA93_0<=This)||(LA93_0>=From && LA93_0<=With)||(LA93_0>=For && LA93_0<=Var)||LA93_0==PlusSignPlusSign||LA93_0==HyphenMinusHyphenMinus||LA93_0==SolidusEqualsSign||(LA93_0>=As && LA93_0<=If)||LA93_0==Of||LA93_0==ExclamationMark||LA93_0==LeftParenthesis||LA93_0==PlusSign||LA93_0==HyphenMinus||LA93_0==Solidus||(LA93_0>=Semicolon && LA93_0<=LessThanSign)||(LA93_0>=CommercialAt && LA93_0<=LeftSquareBracket)||LA93_0==LeftCurlyBracket||LA93_0==Tilde||LA93_0==RULE_DOUBLE||(LA93_0>=RULE_HEX_INT && LA93_0<=RULE_LEGACY_OCTAL_INT)||LA93_0==RULE_SCIENTIFIC_INT||LA93_0==RULE_IDENTIFIER||LA93_0==RULE_STRING||(LA93_0>=RULE_TEMPLATE_HEAD && LA93_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA93_0==RULE_INT) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0>=Intersection && LA94_0<=Implements)||(LA94_0>=Promisify && LA94_0<=Function)||(LA94_0>=Private && LA94_0<=Delete)||(LA94_0>=Public && LA94_0<=Break)||(LA94_0>=Class && LA94_0<=This)||(LA94_0>=From && LA94_0<=With)||(LA94_0>=For && LA94_0<=Var)||LA94_0==PlusSignPlusSign||LA94_0==HyphenMinusHyphenMinus||LA94_0==SolidusEqualsSign||(LA94_0>=As && LA94_0<=If)||LA94_0==Of||LA94_0==ExclamationMark||LA94_0==LeftParenthesis||LA94_0==PlusSign||LA94_0==HyphenMinus||LA94_0==Solidus||(LA94_0>=Semicolon && LA94_0<=LessThanSign)||(LA94_0>=CommercialAt && LA94_0<=LeftSquareBracket)||LA94_0==LeftCurlyBracket||LA94_0==Tilde||LA94_0==RULE_DOUBLE||(LA94_0>=RULE_HEX_INT && LA94_0<=RULE_LEGACY_OCTAL_INT)||LA94_0==RULE_SCIENTIFIC_INT||LA94_0==RULE_IDENTIFIER||LA94_0==RULE_STRING||(LA94_0>=RULE_TEMPLATE_HEAD && LA94_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA94_0==RULE_INT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionDisguisedAsBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionDisguisedAsBlock=ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionDisguisedAsBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssignmentExpressionStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpressionStatement=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExpression=ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_ClassExtendsClause_4 = null;

        EObject this_Members_5 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_55);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Class) ) {
                alt97=1;
            }
            else if ( (LA97_0==Function||LA97_0==Async) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_2=(Token)match(input,Class,FOLLOW_56); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      				
                    }
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=Intersection && LA95_0<=Constructor)||(LA95_0>=Promisify && LA95_0<=Abstract)||LA95_0==External||(LA95_0>=Private && LA95_0<=Project)||LA95_0==Public||LA95_0==Static||LA95_0==Target||(LA95_0>=Async && LA95_0<=Await)||LA95_0==Union||(LA95_0>=Yield && LA95_0<=This)||LA95_0==From||LA95_0==Type||(LA95_0>=Get && LA95_0<=Let)||(LA95_0>=Out && LA95_0<=Set)||LA95_0==As||LA95_0==Of||LA95_0==RULE_IDENTIFIER) ) {
                        alt95=1;
                    }
                    else if ( (LA95_0==Implements) ) {
                        int LA95_2 = input.LA(2);

                        if ( (LA95_2==Implements||LA95_2==Extends||LA95_2==LeftCurlyBracket) ) {
                            alt95=1;
                        }
                    }
                    switch (alt95) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                              						
                            }
                            pushFollow(FOLLOW_10);
                            lv_name_3_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==Implements||LA96_0==Extends) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3());
                              					
                            }
                            pushFollow(FOLLOW_10);
                            this_ClassExtendsClause_4=ruleClassExtendsClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ClassExtendsClause_4;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_ClassExtendsClause_4 = null;

        EObject this_Members_5 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_55);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==Class) ) {
                alt100=1;
            }
            else if ( (LA100_0==Function||LA100_0==Async) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_2=(Token)match(input,Class,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      				
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( ((LA98_0>=Intersection && LA98_0<=Constructor)||(LA98_0>=Promisify && LA98_0<=Abstract)||LA98_0==External||(LA98_0>=Private && LA98_0<=Project)||LA98_0==Public||LA98_0==Static||LA98_0==Target||(LA98_0>=Async && LA98_0<=Await)||LA98_0==Union||LA98_0==This||LA98_0==From||LA98_0==Type||(LA98_0>=Get && LA98_0<=Let)||(LA98_0>=Out && LA98_0<=Set)||LA98_0==As||LA98_0==Of||LA98_0==RULE_IDENTIFIER) ) {
                        alt98=1;
                    }
                    else if ( (LA98_0==Implements) ) {
                        int LA98_2 = input.LA(2);

                        if ( (LA98_2==Implements||LA98_2==Extends||LA98_2==LeftCurlyBracket) ) {
                            alt98=1;
                        }
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                              						
                            }
                            pushFollow(FOLLOW_57);
                            lv_name_3_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==Implements||LA99_0==Extends) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3());
                              					
                            }
                            pushFollow(FOLLOW_57);
                            this_ClassExtendsClause_4=norm1_ClassExtendsClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ClassExtendsClause_4;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=norm1_Members(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormalParameter=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementFragment_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=ruleBindingElementFragment(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FormalParameter() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementFragment_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=norm1_BindingElementFragment(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;

        EObject lv_annotations_1_0 = null;

        EObject this_BogusTypeRefFragment_2 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_ColonSepDeclaredTypeRef_5 = null;

        EObject lv_initializer_7_0 = null;



        	enterRule();

        try {
            {
            {
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_58);
                    lv_bindingPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);

                        if ( (LA101_0==CommercialAt) ) {
                            alt101=1;
                        }


                        switch (alt101) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_59);
                    	    lv_annotations_1_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop101;
                        }
                    } while (true);
                    int alt102=2;
                    alt102 = dfa102.predict(input);
                    switch (alt102) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                              					
                            }
                            pushFollow(FOLLOW_60);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==FullStopFullStopFullStop) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_61);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==Colon) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                              					
                            }
                            pushFollow(FOLLOW_58);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==EqualsSign) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      					
                    }

                    }


                    }
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( ((LA106_0>=Intersection && LA106_0<=Implements)||(LA106_0>=Promisify && LA106_0<=Abstract)||(LA106_0>=External && LA106_0<=Function)||(LA106_0>=Private && LA106_0<=Delete)||LA106_0==Public||LA106_0==Static||(LA106_0>=Target && LA106_0<=Await)||LA106_0==Class||(LA106_0>=False && LA106_0<=Super)||LA106_0==Union||(LA106_0>=Yield && LA106_0<=This)||(LA106_0>=From && LA106_0<=Void)||(LA106_0>=Get && LA106_0<=Set)||LA106_0==PlusSignPlusSign||LA106_0==HyphenMinusHyphenMinus||LA106_0==SolidusEqualsSign||LA106_0==As||LA106_0==Of||LA106_0==ExclamationMark||LA106_0==LeftParenthesis||LA106_0==PlusSign||LA106_0==HyphenMinus||LA106_0==Solidus||LA106_0==LessThanSign||(LA106_0>=CommercialAt && LA106_0<=LeftSquareBracket)||LA106_0==LeftCurlyBracket||LA106_0==Tilde||LA106_0==RULE_DOUBLE||(LA106_0>=RULE_HEX_INT && LA106_0<=RULE_LEGACY_OCTAL_INT)||LA106_0==RULE_SCIENTIFIC_INT||LA106_0==RULE_IDENTIFIER||LA106_0==RULE_STRING||(LA106_0>=RULE_TEMPLATE_HEAD && LA106_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA106_0==RULE_INT) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;

        EObject lv_annotations_1_0 = null;

        EObject this_BogusTypeRefFragment_2 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_ColonSepDeclaredTypeRef_5 = null;

        EObject lv_initializer_7_0 = null;



        	enterRule();

        try {
            {
            {
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_58);
                    lv_bindingPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==CommercialAt) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_59);
                    	    lv_annotations_1_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);
                    int alt109=2;
                    alt109 = dfa109.predict(input);
                    switch (alt109) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                              					
                            }
                            pushFollow(FOLLOW_60);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==FullStopFullStopFullStop) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_61);
                    lv_name_4_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==Colon) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                              					
                            }
                            pushFollow(FOLLOW_58);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==EqualsSign) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      					
                    }

                    }


                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Abstract)||(LA113_0>=External && LA113_0<=Function)||(LA113_0>=Private && LA113_0<=Delete)||LA113_0==Public||LA113_0==Static||(LA113_0>=Target && LA113_0<=Await)||LA113_0==Class||(LA113_0>=False && LA113_0<=Super)||LA113_0==Union||(LA113_0>=Yield && LA113_0<=This)||(LA113_0>=From && LA113_0<=Void)||(LA113_0>=Get && LA113_0<=Set)||LA113_0==PlusSignPlusSign||LA113_0==HyphenMinusHyphenMinus||LA113_0==SolidusEqualsSign||LA113_0==As||LA113_0==Of||LA113_0==ExclamationMark||LA113_0==LeftParenthesis||LA113_0==PlusSign||LA113_0==HyphenMinus||LA113_0==Solidus||LA113_0==LessThanSign||(LA113_0>=CommercialAt && LA113_0<=LeftSquareBracket)||LA113_0==LeftCurlyBracket||LA113_0==Tilde||LA113_0==RULE_DOUBLE||(LA113_0>=RULE_HEX_INT && LA113_0<=RULE_LEGACY_OCTAL_INT)||LA113_0==RULE_SCIENTIFIC_INT||LA113_0==RULE_IDENTIFIER||LA113_0==RULE_STRING||(LA113_0>=RULE_TEMPLATE_HEAD && LA113_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA113_0==RULE_INT) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBogusTypeRefFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_bogusTypeRef_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefTypeRefWithModifiersParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_bogusTypeRef_0_0=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBogusTypeRefFragmentRule());
              				}
              				set(
              					current,
              					"bogusTypeRef",
              					lv_bogusTypeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlock=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              				
            }

            }


            }
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( ((LA115_0>=Intersection && LA115_0<=Implements)||(LA115_0>=Promisify && LA115_0<=Function)||(LA115_0>=Private && LA115_0<=Delete)||(LA115_0>=Public && LA115_0<=Break)||(LA115_0>=Class && LA115_0<=This)||(LA115_0>=From && LA115_0<=With)||(LA115_0>=For && LA115_0<=Var)||LA115_0==PlusSignPlusSign||LA115_0==HyphenMinusHyphenMinus||LA115_0==SolidusEqualsSign||(LA115_0>=As && LA115_0<=If)||LA115_0==Of||LA115_0==ExclamationMark||LA115_0==LeftParenthesis||LA115_0==PlusSign||LA115_0==HyphenMinus||LA115_0==Solidus||(LA115_0>=Semicolon && LA115_0<=LessThanSign)||(LA115_0>=CommercialAt && LA115_0<=LeftSquareBracket)||LA115_0==LeftCurlyBracket||LA115_0==Tilde||LA115_0==RULE_DOUBLE||(LA115_0>=RULE_HEX_INT && LA115_0<=RULE_LEGACY_OCTAL_INT)||LA115_0==RULE_SCIENTIFIC_INT||LA115_0==RULE_IDENTIFIER||LA115_0==RULE_STRING||(LA115_0>=RULE_TEMPLATE_HEAD && LA115_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA115_0==RULE_INT) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_statements_2_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);

            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Block() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              				
            }

            }


            }
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( ((LA116_0>=Intersection && LA116_0<=Implements)||(LA116_0>=Promisify && LA116_0<=Function)||(LA116_0>=Private && LA116_0<=Delete)||(LA116_0>=Public && LA116_0<=Break)||(LA116_0>=Class && LA116_0<=This)||(LA116_0>=From && LA116_0<=With)||(LA116_0>=For && LA116_0<=Var)||LA116_0==PlusSignPlusSign||LA116_0==HyphenMinusHyphenMinus||LA116_0==SolidusEqualsSign||(LA116_0>=As && LA116_0<=If)||LA116_0==Of||LA116_0==ExclamationMark||LA116_0==LeftParenthesis||LA116_0==PlusSign||LA116_0==HyphenMinus||LA116_0==Solidus||(LA116_0>=Semicolon && LA116_0<=LessThanSign)||(LA116_0>=CommercialAt && LA116_0<=LeftSquareBracket)||LA116_0==LeftCurlyBracket||LA116_0==Tilde||LA116_0==RULE_DOUBLE||(LA116_0>=RULE_HEX_INT && LA116_0<=RULE_LEGACY_OCTAL_INT)||LA116_0==RULE_SCIENTIFIC_INT||LA116_0==RULE_IDENTIFIER||LA116_0==RULE_STRING||(LA116_0>=RULE_TEMPLATE_HEAD && LA116_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA116_0==RULE_INT) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_statements_2_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRootStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRootStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRootStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRootStatement=ruleRootStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRootStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRootStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Block_0 = null;

        EObject this_FunctionDeclaration_1 = null;

        EObject this_VariableStatement_2 = null;

        EObject this_EmptyStatement_3 = null;

        EObject this_LabelledStatement_4 = null;

        EObject this_ExpressionStatement_5 = null;

        EObject this_IfStatement_6 = null;

        EObject this_IterationStatement_7 = null;

        EObject this_ContinueStatement_8 = null;

        EObject this_BreakStatement_9 = null;

        EObject this_ReturnStatement_10 = null;

        EObject this_WithStatement_11 = null;

        EObject this_SwitchStatement_12 = null;

        EObject this_ThrowStatement_13 = null;

        EObject this_TryStatement_14 = null;

        EObject this_DebuggerStatement_15 = null;



        	enterRule();

        try {
            {
            int alt117=16;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RootStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Block_0 = null;

        EObject this_FunctionDeclaration_1 = null;

        EObject this_VariableStatement_2 = null;

        EObject this_EmptyStatement_3 = null;

        EObject this_LabelledStatement_4 = null;

        EObject this_ExpressionStatement_5 = null;

        EObject this_IfStatement_6 = null;

        EObject this_IterationStatement_7 = null;

        EObject this_ContinueStatement_8 = null;

        EObject this_BreakStatement_9 = null;

        EObject this_ReturnStatement_10 = null;

        EObject this_WithStatement_11 = null;

        EObject this_SwitchStatement_12 = null;

        EObject this_ThrowStatement_13 = null;

        EObject this_TryStatement_14 = null;

        EObject this_DebuggerStatement_15 = null;



        	enterRule();

        try {
            {
            int alt118=16;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedFunctionDeclaration_0 = null;

        EObject this_RootStatement_1 = null;



        	enterRule();

        try {
            {
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Statement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedFunctionDeclaration_0 = null;

        EObject this_RootStatement_1 = null;



        	enterRule();

        try {
            {
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;

        EObject lv_varDeclsOrBindings_2_0 = null;

        EObject lv_varDeclsOrBindings_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
              					
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_28);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_varDeclsOrBindings_2_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==Comma) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_varDeclsOrBindings_4_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;

        EObject lv_varDeclsOrBindings_2_0 = null;

        EObject lv_varDeclsOrBindings_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
              					
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_28);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_varDeclsOrBindings_2_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==Comma) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_varDeclsOrBindings_4_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableStatement=ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        Enumerator lv_varStmtKeyword_2_0 = null;

        EObject lv_varDeclsOrBindings_3_0 = null;

        EObject lv_varDeclsOrBindings_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableStatementAccess().getExportedVariableStatementAction_0(),
              					current);
              			
            }

            }
            loop123:
            do {
                int alt123=2;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_27);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_varDeclsOrBindings_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==Comma) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_varDeclsOrBindings_5_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclarationOrBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclarationOrBinding=ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LeftCurlyBracket) && (synpred73_InternalN4JSParser())) {
                alt125=1;
            }
            else if ( (LA125_0==LeftSquareBracket) && (synpred73_InternalN4JSParser())) {
                alt125=1;
            }
            else if ( ((LA125_0>=Intersection && LA125_0<=Implements)||(LA125_0>=Promisify && LA125_0<=Abstract)||LA125_0==External||(LA125_0>=Private && LA125_0<=Project)||LA125_0==Public||LA125_0==Static||LA125_0==Target||(LA125_0>=Async && LA125_0<=Await)||LA125_0==Union||(LA125_0>=Yield && LA125_0<=This)||LA125_0==From||LA125_0==Type||(LA125_0>=Get && LA125_0<=Let)||(LA125_0>=Out && LA125_0<=Set)||LA125_0==As||LA125_0==Of||LA125_0==CommercialAt||LA125_0==RULE_IDENTIFIER) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==LeftCurlyBracket) && (synpred74_InternalN4JSParser())) {
                alt126=1;
            }
            else if ( (LA126_0==LeftSquareBracket) && (synpred74_InternalN4JSParser())) {
                alt126=1;
            }
            else if ( ((LA126_0>=Intersection && LA126_0<=Implements)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||(LA126_0>=Async && LA126_0<=Await)||LA126_0==Union||(LA126_0>=Yield && LA126_0<=This)||LA126_0==From||LA126_0==Type||(LA126_0>=Get && LA126_0<=Let)||(LA126_0>=Out && LA126_0<=Set)||LA126_0==As||LA126_0==Of||LA126_0==CommercialAt||LA126_0==RULE_IDENTIFIER) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==LeftCurlyBracket) && (synpred75_InternalN4JSParser())) {
                alt127=1;
            }
            else if ( (LA127_0==LeftSquareBracket) && (synpred75_InternalN4JSParser())) {
                alt127=1;
            }
            else if ( ((LA127_0>=Intersection && LA127_0<=Implements)||(LA127_0>=Promisify && LA127_0<=Abstract)||LA127_0==External||(LA127_0>=Private && LA127_0<=Project)||LA127_0==Public||LA127_0==Static||LA127_0==Target||(LA127_0>=Async && LA127_0<=Await)||LA127_0==Union||LA127_0==This||LA127_0==From||LA127_0==Type||(LA127_0>=Get && LA127_0<=Let)||(LA127_0>=Out && LA127_0<=Set)||LA127_0==As||LA127_0==Of||LA127_0==CommercialAt||LA127_0==RULE_IDENTIFIER) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( (LA128_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( ((LA128_0>=Intersection && LA128_0<=Implements)||(LA128_0>=Promisify && LA128_0<=Abstract)||LA128_0==External||(LA128_0>=Private && LA128_0<=Project)||LA128_0==Public||LA128_0==Static||LA128_0==Target||(LA128_0>=Async && LA128_0<=Await)||LA128_0==Union||LA128_0==This||LA128_0==From||LA128_0==Type||(LA128_0>=Get && LA128_0<=Let)||(LA128_0>=Out && LA128_0<=Set)||LA128_0==As||LA128_0==Of||LA128_0==CommercialAt||LA128_0==RULE_IDENTIFIER) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt129=1;
            }
            else if ( (LA129_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt129=1;
            }
            else if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Abstract)||LA129_0==External||(LA129_0>=Private && LA129_0<=Project)||LA129_0==Public||LA129_0==Static||LA129_0==Target||(LA129_0>=Async && LA129_0<=Await)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||LA129_0==From||LA129_0==Type||(LA129_0>=Get && LA129_0<=Let)||(LA129_0>=Out && LA129_0<=Set)||LA129_0==As||LA129_0==Of||LA129_0==CommercialAt||LA129_0==RULE_IDENTIFIER) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==LeftCurlyBracket) && (synpred78_InternalN4JSParser())) {
                alt130=1;
            }
            else if ( (LA130_0==LeftSquareBracket) && (synpred78_InternalN4JSParser())) {
                alt130=1;
            }
            else if ( ((LA130_0>=Intersection && LA130_0<=Implements)||(LA130_0>=Promisify && LA130_0<=Abstract)||LA130_0==External||(LA130_0>=Private && LA130_0<=Project)||LA130_0==Public||LA130_0==Static||LA130_0==Target||(LA130_0>=Async && LA130_0<=Await)||LA130_0==Union||LA130_0==This||LA130_0==From||LA130_0==Type||(LA130_0>=Get && LA130_0<=Let)||(LA130_0>=Out && LA130_0<=Set)||LA130_0==As||LA130_0==Of||LA130_0==CommercialAt||LA130_0==RULE_IDENTIFIER) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableBinding=ruleVariableBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==EqualsSign) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==EqualsSign) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EqualsSign) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==EqualsSign) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm1_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm3_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm4_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm6_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_58);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==EqualsSign) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_58);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==EqualsSign) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop139:
            do {
                int alt139=2;
                alt139 = dfa139.predict(input);
                switch (alt139) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_58);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==EqualsSign) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_58);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==EqualsSign) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_61);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==Colon) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==EqualsSign) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop146:
            do {
                int alt146=2;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_61);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==Colon) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==EqualsSign) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_61);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==Colon) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==EqualsSign) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop152:
            do {
                int alt152=2;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_61);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==Colon) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableDeclarationOrBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclarationOrBinding=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_ExportedVariableBinding_0 = null;

        EObject this_ExportedVariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LeftCurlyBracket) && (synpred95_InternalN4JSParser())) {
                alt155=1;
            }
            else if ( (LA155_0==LeftSquareBracket) && (synpred95_InternalN4JSParser())) {
                alt155=1;
            }
            else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Abstract)||LA155_0==External||(LA155_0>=Private && LA155_0<=Project)||LA155_0==Public||LA155_0==Static||LA155_0==Target||(LA155_0>=Async && LA155_0<=Await)||LA155_0==Union||(LA155_0>=Yield && LA155_0<=This)||LA155_0==From||LA155_0==Type||(LA155_0>=Get && LA155_0<=Let)||(LA155_0>=Out && LA155_0<=Set)||LA155_0==As||LA155_0==Of||LA155_0==CommercialAt||LA155_0==RULE_IDENTIFIER) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_ExportedVariableBinding_0 = null;

        EObject this_ExportedVariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LeftCurlyBracket) && (synpred96_InternalN4JSParser())) {
                alt156=1;
            }
            else if ( (LA156_0==LeftSquareBracket) && (synpred96_InternalN4JSParser())) {
                alt156=1;
            }
            else if ( ((LA156_0>=Intersection && LA156_0<=Implements)||(LA156_0>=Promisify && LA156_0<=Abstract)||LA156_0==External||(LA156_0>=Private && LA156_0<=Project)||LA156_0==Public||LA156_0==Static||LA156_0==Target||(LA156_0>=Async && LA156_0<=Await)||LA156_0==Union||LA156_0==This||LA156_0==From||LA156_0==Type||(LA156_0>=Get && LA156_0<=Let)||(LA156_0>=Out && LA156_0<=Set)||LA156_0==As||LA156_0==Of||LA156_0==CommercialAt||LA156_0==RULE_IDENTIFIER) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableBinding=ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclaration=ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEmptyStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyStatement=ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionStatement=ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIfStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;

        EObject lv_ifStmt_4_0 = null;

        EObject lv_elseStmt_6_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_67);
            lv_ifStmt_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==Else) ) {
                int LA157_1 = input.LA(2);

                if ( (synpred99_InternalN4JSParser()) ) {
                    alt157=1;
                }
            }
            switch (alt157) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;

        EObject lv_ifStmt_4_0 = null;

        EObject lv_elseStmt_6_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_67);
            lv_ifStmt_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==Else) ) {
                int LA158_1 = input.LA(2);

                if ( (synpred100_InternalN4JSParser()) ) {
                    alt158=1;
                }
            }
            switch (alt158) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterationStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIterationStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterationStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterationStatement=ruleIterationStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterationStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterationStatement() throws RecognitionException {
        EObject current = null;

        EObject this_DoStatement_0 = null;

        EObject this_WhileStatement_1 = null;

        EObject this_ForStatement_2 = null;



        	enterRule();

        try {
            {
            int alt159=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt159=1;
                }
                break;
            case While:
                {
                alt159=2;
                }
                break;
            case For:
                {
                alt159=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IterationStatement() throws RecognitionException {
        EObject current = null;

        EObject this_DoStatement_0 = null;

        EObject this_WhileStatement_1 = null;

        EObject this_ForStatement_2 = null;



        	enterRule();

        try {
            {
            int alt160=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt160=1;
                }
                break;
            case While:
                {
                alt160=2;
                }
                break;
            case For:
                {
                alt160=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDoStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoStatement=ruleDoStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_statement_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt161=2;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DoStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_statement_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==Semicolon) ) {
                int LA162_1 = input.LA(2);

                if ( (synpred102_InternalN4JSParser()) ) {
                    alt162=1;
                }
            }
            else if ( (LA162_0==EOF||LA162_0==RULE_ML_COMMENT||LA162_0==RULE_EOL) && (synpred102_InternalN4JSParser())) {
                alt162=1;
            }
            else if ( (LA162_0==RightCurlyBracket) ) {
                int LA162_3 = input.LA(2);

                if ( (synpred102_InternalN4JSParser()) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhileStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WhileStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_forIn_4_0=null;
        Token otherlv_6=null;
        Token lv_forIn_9_0=null;
        Token lv_forOf_10_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token lv_forIn_19_0=null;
        Token lv_forOf_21_0=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token lv_forIn_28_0=null;
        Token lv_forOf_30_0=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_36=null;
        EObject lv_initExpr_3_0 = null;

        EObject lv_expression_5_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_expression_11_0 = null;

        EObject lv_varDeclsOrBindings_12_0 = null;

        EObject lv_varDeclsOrBindings_14_0 = null;

        EObject lv_expression_16_0 = null;

        EObject lv_updateExpr_18_0 = null;

        EObject lv_expression_20_0 = null;

        EObject lv_expression_22_0 = null;

        EObject lv_initExpr_23_0 = null;

        EObject lv_expression_25_0 = null;

        EObject lv_updateExpr_27_0 = null;

        EObject lv_expression_29_0 = null;

        EObject lv_expression_31_0 = null;

        EObject lv_expression_33_0 = null;

        EObject lv_updateExpr_35_0 = null;

        EObject lv_statement_37_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              		
            }
            int alt180=2;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_3_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_70);
                    lv_initExpr_3_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_3_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    {
                    lv_forIn_4_0=(Token)match(input,In,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_forIn_4_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                      							
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_65);
                    lv_expression_5_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_5_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt179=3;
                    alt179 = dfa179.predict(input);
                    switch (alt179) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_3_1_0_0_0_0());
                              								
                            }
                            pushFollow(FOLLOW_28);
                            lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_7_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt171=2;
                            alt171 = dfa171.predict(input);
                            switch (alt171) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0());
                                      											
                                    }
                                    pushFollow(FOLLOW_71);
                                    lv_varDeclsOrBindings_8_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_8_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                      											
                                    }

                                    }


                                    }
                                    int alt163=2;
                                    int LA163_0 = input.LA(1);

                                    if ( (LA163_0==In) ) {
                                        alt163=1;
                                    }
                                    else if ( (LA163_0==Of) ) {
                                        alt163=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 163, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt163) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_9_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_9_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_10_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_10_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt164=2;
                                    alt164 = dfa164.predict(input);
                                    switch (alt164) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0());
                                              											
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_11_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_11_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                              											
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_73);
                                    lv_varDeclsOrBindings_12_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_12_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }
                                    int alt170=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt170=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt170=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt170=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 170, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt170) {
                                        case 1 :
                                            {
                                            {
                                            loop165:
                                            do {
                                                int alt165=2;
                                                int LA165_0 = input.LA(1);

                                                if ( (LA165_0==Comma) ) {
                                                    alt165=1;
                                                }


                                                switch (alt165) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_13=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      												newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      											
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {

                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0());
                                            	      													
                                            	    }
                                            	    pushFollow(FOLLOW_74);
                                            	    lv_varDeclsOrBindings_14_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_14_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	      													
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop165;
                                                }
                                            } while (true);

                                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_15, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              										
                                            }
                                            int alt166=2;
                                            int LA166_0 = input.LA(1);

                                            if ( ((LA166_0>=Intersection && LA166_0<=Implements)||(LA166_0>=Promisify && LA166_0<=Abstract)||(LA166_0>=External && LA166_0<=Function)||(LA166_0>=Private && LA166_0<=Delete)||LA166_0==Public||LA166_0==Static||(LA166_0>=Target && LA166_0<=Await)||LA166_0==Class||(LA166_0>=False && LA166_0<=Super)||LA166_0==Union||(LA166_0>=Yield && LA166_0<=This)||(LA166_0>=From && LA166_0<=Void)||(LA166_0>=Get && LA166_0<=Set)||LA166_0==PlusSignPlusSign||LA166_0==HyphenMinusHyphenMinus||LA166_0==SolidusEqualsSign||LA166_0==As||LA166_0==Of||LA166_0==ExclamationMark||LA166_0==LeftParenthesis||LA166_0==PlusSign||LA166_0==HyphenMinus||LA166_0==Solidus||LA166_0==LessThanSign||(LA166_0>=CommercialAt && LA166_0<=LeftSquareBracket)||LA166_0==LeftCurlyBracket||LA166_0==Tilde||LA166_0==RULE_DOUBLE||(LA166_0>=RULE_HEX_INT && LA166_0<=RULE_LEGACY_OCTAL_INT)||LA166_0==RULE_SCIENTIFIC_INT||LA166_0==RULE_IDENTIFIER||LA166_0==RULE_STRING||(LA166_0>=RULE_TEMPLATE_HEAD && LA166_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA166_0==RULE_INT) ) {
                                                alt166=1;
                                            }
                                            switch (alt166) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_76);
                                                    lv_expression_16_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_16_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            otherlv_17=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              										
                                            }
                                            int alt167=2;
                                            int LA167_0 = input.LA(1);

                                            if ( ((LA167_0>=Intersection && LA167_0<=Implements)||(LA167_0>=Promisify && LA167_0<=Abstract)||(LA167_0>=External && LA167_0<=Function)||(LA167_0>=Private && LA167_0<=Delete)||LA167_0==Public||LA167_0==Static||(LA167_0>=Target && LA167_0<=Await)||LA167_0==Class||(LA167_0>=False && LA167_0<=Super)||LA167_0==Union||(LA167_0>=Yield && LA167_0<=This)||(LA167_0>=From && LA167_0<=Void)||(LA167_0>=Get && LA167_0<=Set)||LA167_0==PlusSignPlusSign||LA167_0==HyphenMinusHyphenMinus||LA167_0==SolidusEqualsSign||LA167_0==As||LA167_0==Of||LA167_0==ExclamationMark||LA167_0==LeftParenthesis||LA167_0==PlusSign||LA167_0==HyphenMinus||LA167_0==Solidus||LA167_0==LessThanSign||(LA167_0>=CommercialAt && LA167_0<=LeftSquareBracket)||LA167_0==LeftCurlyBracket||LA167_0==Tilde||LA167_0==RULE_DOUBLE||(LA167_0>=RULE_HEX_INT && LA167_0<=RULE_LEGACY_OCTAL_INT)||LA167_0==RULE_SCIENTIFIC_INT||LA167_0==RULE_IDENTIFIER||LA167_0==RULE_STRING||(LA167_0>=RULE_TEMPLATE_HEAD && LA167_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA167_0==RULE_INT) ) {
                                                alt167=1;
                                            }
                                            switch (alt167) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_updateExpr_18_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_18_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_19_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_19_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }
                                            int alt168=2;
                                            int LA168_0 = input.LA(1);

                                            if ( ((LA168_0>=Intersection && LA168_0<=Implements)||(LA168_0>=Promisify && LA168_0<=Abstract)||(LA168_0>=External && LA168_0<=Function)||(LA168_0>=Private && LA168_0<=Delete)||LA168_0==Public||LA168_0==Static||(LA168_0>=Target && LA168_0<=Await)||LA168_0==Class||(LA168_0>=False && LA168_0<=Super)||LA168_0==Union||(LA168_0>=Yield && LA168_0<=This)||(LA168_0>=From && LA168_0<=Void)||(LA168_0>=Get && LA168_0<=Set)||LA168_0==PlusSignPlusSign||LA168_0==HyphenMinusHyphenMinus||LA168_0==SolidusEqualsSign||LA168_0==As||LA168_0==Of||LA168_0==ExclamationMark||LA168_0==LeftParenthesis||LA168_0==PlusSign||LA168_0==HyphenMinus||LA168_0==Solidus||LA168_0==LessThanSign||(LA168_0>=CommercialAt && LA168_0<=LeftSquareBracket)||LA168_0==LeftCurlyBracket||LA168_0==Tilde||LA168_0==RULE_DOUBLE||(LA168_0>=RULE_HEX_INT && LA168_0<=RULE_LEGACY_OCTAL_INT)||LA168_0==RULE_SCIENTIFIC_INT||LA168_0==RULE_IDENTIFIER||LA168_0==RULE_STRING||(LA168_0>=RULE_TEMPLATE_HEAD && LA168_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA168_0==RULE_INT) ) {
                                                alt168=1;
                                            }
                                            switch (alt168) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_expression_20_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_20_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_21_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_21_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }
                                            int alt169=2;
                                            int LA169_0 = input.LA(1);

                                            if ( ((LA169_0>=Intersection && LA169_0<=Implements)||(LA169_0>=Promisify && LA169_0<=Abstract)||(LA169_0>=External && LA169_0<=Function)||(LA169_0>=Private && LA169_0<=Delete)||LA169_0==Public||LA169_0==Static||(LA169_0>=Target && LA169_0<=Await)||LA169_0==Class||(LA169_0>=False && LA169_0<=Super)||LA169_0==Union||(LA169_0>=Yield && LA169_0<=This)||(LA169_0>=From && LA169_0<=Void)||(LA169_0>=Get && LA169_0<=Set)||LA169_0==PlusSignPlusSign||LA169_0==HyphenMinusHyphenMinus||LA169_0==SolidusEqualsSign||LA169_0==As||LA169_0==Of||LA169_0==ExclamationMark||LA169_0==LeftParenthesis||LA169_0==PlusSign||LA169_0==HyphenMinus||LA169_0==Solidus||LA169_0==LessThanSign||(LA169_0>=CommercialAt && LA169_0<=LeftSquareBracket)||LA169_0==LeftCurlyBracket||LA169_0==Tilde||LA169_0==RULE_DOUBLE||(LA169_0>=RULE_HEX_INT && LA169_0<=RULE_LEGACY_OCTAL_INT)||LA169_0==RULE_SCIENTIFIC_INT||LA169_0==RULE_IDENTIFIER||LA169_0==RULE_STRING||(LA169_0>=RULE_TEMPLATE_HEAD && LA169_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA169_0==RULE_INT) ) {
                                                alt169=1;
                                            }
                                            switch (alt169) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_expression_22_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_22_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_3_1_0_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_77);
                            lv_initExpr_23_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_23_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt176=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt176=1;
                                }
                                break;
                            case In:
                                {
                                alt176=2;
                                }
                                break;
                            case Of:
                                {
                                alt176=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 176, 0, input);

                                throw nvae;
                            }

                            switch (alt176) {
                                case 1 :
                                    {
                                    {
                                    otherlv_24=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_24, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      								
                                    }
                                    int alt172=2;
                                    int LA172_0 = input.LA(1);

                                    if ( ((LA172_0>=Intersection && LA172_0<=Implements)||(LA172_0>=Promisify && LA172_0<=Abstract)||(LA172_0>=External && LA172_0<=Function)||(LA172_0>=Private && LA172_0<=Delete)||LA172_0==Public||LA172_0==Static||(LA172_0>=Target && LA172_0<=Await)||LA172_0==Class||(LA172_0>=False && LA172_0<=Super)||LA172_0==Union||(LA172_0>=Yield && LA172_0<=This)||(LA172_0>=From && LA172_0<=Void)||(LA172_0>=Get && LA172_0<=Set)||LA172_0==PlusSignPlusSign||LA172_0==HyphenMinusHyphenMinus||LA172_0==SolidusEqualsSign||LA172_0==As||LA172_0==Of||LA172_0==ExclamationMark||LA172_0==LeftParenthesis||LA172_0==PlusSign||LA172_0==HyphenMinus||LA172_0==Solidus||LA172_0==LessThanSign||(LA172_0>=CommercialAt && LA172_0<=LeftSquareBracket)||LA172_0==LeftCurlyBracket||LA172_0==Tilde||LA172_0==RULE_DOUBLE||(LA172_0>=RULE_HEX_INT && LA172_0<=RULE_LEGACY_OCTAL_INT)||LA172_0==RULE_SCIENTIFIC_INT||LA172_0==RULE_IDENTIFIER||LA172_0==RULE_STRING||(LA172_0>=RULE_TEMPLATE_HEAD && LA172_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA172_0==RULE_INT) ) {
                                        alt172=1;
                                    }
                                    switch (alt172) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_76);
                                            lv_expression_25_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_25_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    otherlv_26=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_26, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      								
                                    }
                                    int alt173=2;
                                    int LA173_0 = input.LA(1);

                                    if ( ((LA173_0>=Intersection && LA173_0<=Implements)||(LA173_0>=Promisify && LA173_0<=Abstract)||(LA173_0>=External && LA173_0<=Function)||(LA173_0>=Private && LA173_0<=Delete)||LA173_0==Public||LA173_0==Static||(LA173_0>=Target && LA173_0<=Await)||LA173_0==Class||(LA173_0>=False && LA173_0<=Super)||LA173_0==Union||(LA173_0>=Yield && LA173_0<=This)||(LA173_0>=From && LA173_0<=Void)||(LA173_0>=Get && LA173_0<=Set)||LA173_0==PlusSignPlusSign||LA173_0==HyphenMinusHyphenMinus||LA173_0==SolidusEqualsSign||LA173_0==As||LA173_0==Of||LA173_0==ExclamationMark||LA173_0==LeftParenthesis||LA173_0==PlusSign||LA173_0==HyphenMinus||LA173_0==Solidus||LA173_0==LessThanSign||(LA173_0>=CommercialAt && LA173_0<=LeftSquareBracket)||LA173_0==LeftCurlyBracket||LA173_0==Tilde||LA173_0==RULE_DOUBLE||(LA173_0>=RULE_HEX_INT && LA173_0<=RULE_LEGACY_OCTAL_INT)||LA173_0==RULE_SCIENTIFIC_INT||LA173_0==RULE_IDENTIFIER||LA173_0==RULE_STRING||(LA173_0>=RULE_TEMPLATE_HEAD && LA173_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA173_0==RULE_INT) ) {
                                        alt173=1;
                                    }
                                    switch (alt173) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_updateExpr_27_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_27_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_28_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forIn_28_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                      										
                                    }

                                    }


                                    }
                                    int alt174=2;
                                    int LA174_0 = input.LA(1);

                                    if ( ((LA174_0>=Intersection && LA174_0<=Implements)||(LA174_0>=Promisify && LA174_0<=Abstract)||(LA174_0>=External && LA174_0<=Function)||(LA174_0>=Private && LA174_0<=Delete)||LA174_0==Public||LA174_0==Static||(LA174_0>=Target && LA174_0<=Await)||LA174_0==Class||(LA174_0>=False && LA174_0<=Super)||LA174_0==Union||(LA174_0>=Yield && LA174_0<=This)||(LA174_0>=From && LA174_0<=Void)||(LA174_0>=Get && LA174_0<=Set)||LA174_0==PlusSignPlusSign||LA174_0==HyphenMinusHyphenMinus||LA174_0==SolidusEqualsSign||LA174_0==As||LA174_0==Of||LA174_0==ExclamationMark||LA174_0==LeftParenthesis||LA174_0==PlusSign||LA174_0==HyphenMinus||LA174_0==Solidus||LA174_0==LessThanSign||(LA174_0>=CommercialAt && LA174_0<=LeftSquareBracket)||LA174_0==LeftCurlyBracket||LA174_0==Tilde||LA174_0==RULE_DOUBLE||(LA174_0>=RULE_HEX_INT && LA174_0<=RULE_LEGACY_OCTAL_INT)||LA174_0==RULE_SCIENTIFIC_INT||LA174_0==RULE_IDENTIFIER||LA174_0==RULE_STRING||(LA174_0>=RULE_TEMPLATE_HEAD && LA174_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA174_0==RULE_INT) ) {
                                        alt174=1;
                                    }
                                    switch (alt174) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_29_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_29_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_30_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forOf_30_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                      										
                                    }

                                    }


                                    }
                                    int alt175=2;
                                    int LA175_0 = input.LA(1);

                                    if ( ((LA175_0>=Intersection && LA175_0<=Implements)||(LA175_0>=Promisify && LA175_0<=Abstract)||(LA175_0>=External && LA175_0<=Function)||(LA175_0>=Private && LA175_0<=Delete)||LA175_0==Public||LA175_0==Static||(LA175_0>=Target && LA175_0<=Await)||LA175_0==Class||(LA175_0>=False && LA175_0<=Super)||LA175_0==Union||(LA175_0>=Yield && LA175_0<=This)||(LA175_0>=From && LA175_0<=Void)||(LA175_0>=Get && LA175_0<=Set)||LA175_0==PlusSignPlusSign||LA175_0==HyphenMinusHyphenMinus||LA175_0==SolidusEqualsSign||LA175_0==As||LA175_0==Of||LA175_0==ExclamationMark||LA175_0==LeftParenthesis||LA175_0==PlusSign||LA175_0==HyphenMinus||LA175_0==Solidus||LA175_0==LessThanSign||(LA175_0>=CommercialAt && LA175_0<=LeftSquareBracket)||LA175_0==LeftCurlyBracket||LA175_0==Tilde||LA175_0==RULE_DOUBLE||(LA175_0>=RULE_HEX_INT && LA175_0<=RULE_LEGACY_OCTAL_INT)||LA175_0==RULE_SCIENTIFIC_INT||LA175_0==RULE_IDENTIFIER||LA175_0==RULE_STRING||(LA175_0>=RULE_TEMPLATE_HEAD && LA175_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA175_0==RULE_INT) ) {
                                        alt175=1;
                                    }
                                    switch (alt175) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_31_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_31_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_32=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_32, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              						
                            }
                            int alt177=2;
                            int LA177_0 = input.LA(1);

                            if ( ((LA177_0>=Intersection && LA177_0<=Implements)||(LA177_0>=Promisify && LA177_0<=Abstract)||(LA177_0>=External && LA177_0<=Function)||(LA177_0>=Private && LA177_0<=Delete)||LA177_0==Public||LA177_0==Static||(LA177_0>=Target && LA177_0<=Await)||LA177_0==Class||(LA177_0>=False && LA177_0<=Super)||LA177_0==Union||(LA177_0>=Yield && LA177_0<=This)||(LA177_0>=From && LA177_0<=Void)||(LA177_0>=Get && LA177_0<=Set)||LA177_0==PlusSignPlusSign||LA177_0==HyphenMinusHyphenMinus||LA177_0==SolidusEqualsSign||LA177_0==As||LA177_0==Of||LA177_0==ExclamationMark||LA177_0==LeftParenthesis||LA177_0==PlusSign||LA177_0==HyphenMinus||LA177_0==Solidus||LA177_0==LessThanSign||(LA177_0>=CommercialAt && LA177_0<=LeftSquareBracket)||LA177_0==LeftCurlyBracket||LA177_0==Tilde||LA177_0==RULE_DOUBLE||(LA177_0>=RULE_HEX_INT && LA177_0<=RULE_LEGACY_OCTAL_INT)||LA177_0==RULE_SCIENTIFIC_INT||LA177_0==RULE_IDENTIFIER||LA177_0==RULE_STRING||(LA177_0>=RULE_TEMPLATE_HEAD && LA177_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA177_0==RULE_INT) ) {
                                alt177=1;
                            }
                            switch (alt177) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_2_1_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_76);
                                    lv_expression_33_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_33_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }

                            otherlv_34=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_34, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              						
                            }
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( ((LA178_0>=Intersection && LA178_0<=Implements)||(LA178_0>=Promisify && LA178_0<=Abstract)||(LA178_0>=External && LA178_0<=Function)||(LA178_0>=Private && LA178_0<=Delete)||LA178_0==Public||LA178_0==Static||(LA178_0>=Target && LA178_0<=Await)||LA178_0==Class||(LA178_0>=False && LA178_0<=Super)||LA178_0==Union||(LA178_0>=Yield && LA178_0<=This)||(LA178_0>=From && LA178_0<=Void)||(LA178_0>=Get && LA178_0<=Set)||LA178_0==PlusSignPlusSign||LA178_0==HyphenMinusHyphenMinus||LA178_0==SolidusEqualsSign||LA178_0==As||LA178_0==Of||LA178_0==ExclamationMark||LA178_0==LeftParenthesis||LA178_0==PlusSign||LA178_0==HyphenMinus||LA178_0==Solidus||LA178_0==LessThanSign||(LA178_0>=CommercialAt && LA178_0<=LeftSquareBracket)||LA178_0==LeftCurlyBracket||LA178_0==Tilde||LA178_0==RULE_DOUBLE||(LA178_0>=RULE_HEX_INT && LA178_0<=RULE_LEGACY_OCTAL_INT)||LA178_0==RULE_SCIENTIFIC_INT||LA178_0==RULE_IDENTIFIER||LA178_0==RULE_STRING||(LA178_0>=RULE_TEMPLATE_HEAD && LA178_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA178_0==RULE_INT) ) {
                                alt178=1;
                            }
                            switch (alt178) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_2_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_65);
                                    lv_updateExpr_35_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_35_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    otherlv_36=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_36, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_37_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_37_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ForStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_forIn_4_0=null;
        Token otherlv_6=null;
        Token lv_forIn_9_0=null;
        Token lv_forOf_10_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token lv_forIn_19_0=null;
        Token lv_forOf_21_0=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token lv_forIn_28_0=null;
        Token lv_forOf_30_0=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_36=null;
        EObject lv_initExpr_3_0 = null;

        EObject lv_expression_5_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_expression_11_0 = null;

        EObject lv_varDeclsOrBindings_12_0 = null;

        EObject lv_varDeclsOrBindings_14_0 = null;

        EObject lv_expression_16_0 = null;

        EObject lv_updateExpr_18_0 = null;

        EObject lv_expression_20_0 = null;

        EObject lv_expression_22_0 = null;

        EObject lv_initExpr_23_0 = null;

        EObject lv_expression_25_0 = null;

        EObject lv_updateExpr_27_0 = null;

        EObject lv_expression_29_0 = null;

        EObject lv_expression_31_0 = null;

        EObject lv_expression_33_0 = null;

        EObject lv_updateExpr_35_0 = null;

        EObject lv_statement_37_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              		
            }
            int alt198=2;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_3_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_70);
                    lv_initExpr_3_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_3_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    {
                    lv_forIn_4_0=(Token)match(input,In,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_forIn_4_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                      							
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_65);
                    lv_expression_5_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_5_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt197=3;
                    alt197 = dfa197.predict(input);
                    switch (alt197) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_3_1_0_0_0_0());
                              								
                            }
                            pushFollow(FOLLOW_28);
                            lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_7_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt189=2;
                            alt189 = dfa189.predict(input);
                            switch (alt189) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0());
                                      											
                                    }
                                    pushFollow(FOLLOW_71);
                                    lv_varDeclsOrBindings_8_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_8_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                      											
                                    }

                                    }


                                    }
                                    int alt181=2;
                                    int LA181_0 = input.LA(1);

                                    if ( (LA181_0==In) ) {
                                        alt181=1;
                                    }
                                    else if ( (LA181_0==Of) ) {
                                        alt181=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 181, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt181) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_9_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_9_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_10_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_10_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt182=2;
                                    alt182 = dfa182.predict(input);
                                    switch (alt182) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0());
                                              											
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_11_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_11_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                              											
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_73);
                                    lv_varDeclsOrBindings_12_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_12_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }
                                    int alt188=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt188=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt188=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt188=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 188, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt188) {
                                        case 1 :
                                            {
                                            {
                                            loop183:
                                            do {
                                                int alt183=2;
                                                int LA183_0 = input.LA(1);

                                                if ( (LA183_0==Comma) ) {
                                                    alt183=1;
                                                }


                                                switch (alt183) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_13=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      												newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      											
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {

                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0());
                                            	      													
                                            	    }
                                            	    pushFollow(FOLLOW_74);
                                            	    lv_varDeclsOrBindings_14_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_14_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	      													
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop183;
                                                }
                                            } while (true);

                                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_15, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              										
                                            }
                                            int alt184=2;
                                            int LA184_0 = input.LA(1);

                                            if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||(LA184_0>=External && LA184_0<=Function)||(LA184_0>=Private && LA184_0<=Delete)||LA184_0==Public||LA184_0==Static||(LA184_0>=Target && LA184_0<=Await)||LA184_0==Class||(LA184_0>=False && LA184_0<=Super)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||(LA184_0>=From && LA184_0<=Void)||(LA184_0>=Get && LA184_0<=Set)||LA184_0==PlusSignPlusSign||LA184_0==HyphenMinusHyphenMinus||LA184_0==SolidusEqualsSign||LA184_0==As||LA184_0==Of||LA184_0==ExclamationMark||LA184_0==LeftParenthesis||LA184_0==PlusSign||LA184_0==HyphenMinus||LA184_0==Solidus||LA184_0==LessThanSign||(LA184_0>=CommercialAt && LA184_0<=LeftSquareBracket)||LA184_0==LeftCurlyBracket||LA184_0==Tilde||LA184_0==RULE_DOUBLE||(LA184_0>=RULE_HEX_INT && LA184_0<=RULE_LEGACY_OCTAL_INT)||LA184_0==RULE_SCIENTIFIC_INT||LA184_0==RULE_IDENTIFIER||LA184_0==RULE_STRING||(LA184_0>=RULE_TEMPLATE_HEAD && LA184_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA184_0==RULE_INT) ) {
                                                alt184=1;
                                            }
                                            switch (alt184) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_76);
                                                    lv_expression_16_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_16_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            otherlv_17=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              										
                                            }
                                            int alt185=2;
                                            int LA185_0 = input.LA(1);

                                            if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||(LA185_0>=External && LA185_0<=Function)||(LA185_0>=Private && LA185_0<=Delete)||LA185_0==Public||LA185_0==Static||(LA185_0>=Target && LA185_0<=Await)||LA185_0==Class||(LA185_0>=False && LA185_0<=Super)||LA185_0==Union||(LA185_0>=Yield && LA185_0<=This)||(LA185_0>=From && LA185_0<=Void)||(LA185_0>=Get && LA185_0<=Set)||LA185_0==PlusSignPlusSign||LA185_0==HyphenMinusHyphenMinus||LA185_0==SolidusEqualsSign||LA185_0==As||LA185_0==Of||LA185_0==ExclamationMark||LA185_0==LeftParenthesis||LA185_0==PlusSign||LA185_0==HyphenMinus||LA185_0==Solidus||LA185_0==LessThanSign||(LA185_0>=CommercialAt && LA185_0<=LeftSquareBracket)||LA185_0==LeftCurlyBracket||LA185_0==Tilde||LA185_0==RULE_DOUBLE||(LA185_0>=RULE_HEX_INT && LA185_0<=RULE_LEGACY_OCTAL_INT)||LA185_0==RULE_SCIENTIFIC_INT||LA185_0==RULE_IDENTIFIER||LA185_0==RULE_STRING||(LA185_0>=RULE_TEMPLATE_HEAD && LA185_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA185_0==RULE_INT) ) {
                                                alt185=1;
                                            }
                                            switch (alt185) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_updateExpr_18_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_18_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_19_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_19_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }
                                            int alt186=2;
                                            int LA186_0 = input.LA(1);

                                            if ( ((LA186_0>=Intersection && LA186_0<=Implements)||(LA186_0>=Promisify && LA186_0<=Abstract)||(LA186_0>=External && LA186_0<=Function)||(LA186_0>=Private && LA186_0<=Delete)||LA186_0==Public||LA186_0==Static||(LA186_0>=Target && LA186_0<=Await)||LA186_0==Class||(LA186_0>=False && LA186_0<=Super)||LA186_0==Union||(LA186_0>=Yield && LA186_0<=This)||(LA186_0>=From && LA186_0<=Void)||(LA186_0>=Get && LA186_0<=Set)||LA186_0==PlusSignPlusSign||LA186_0==HyphenMinusHyphenMinus||LA186_0==SolidusEqualsSign||LA186_0==As||LA186_0==Of||LA186_0==ExclamationMark||LA186_0==LeftParenthesis||LA186_0==PlusSign||LA186_0==HyphenMinus||LA186_0==Solidus||LA186_0==LessThanSign||(LA186_0>=CommercialAt && LA186_0<=LeftSquareBracket)||LA186_0==LeftCurlyBracket||LA186_0==Tilde||LA186_0==RULE_DOUBLE||(LA186_0>=RULE_HEX_INT && LA186_0<=RULE_LEGACY_OCTAL_INT)||LA186_0==RULE_SCIENTIFIC_INT||LA186_0==RULE_IDENTIFIER||LA186_0==RULE_STRING||(LA186_0>=RULE_TEMPLATE_HEAD && LA186_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA186_0==RULE_INT) ) {
                                                alt186=1;
                                            }
                                            switch (alt186) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_expression_20_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_20_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_21_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_21_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }
                                            int alt187=2;
                                            int LA187_0 = input.LA(1);

                                            if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Abstract)||(LA187_0>=External && LA187_0<=Function)||(LA187_0>=Private && LA187_0<=Delete)||LA187_0==Public||LA187_0==Static||(LA187_0>=Target && LA187_0<=Await)||LA187_0==Class||(LA187_0>=False && LA187_0<=Super)||LA187_0==Union||(LA187_0>=Yield && LA187_0<=This)||(LA187_0>=From && LA187_0<=Void)||(LA187_0>=Get && LA187_0<=Set)||LA187_0==PlusSignPlusSign||LA187_0==HyphenMinusHyphenMinus||LA187_0==SolidusEqualsSign||LA187_0==As||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {
                                                alt187=1;
                                            }
                                            switch (alt187) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_65);
                                                    lv_expression_22_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_22_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_3_1_0_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_77);
                            lv_initExpr_23_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_23_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt194=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt194=1;
                                }
                                break;
                            case In:
                                {
                                alt194=2;
                                }
                                break;
                            case Of:
                                {
                                alt194=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 194, 0, input);

                                throw nvae;
                            }

                            switch (alt194) {
                                case 1 :
                                    {
                                    {
                                    otherlv_24=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_24, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      								
                                    }
                                    int alt190=2;
                                    int LA190_0 = input.LA(1);

                                    if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||LA190_0==Public||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||LA190_0==HyphenMinusHyphenMinus||LA190_0==SolidusEqualsSign||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                        alt190=1;
                                    }
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_76);
                                            lv_expression_25_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_25_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    otherlv_26=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_26, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      								
                                    }
                                    int alt191=2;
                                    int LA191_0 = input.LA(1);

                                    if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||LA191_0==Public||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||LA191_0==HyphenMinusHyphenMinus||LA191_0==SolidusEqualsSign||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {
                                        alt191=1;
                                    }
                                    switch (alt191) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_updateExpr_27_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_27_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_28_0=(Token)match(input,In,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forIn_28_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                      										
                                    }

                                    }


                                    }
                                    int alt192=2;
                                    int LA192_0 = input.LA(1);

                                    if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||LA192_0==Public||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||LA192_0==HyphenMinusHyphenMinus||LA192_0==SolidusEqualsSign||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                        alt192=1;
                                    }
                                    switch (alt192) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_29_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_29_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_30_0=(Token)match(input,Of,FOLLOW_72); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forOf_30_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                      										
                                    }

                                    }


                                    }
                                    int alt193=2;
                                    int LA193_0 = input.LA(1);

                                    if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||LA193_0==Public||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||LA193_0==HyphenMinusHyphenMinus||LA193_0==SolidusEqualsSign||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                        alt193=1;
                                    }
                                    switch (alt193) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_65);
                                            lv_expression_31_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_31_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_32=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_32, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              						
                            }
                            int alt195=2;
                            int LA195_0 = input.LA(1);

                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                alt195=1;
                            }
                            switch (alt195) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_2_1_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_76);
                                    lv_expression_33_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_33_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }

                            otherlv_34=(Token)match(input,Semicolon,FOLLOW_72); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_34, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              						
                            }
                            int alt196=2;
                            int LA196_0 = input.LA(1);

                            if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||LA196_0==Public||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||LA196_0==HyphenMinusHyphenMinus||LA196_0==SolidusEqualsSign||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                alt196=1;
                            }
                            switch (alt196) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_2_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_65);
                                    lv_updateExpr_35_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_35_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    otherlv_36=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_36, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_37_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_37_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLetIdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLetIdentifierRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetIdentifierRef=ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLetIdentifierRef() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getLetIdentifierRefRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLetAsIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLetAsIdentifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetAsIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetAsIdentifier=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetAsIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLetAsIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingIdentifierAsVariableDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsVariableDeclaration=ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleContinueStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContinueStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContinueStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContinueStatement=ruleContinueStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContinueStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleContinueStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Continue,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              		
            }
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||LA199_0==External||(LA199_0>=Private && LA199_0<=Project)||LA199_0==Public||LA199_0==Static||LA199_0==Target||(LA199_0>=Async && LA199_0<=Await)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||LA199_0==From||LA199_0==Type||(LA199_0>=Get && LA199_0<=Let)||(LA199_0>=Out && LA199_0<=Set)||LA199_0==As||LA199_0==Of||LA199_0==RULE_IDENTIFIER) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ContinueStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Continue,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              		
            }
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||LA200_0==External||(LA200_0>=Private && LA200_0<=Project)||LA200_0==Public||LA200_0==Static||LA200_0==Target||(LA200_0>=Async && LA200_0<=Await)||LA200_0==Union||LA200_0==This||LA200_0==From||LA200_0==Type||(LA200_0>=Get && LA200_0<=Let)||(LA200_0>=Out && LA200_0<=Set)||LA200_0==As||LA200_0==Of||LA200_0==RULE_IDENTIFIER) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBreakStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBreakStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBreakStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBreakStatement=ruleBreakStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBreakStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBreakStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Break,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              		
            }
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||LA201_0==External||(LA201_0>=Private && LA201_0<=Project)||LA201_0==Public||LA201_0==Static||LA201_0==Target||(LA201_0>=Async && LA201_0<=Await)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||LA201_0==From||LA201_0==Type||(LA201_0>=Get && LA201_0<=Let)||(LA201_0>=Out && LA201_0<=Set)||LA201_0==As||LA201_0==Of||LA201_0==RULE_IDENTIFIER) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BreakStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Break,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              		
            }
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||LA202_0==External||(LA202_0>=Private && LA202_0<=Project)||LA202_0==Public||LA202_0==Static||LA202_0==Target||(LA202_0>=Async && LA202_0<=Await)||LA202_0==Union||LA202_0==This||LA202_0==From||LA202_0==Type||(LA202_0>=Get && LA202_0<=Let)||(LA202_0>=Out && LA202_0<=Set)||LA202_0==As||LA202_0==Of||LA202_0==RULE_IDENTIFIER) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Return,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              		
            }
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ReturnStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Return,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              		
            }
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWithStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithStatement=ruleWithStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWithStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WithStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSwitchStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSwitchStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSwitchStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSwitchStatement=ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSwitchStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSwitchStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;

        EObject lv_cases_5_0 = null;

        EObject lv_cases_6_0 = null;

        EObject lv_cases_7_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==Case) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_80);
            	    lv_cases_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==Default) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                      					
                    }
                    pushFollow(FOLLOW_81);
                    lv_cases_6_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);

                        if ( (LA206_0==Case) ) {
                            alt206=1;
                        }


                        switch (alt206) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_81);
                    	    lv_cases_7_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop206;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SwitchStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;

        EObject lv_cases_5_0 = null;

        EObject lv_cases_6_0 = null;

        EObject lv_cases_7_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==Case) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_80);
            	    lv_cases_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==Default) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                      					
                    }
                    pushFollow(FOLLOW_81);
                    lv_cases_6_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop209:
                    do {
                        int alt209=2;
                        int LA209_0 = input.LA(1);

                        if ( (LA209_0==Case) ) {
                            alt209=1;
                        }


                        switch (alt209) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_81);
                    	    lv_cases_7_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop209;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCaseClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseClause = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseClause=ruleCaseClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCaseClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_82);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              		
            }
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Public && LA211_0<=Break)||(LA211_0>=Class && LA211_0<=This)||(LA211_0>=From && LA211_0<=With)||(LA211_0>=For && LA211_0<=Var)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||(LA211_0>=As && LA211_0<=If)||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||(LA211_0>=Semicolon && LA211_0<=LessThanSign)||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CaseClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_82);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              		
            }
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||(LA212_0>=Public && LA212_0<=Break)||(LA212_0>=Class && LA212_0<=This)||(LA212_0>=From && LA212_0<=With)||(LA212_0>=For && LA212_0<=Var)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||(LA212_0>=As && LA212_0<=If)||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||(LA212_0>=Semicolon && LA212_0<=LessThanSign)||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaultClause = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultClause=ruleDefaultClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Default,FOLLOW_82); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              		
            }
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||(LA213_0>=Public && LA213_0<=Break)||(LA213_0>=Class && LA213_0<=This)||(LA213_0>=From && LA213_0<=With)||(LA213_0>=For && LA213_0<=Var)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||(LA213_0>=As && LA213_0<=If)||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||(LA213_0>=Semicolon && LA213_0<=LessThanSign)||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DefaultClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Default,FOLLOW_82); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              		
            }
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||(LA214_0>=Public && LA214_0<=Break)||(LA214_0>=Class && LA214_0<=This)||(LA214_0>=From && LA214_0<=With)||(LA214_0>=For && LA214_0<=Var)||LA214_0==PlusSignPlusSign||LA214_0==HyphenMinusHyphenMinus||LA214_0==SolidusEqualsSign||(LA214_0>=As && LA214_0<=If)||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||(LA214_0>=Semicolon && LA214_0<=LessThanSign)||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                    alt214=1;
                }


                switch (alt214) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_statements_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLabelledStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLabelledStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelledStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelledStatement=ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelledStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLabelledStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_82);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LabelledStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_82);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThrowStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThrowStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThrowStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThrowStatement=ruleThrowStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThrowStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThrowStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ThrowStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTryStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTryStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTryStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTryStatement=ruleTryStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTryStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTryStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_block_1_0 = null;

        EObject lv_catch_2_0 = null;

        EObject lv_finally_3_0 = null;

        EObject lv_finally_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_83);
            lv_block_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==Catch) ) {
                alt216=1;
            }
            else if ( (LA216_0==Finally) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_84);
                    lv_catch_2_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==Finally) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TryStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_block_1_0 = null;

        EObject lv_catch_2_0 = null;

        EObject lv_finally_3_0 = null;

        EObject lv_finally_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_83);
            lv_block_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==Catch) ) {
                alt218=1;
            }
            else if ( (LA218_0==Finally) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_84);
                    lv_catch_2_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==Finally) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCatchBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchBlock=ruleCatchBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;

        EObject lv_block_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_catchVariable_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;

        EObject lv_block_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_catchVariable_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCatchVariable = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchVariable=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchVariable() throws RecognitionException {
        EObject current = null;

        EObject lv_bindingPattern_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;



        	enterRule();

        try {
            {
            int alt220=3;
            alt220 = dfa220.predict(input);
            switch (alt220) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_82);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt219=2;
                    alt219 = dfa219.predict(input);
                    switch (alt219) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                              				
                            }
                            pushFollow(FOLLOW_9);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchVariable() throws RecognitionException {
        EObject current = null;

        EObject lv_bindingPattern_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;



        	enterRule();

        try {
            {
            int alt222=3;
            alt222 = dfa222.predict(input);
            switch (alt222) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_82);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt221=2;
                    alt221 = dfa221.predict(input);
                    switch (alt221) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                              				
                            }
                            pushFollow(FOLLOW_9);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFinallyBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFinallyBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFinallyBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFinallyBlock=ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFinallyBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFinallyBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_block_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FinallyBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_block_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDebuggerStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDebuggerStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDebuggerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDebuggerStatement=ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDebuggerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDebuggerStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDebuggerStatementAccess().getDebuggerStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Debugger,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;

        EObject this_SuperLiteral_1 = null;

        EObject this_IdentifierRef_2 = null;

        EObject this_ParameterizedCallExpression_3 = null;

        EObject this_Literal_4 = null;

        EObject this_ArrayLiteral_5 = null;

        EObject this_ObjectLiteral_6 = null;

        EObject this_ParenExpression_7 = null;

        EObject this_AnnotatedExpression_8 = null;

        EObject this_FunctionExpression_9 = null;

        EObject this_AsyncFunctionExpression_10 = null;

        EObject this_N4ClassExpression_11 = null;

        EObject this_TemplateLiteral_12 = null;



        enterRule();
        try { 
        	{
            int alt223=13;
            // REPLACEMENT rulePrimaryExpression.java.replacement START
            try {
                alt223 = dfa223.predict(input);
            } catch (NoViableAltException re) {
            	int as = input.LA(1);
            	if (as==Async) { alt223=3; }
            	else throw re;
            }
            // REPLACEMENT rulePrimaryExpression.java.replacement END
            switch (alt223) {
                case 1 : 
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_3=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedCallExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_5=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_6=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_7=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenExpression_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_8=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedExpression_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionExpression_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AsyncFunctionExpression_10;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_11=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4ClassExpression_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_12=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TemplateLiteral_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ThisLiteral_0 = null;

        EObject this_SuperLiteral_1 = null;

        EObject this_IdentifierRef_2 = null;

        EObject this_ParameterizedCallExpression_3 = null;

        EObject this_Literal_4 = null;

        EObject this_ArrayLiteral_5 = null;

        EObject this_ObjectLiteral_6 = null;

        EObject this_ParenExpression_7 = null;

        EObject this_AnnotatedExpression_8 = null;

        EObject this_FunctionExpression_9 = null;

        EObject this_AsyncFunctionExpression_10 = null;

        EObject this_N4ClassExpression_11 = null;

        EObject this_TemplateLiteral_12 = null;



        	enterRule();

        try {
            {
            int alt224=13;
            alt224 = dfa224.predict(input);
            switch (alt224) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_3=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedCallExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_5=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_6=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_7=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenExpression_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_8=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedExpression_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionExpression_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AsyncFunctionExpression_10;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_11=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4ClassExpression_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_12=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TemplateLiteral_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParenExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenExpression=ruleParenExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParenExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParenExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifierRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierRef=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIdentifierRef() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IdentifierRef() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSuperLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSuperLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuperLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuperLiteral=ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuperLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSuperLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayLiteral=ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==Comma) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_elements_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||(LA230_0>=External && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||LA230_0==Public||LA230_0==Static||(LA230_0>=Target && LA230_0<=Await)||LA230_0==Class||(LA230_0>=False && LA230_0<=Super)||LA230_0==Union||(LA230_0>=Yield && LA230_0<=This)||(LA230_0>=From && LA230_0<=Void)||LA230_0==FullStopFullStopFullStop||(LA230_0>=Get && LA230_0<=Set)||LA230_0==PlusSignPlusSign||LA230_0==HyphenMinusHyphenMinus||LA230_0==SolidusEqualsSign||LA230_0==As||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||LA230_0==LessThanSign||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_87);
                    lv_elements_3_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop227:
                    do {
                        int alt227=2;
                        alt227 = dfa227.predict(input);
                        switch (alt227) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop226:
                    	    do {
                    	        int alt226=2;
                    	        int LA226_0 = input.LA(1);

                    	        if ( (LA226_0==Comma) ) {
                    	            alt226=1;
                    	        }


                    	        switch (alt226) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_88);
                    	    	    lv_elements_5_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop226;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_elements_6_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==Comma) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                              						
                            }

                            }


                            }
                            loop228:
                            do {
                                int alt228=2;
                                int LA228_0 = input.LA(1);

                                if ( (LA228_0==Comma) ) {
                                    alt228=1;
                                }


                                switch (alt228) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_87);
                            	    lv_elements_8_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop228;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==Comma) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_elements_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( ((LA236_0>=Intersection && LA236_0<=Implements)||(LA236_0>=Promisify && LA236_0<=Abstract)||(LA236_0>=External && LA236_0<=Function)||(LA236_0>=Private && LA236_0<=Delete)||LA236_0==Public||LA236_0==Static||(LA236_0>=Target && LA236_0<=Await)||LA236_0==Class||(LA236_0>=False && LA236_0<=Super)||LA236_0==Union||(LA236_0>=Yield && LA236_0<=This)||(LA236_0>=From && LA236_0<=Void)||LA236_0==FullStopFullStopFullStop||(LA236_0>=Get && LA236_0<=Set)||LA236_0==PlusSignPlusSign||LA236_0==HyphenMinusHyphenMinus||LA236_0==SolidusEqualsSign||LA236_0==As||LA236_0==Of||LA236_0==ExclamationMark||LA236_0==LeftParenthesis||LA236_0==PlusSign||LA236_0==HyphenMinus||LA236_0==Solidus||LA236_0==LessThanSign||(LA236_0>=CommercialAt && LA236_0<=LeftSquareBracket)||LA236_0==LeftCurlyBracket||LA236_0==Tilde||LA236_0==RULE_DOUBLE||(LA236_0>=RULE_HEX_INT && LA236_0<=RULE_LEGACY_OCTAL_INT)||LA236_0==RULE_SCIENTIFIC_INT||LA236_0==RULE_IDENTIFIER||LA236_0==RULE_STRING||(LA236_0>=RULE_TEMPLATE_HEAD && LA236_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA236_0==RULE_INT) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_87);
                    lv_elements_3_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop233:
                    do {
                        int alt233=2;
                        alt233 = dfa233.predict(input);
                        switch (alt233) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop232:
                    	    do {
                    	        int alt232=2;
                    	        int LA232_0 = input.LA(1);

                    	        if ( (LA232_0==Comma) ) {
                    	            alt232=1;
                    	        }


                    	        switch (alt232) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_88);
                    	    	    lv_elements_5_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop232;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_elements_6_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop233;
                        }
                    } while (true);
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==Comma) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                              						
                            }

                            }


                            }
                            loop234:
                            do {
                                int alt234=2;
                                int LA234_0 = input.LA(1);

                                if ( (LA234_0==Comma) ) {
                                    alt234=1;
                                }


                                switch (alt234) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_87);
                            	    lv_elements_8_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop234;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayPadding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayPadding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayPaddingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayPadding=ruleArrayPadding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayPadding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayPadding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayPaddingAccess().getArrayPaddingAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayElement=ruleArrayElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayElement() throws RecognitionException {
        EObject current = null;

        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
              			
            }

            }
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==FullStopFullStopFullStop) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayElement() throws RecognitionException {
        EObject current = null;

        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
              			
            }

            }
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==FullStopFullStopFullStop) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectLiteral=ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;

        EObject lv_propertyAssignments_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( ((LA241_0>=Intersection && LA241_0<=With)||(LA241_0>=For && LA241_0<=Var)||(LA241_0>=As && LA241_0<=Of)||LA241_0==LeftParenthesis||LA241_0==Asterisk||LA241_0==LessThanSign||(LA241_0>=CommercialAt && LA241_0<=LeftSquareBracket)||LA241_0==LeftCurlyBracket||LA241_0==Tilde||LA241_0==RULE_DOUBLE||LA241_0==RULE_HEX_INT||LA241_0==RULE_OCTAL_INT||LA241_0==RULE_SCIENTIFIC_INT||LA241_0==RULE_IDENTIFIER||LA241_0==RULE_STRING||LA241_0==RULE_INT) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop239:
                    do {
                        int alt239=2;
                        int LA239_0 = input.LA(1);

                        if ( (LA239_0==Comma) ) {
                            int LA239_1 = input.LA(2);

                            if ( ((LA239_1>=Intersection && LA239_1<=With)||(LA239_1>=For && LA239_1<=Var)||(LA239_1>=As && LA239_1<=Of)||LA239_1==LeftParenthesis||LA239_1==Asterisk||LA239_1==LessThanSign||(LA239_1>=CommercialAt && LA239_1<=LeftSquareBracket)||LA239_1==LeftCurlyBracket||LA239_1==Tilde||LA239_1==RULE_DOUBLE||LA239_1==RULE_HEX_INT||LA239_1==RULE_OCTAL_INT||LA239_1==RULE_SCIENTIFIC_INT||LA239_1==RULE_IDENTIFIER||LA239_1==RULE_STRING||LA239_1==RULE_INT) ) {
                                alt239=1;
                            }


                        }


                        switch (alt239) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop239;
                        }
                    } while (true);
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==Comma) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;

        EObject lv_propertyAssignments_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( ((LA244_0>=Intersection && LA244_0<=With)||(LA244_0>=For && LA244_0<=Var)||(LA244_0>=As && LA244_0<=Of)||LA244_0==LeftParenthesis||LA244_0==Asterisk||LA244_0==LessThanSign||(LA244_0>=CommercialAt && LA244_0<=LeftSquareBracket)||LA244_0==LeftCurlyBracket||LA244_0==Tilde||LA244_0==RULE_DOUBLE||LA244_0==RULE_HEX_INT||LA244_0==RULE_OCTAL_INT||LA244_0==RULE_SCIENTIFIC_INT||LA244_0==RULE_IDENTIFIER||LA244_0==RULE_STRING||LA244_0==RULE_INT) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop242:
                    do {
                        int alt242=2;
                        int LA242_0 = input.LA(1);

                        if ( (LA242_0==Comma) ) {
                            int LA242_1 = input.LA(2);

                            if ( ((LA242_1>=Intersection && LA242_1<=With)||(LA242_1>=For && LA242_1<=Var)||(LA242_1>=As && LA242_1<=Of)||LA242_1==LeftParenthesis||LA242_1==Asterisk||LA242_1==LessThanSign||(LA242_1>=CommercialAt && LA242_1<=LeftSquareBracket)||LA242_1==LeftCurlyBracket||LA242_1==Tilde||LA242_1==RULE_DOUBLE||LA242_1==RULE_HEX_INT||LA242_1==RULE_OCTAL_INT||LA242_1==RULE_SCIENTIFIC_INT||LA242_1==RULE_IDENTIFIER||LA242_1==RULE_STRING||LA242_1==RULE_INT) ) {
                                alt242=1;
                            }


                        }


                        switch (alt242) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop242;
                        }
                    } while (true);
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==Comma) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyAssignment = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignment=rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedPropertyAssignment_0 = null;

        EObject this_PropertyNameValuePair_1 = null;

        EObject this_PropertyGetterDeclaration_2 = null;

        EObject this_PropertySetterDeclaration_3 = null;

        EObject this_PropertyMethodDeclaration_4 = null;

        EObject this_PropertyNameValuePairSingleName_5 = null;



        	enterRule();

        try {
            {
            int alt245=6;
            alt245 = dfa245.predict(input);
            switch (alt245) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedPropertyAssignment_0 = null;

        EObject this_PropertyNameValuePair_1 = null;

        EObject this_PropertyGetterDeclaration_2 = null;

        EObject this_PropertySetterDeclaration_3 = null;

        EObject this_PropertyMethodDeclaration_4 = null;

        EObject this_PropertyNameValuePairSingleName_5 = null;



        	enterRule();

        try {
            {
            int alt246=6;
            alt246 = dfa246.predict(input);
            switch (alt246) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedPropertyAssignment = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedPropertyAssignment=ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedPropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;

        EObject lv_declaredTypeRef_2_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject this_GetterHeader_7 = null;

        EObject lv_body_8_0 = null;

        EObject lv_declaredName_11_0 = null;

        EObject lv_fpar_14_0 = null;

        EObject lv_body_16_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject lv_returnTypeRef_19_0 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsAndBody_22 = null;

        EObject lv_declaredName_23_0 = null;

        EObject this_MethodParamsAndBody_24 = null;

        EObject lv_declaredTypeRef_27_0 = null;

        EObject lv_identifierRef_28_0 = null;

        EObject lv_expression_30_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_91);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt255=5;
            alt255 = dfa255.predict(input);
            switch (alt255) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt247=2;
                    alt247 = dfa247.predict(input);
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_92);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_82);
                    lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=ruleGetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }

                    otherlv_10=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_93);
                    lv_declaredName_11_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==QuestionMark) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                      						
                    }
                    pushFollow(FOLLOW_65);
                    lv_fpar_14_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==LessThanSign) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt250=2;
                    alt250 = dfa250.predict(input);
                    switch (alt250) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                              								
                            }
                            pushFollow(FOLLOW_94);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==Asterisk) ) {
                        alt251=1;
                    }
                    else if ( ((LA251_0>=Intersection && LA251_0<=With)||(LA251_0>=For && LA251_0<=Var)||(LA251_0>=As && LA251_0<=Of)||LA251_0==LeftSquareBracket||LA251_0==RULE_DOUBLE||LA251_0==RULE_HEX_INT||LA251_0==RULE_OCTAL_INT||LA251_0==RULE_SCIENTIFIC_INT||LA251_0==RULE_IDENTIFIER||LA251_0==RULE_STRING||LA251_0==RULE_INT) ) {
                        alt251=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 0, input);

                        throw nvae;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_40);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                              										
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==Semicolon) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    int alt253=2;
                    alt253 = dfa253.predict(input);
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_9);
                            lv_declaredTypeRef_27_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefIdentifierRefParserRuleCall_1_4_2_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_identifierRef_28_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"identifierRef",
                      								lv_identifierRef_28_0,
                      								"org.eclipse.n4js.N4JS.IdentifierRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==EqualsSign) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              					
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_30_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								set(
                              									current,
                              									"expression",
                              									lv_expression_30_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;

        EObject lv_declaredTypeRef_2_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject this_GetterHeader_7 = null;

        EObject lv_body_8_0 = null;

        EObject lv_declaredName_11_0 = null;

        EObject lv_fpar_14_0 = null;

        EObject lv_body_16_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject lv_returnTypeRef_19_0 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsAndBody_22 = null;

        EObject lv_declaredName_23_0 = null;

        EObject this_MethodParamsAndBody_24 = null;

        EObject lv_declaredTypeRef_27_0 = null;

        EObject lv_identifierRef_28_0 = null;

        EObject lv_expression_30_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_91);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt264=5;
            alt264 = dfa264.predict(input);
            switch (alt264) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt256=2;
                    alt256 = dfa256.predict(input);
                    switch (alt256) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_92);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_82);
                    lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=norm1_GetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }

                    otherlv_10=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_93);
                    lv_declaredName_11_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==QuestionMark) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                      						
                    }
                    pushFollow(FOLLOW_65);
                    lv_fpar_14_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==LessThanSign) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt259=2;
                    alt259 = dfa259.predict(input);
                    switch (alt259) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                              								
                            }
                            pushFollow(FOLLOW_94);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==Asterisk) ) {
                        alt260=1;
                    }
                    else if ( ((LA260_0>=Intersection && LA260_0<=With)||(LA260_0>=For && LA260_0<=Var)||(LA260_0>=As && LA260_0<=Of)||LA260_0==LeftSquareBracket||LA260_0==RULE_DOUBLE||LA260_0==RULE_HEX_INT||LA260_0==RULE_OCTAL_INT||LA260_0==RULE_SCIENTIFIC_INT||LA260_0==RULE_IDENTIFIER||LA260_0==RULE_STRING||LA260_0==RULE_INT) ) {
                        alt260=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 260, 0, input);

                        throw nvae;
                    }
                    switch (alt260) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_40);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                              										
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==Semicolon) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    int alt262=2;
                    alt262 = dfa262.predict(input);
                    switch (alt262) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_9);
                            lv_declaredTypeRef_27_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefIdentifierRefParserRuleCall_1_4_2_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_identifierRef_28_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"identifierRef",
                      								lv_identifierRef_28_0,
                      								"org.eclipse.n4js.N4JS.IdentifierRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==EqualsSign) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              					
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_30_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								set(
                              									current,
                              									"expression",
                              									lv_expression_30_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyMethodDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyMethodDeclaration=rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_3_0=null;
        Token otherlv_8=null;
        EObject this_TypeVariables_1 = null;

        EObject lv_returnTypeRef_2_0 = null;

        EObject lv_declaredName_4_0 = null;

        EObject this_MethodParamsAndBody_5 = null;

        EObject lv_declaredName_6_0 = null;

        EObject this_MethodParamsAndBody_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==LessThanSign) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt266=2;
            alt266 = dfa266.predict(input);
            switch (alt266) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_94);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==Asterisk) ) {
                alt267=1;
            }
            else if ( ((LA267_0>=Intersection && LA267_0<=With)||(LA267_0>=For && LA267_0<=Var)||(LA267_0>=As && LA267_0<=Of)||LA267_0==LeftSquareBracket||LA267_0==RULE_DOUBLE||LA267_0==RULE_HEX_INT||LA267_0==RULE_OCTAL_INT||LA267_0==RULE_SCIENTIFIC_INT||LA267_0==RULE_IDENTIFIER||LA267_0==RULE_STRING||LA267_0==RULE_INT) ) {
                alt267=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_3_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_3_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    lv_declaredName_4_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_4_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsAndBody_5=norm1_MethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_5;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_6_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_6_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsAndBody_7=ruleMethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_7;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==Semicolon) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_3_0=null;
        Token otherlv_8=null;
        EObject this_TypeVariables_1 = null;

        EObject lv_returnTypeRef_2_0 = null;

        EObject lv_declaredName_4_0 = null;

        EObject this_MethodParamsAndBody_5 = null;

        EObject lv_declaredName_6_0 = null;

        EObject this_MethodParamsAndBody_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==LessThanSign) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt270=2;
            alt270 = dfa270.predict(input);
            switch (alt270) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_94);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==Asterisk) ) {
                alt271=1;
            }
            else if ( ((LA271_0>=Intersection && LA271_0<=With)||(LA271_0>=For && LA271_0<=Var)||(LA271_0>=As && LA271_0<=Of)||LA271_0==LeftSquareBracket||LA271_0==RULE_DOUBLE||LA271_0==RULE_HEX_INT||LA271_0==RULE_OCTAL_INT||LA271_0==RULE_SCIENTIFIC_INT||LA271_0==RULE_IDENTIFIER||LA271_0==RULE_STRING||LA271_0==RULE_INT) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_3_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_3_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    lv_declaredName_4_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_4_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsAndBody_5=norm1_MethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_5;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_6_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_6_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsAndBody_7=ruleMethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_7;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==Semicolon) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyNameValuePair = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePair=rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePair; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject lv_expression_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
              					
            }

            }
            int alt273=2;
            alt273 = dfa273.predict(input);
            switch (alt273) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_92);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_96);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==QuestionMark) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_82); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                      						
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject lv_expression_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
              					
            }

            }
            int alt275=2;
            alt275 = dfa275.predict(input);
            switch (alt275) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_92);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_96);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==QuestionMark) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_82); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                      						
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyNameValuePairSingleName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleName=rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_declaredTypeRef_0_0 = null;

        EObject lv_identifierRef_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            int alt277=2;
            alt277 = dfa277.predict(input);
            switch (alt277) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_9);
                    lv_declaredTypeRef_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_identifierRef_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"identifierRef",
              						lv_identifierRef_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==EqualsSign) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignmentExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_declaredTypeRef_0_0 = null;

        EObject lv_identifierRef_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            int alt279=2;
            alt279 = dfa279.predict(input);
            switch (alt279) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_9);
                    lv_declaredTypeRef_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_identifierRef_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"identifierRef",
              						lv_identifierRef_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==EqualsSign) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignmentExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyGetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyGetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyGetterDeclaration=rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyGetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_GetterHeader_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=ruleGetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_GetterHeader_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=norm1_GetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertySetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySetterDeclaration=rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;

        EObject lv_fpar_5_0 = null;

        EObject lv_body_7_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==QuestionMark) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_fpar_5_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;

        EObject lv_fpar_5_0 = null;

        EObject lv_body_7_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==QuestionMark) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_fpar_5_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedCallExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedCallExpression=ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ConcreteTypeArguments_0 = null;

        EObject lv_target_1_0 = null;

        EObject this_ArgumentsWithParentheses_2 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_42);
            lv_target_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_2=ruleArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ConcreteTypeArguments_0 = null;

        EObject lv_target_1_0 = null;

        EObject this_ArgumentsWithParentheses_2 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_42);
            lv_target_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_2=norm1_ArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConcreteTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_98);
            lv_typeArgs_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);

                if ( (LA283_0==Comma) ) {
                    alt283=1;
                }


                switch (alt283) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_typeArgs_3_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop283;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLeftHandSideExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftHandSideExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftHandSideExpression=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftHandSideExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MemberExpression_0 = null;

        EObject this_ArgumentsWithParentheses_2 = null;

        EObject this_ArgumentsWithParentheses_4 = null;

        EObject this_IndexedAccessExpressionTail_6 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_8 = null;

        EObject lv_template_10_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_99);
            this_MemberExpression_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==LeftParenthesis) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                      				
                    }

                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_100);
                    this_ArgumentsWithParentheses_2=ruleArgumentsWithParentheses(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArgumentsWithParentheses_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop284:
                    do {
                        int alt284=5;
                        int LA284_0 = input.LA(1);

                        if ( (LA284_0==LeftParenthesis) ) {
                            alt284=1;
                        }
                        else if ( (LA284_0==LeftSquareBracket) ) {
                            alt284=2;
                        }
                        else if ( (LA284_0==FullStop) ) {
                            alt284=3;
                        }
                        else if ( (LA284_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred171_InternalN4JSParser())) {
                            alt284=4;
                        }
                        else if ( (LA284_0==RULE_TEMPLATE_HEAD) && (synpred171_InternalN4JSParser())) {
                            alt284=4;
                        }


                        switch (alt284) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_2_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ArgumentsWithParentheses_4=ruleArgumentsWithParentheses(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ArgumentsWithParentheses_4;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_2_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_IndexedAccessExpressionTail_6=ruleIndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_6;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_2_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ParameterizedPropertyAccessExpressionTail_8=ruleParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_2_3_0_0(),
                    	      									current);
                    	      							
                    	    }

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_template_10_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_10_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop284;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MemberExpression_0 = null;

        EObject this_ArgumentsWithParentheses_2 = null;

        EObject this_ArgumentsWithParentheses_4 = null;

        EObject this_IndexedAccessExpressionTail_6 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_8 = null;

        EObject lv_template_10_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_99);
            this_MemberExpression_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==LeftParenthesis) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                      				
                    }

                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_100);
                    this_ArgumentsWithParentheses_2=norm1_ArgumentsWithParentheses(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArgumentsWithParentheses_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop286:
                    do {
                        int alt286=5;
                        int LA286_0 = input.LA(1);

                        if ( (LA286_0==LeftParenthesis) ) {
                            alt286=1;
                        }
                        else if ( (LA286_0==LeftSquareBracket) ) {
                            alt286=2;
                        }
                        else if ( (LA286_0==FullStop) ) {
                            alt286=3;
                        }
                        else if ( (LA286_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                            alt286=4;
                        }
                        else if ( (LA286_0==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                            alt286=4;
                        }


                        switch (alt286) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_2_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ArgumentsWithParentheses_4=norm1_ArgumentsWithParentheses(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ArgumentsWithParentheses_4;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_2_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_IndexedAccessExpressionTail_6=norm1_IndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_6;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_2_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ParameterizedPropertyAccessExpressionTail_8=norm1_ParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_2_3_0_0(),
                    	      									current);
                    	      							
                    	    }

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_template_10_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_10_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop286;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( ((LA288_0>=Intersection && LA288_0<=Implements)||(LA288_0>=Promisify && LA288_0<=Abstract)||(LA288_0>=External && LA288_0<=Function)||(LA288_0>=Private && LA288_0<=Delete)||LA288_0==Public||LA288_0==Static||(LA288_0>=Target && LA288_0<=Await)||LA288_0==Class||(LA288_0>=False && LA288_0<=Super)||LA288_0==Union||(LA288_0>=Yield && LA288_0<=This)||(LA288_0>=From && LA288_0<=Void)||LA288_0==FullStopFullStopFullStop||(LA288_0>=Get && LA288_0<=Set)||LA288_0==PlusSignPlusSign||LA288_0==HyphenMinusHyphenMinus||LA288_0==SolidusEqualsSign||LA288_0==As||LA288_0==Of||LA288_0==ExclamationMark||LA288_0==LeftParenthesis||LA288_0==PlusSign||LA288_0==HyphenMinus||LA288_0==Solidus||LA288_0==LessThanSign||(LA288_0>=CommercialAt && LA288_0<=LeftSquareBracket)||LA288_0==LeftCurlyBracket||LA288_0==Tilde||LA288_0==RULE_DOUBLE||(LA288_0>=RULE_HEX_INT && LA288_0<=RULE_LEGACY_OCTAL_INT)||LA288_0==RULE_SCIENTIFIC_INT||LA288_0==RULE_IDENTIFIER||LA288_0==RULE_STRING||(LA288_0>=RULE_TEMPLATE_HEAD && LA288_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA288_0==RULE_INT) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_65);
                    this_Arguments_1=ruleArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( ((LA289_0>=Intersection && LA289_0<=Implements)||(LA289_0>=Promisify && LA289_0<=Abstract)||(LA289_0>=External && LA289_0<=Function)||(LA289_0>=Private && LA289_0<=Delete)||LA289_0==Public||LA289_0==Static||(LA289_0>=Target && LA289_0<=Await)||LA289_0==Class||(LA289_0>=False && LA289_0<=Super)||LA289_0==Union||(LA289_0>=Yield && LA289_0<=This)||(LA289_0>=From && LA289_0<=Void)||LA289_0==FullStopFullStopFullStop||(LA289_0>=Get && LA289_0<=Set)||LA289_0==PlusSignPlusSign||LA289_0==HyphenMinusHyphenMinus||LA289_0==SolidusEqualsSign||LA289_0==As||LA289_0==Of||LA289_0==ExclamationMark||LA289_0==LeftParenthesis||LA289_0==PlusSign||LA289_0==HyphenMinus||LA289_0==Solidus||LA289_0==LessThanSign||(LA289_0>=CommercialAt && LA289_0<=LeftSquareBracket)||LA289_0==LeftCurlyBracket||LA289_0==Tilde||LA289_0==RULE_DOUBLE||(LA289_0>=RULE_HEX_INT && LA289_0<=RULE_LEGACY_OCTAL_INT)||LA289_0==RULE_SCIENTIFIC_INT||LA289_0==RULE_IDENTIFIER||LA289_0==RULE_STRING||(LA289_0>=RULE_TEMPLATE_HEAD && LA289_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA289_0==RULE_INT) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_65);
                    this_Arguments_1=norm1_Arguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;

        EObject lv_arguments_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_arguments_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( (LA290_0==Comma) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_31);
            	    lv_arguments_2_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Arguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;

        EObject lv_arguments_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_arguments_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==Comma) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_31);
            	    lv_arguments_2_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop291;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArgument=ruleArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgument() throws RecognitionException {
        EObject current = null;

        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==FullStopFullStopFullStop) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Argument() throws RecognitionException {
        EObject current = null;

        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==FullStopFullStopFullStop) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMemberExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMemberExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMemberExpression=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMemberExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMemberExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        EObject lv_callee_6_0 = null;

        EObject this_ConcreteTypeArguments_7 = null;

        EObject this_Arguments_9 = null;

        EObject this_IndexedAccessExpressionTail_12 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;

        EObject lv_template_16_0 = null;

        EObject this_PrimaryExpression_17 = null;

        EObject this_IndexedAccessExpressionTail_19 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_21 = null;

        EObject lv_template_23_0 = null;



        	enterRule();

        try {
            {
            int alt299=3;
            alt299 = dfa299.predict(input);
            switch (alt299) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_1=(Token)match(input,New,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      					
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_5=(Token)match(input,New,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_106);
                    lv_callee_6_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==LessThanSign) ) {
                        int LA294_1 = input.LA(2);

                        if ( (synpred175_InternalN4JSParser()) ) {
                            alt294=1;
                        }
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                              				
                            }
                            pushFollow(FOLLOW_99);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==LeftParenthesis) ) {
                        int LA297_1 = input.LA(2);

                        if ( (synpred176_InternalN4JSParser()) ) {
                            alt297=1;
                        }
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                              						
                            }

                            }


                            }
                            int alt295=2;
                            int LA295_0 = input.LA(1);

                            if ( ((LA295_0>=Intersection && LA295_0<=Implements)||(LA295_0>=Promisify && LA295_0<=Abstract)||(LA295_0>=External && LA295_0<=Function)||(LA295_0>=Private && LA295_0<=Delete)||LA295_0==Public||LA295_0==Static||(LA295_0>=Target && LA295_0<=Await)||LA295_0==Class||(LA295_0>=False && LA295_0<=Super)||LA295_0==Union||(LA295_0>=Yield && LA295_0<=This)||(LA295_0>=From && LA295_0<=Void)||LA295_0==FullStopFullStopFullStop||(LA295_0>=Get && LA295_0<=Set)||LA295_0==PlusSignPlusSign||LA295_0==HyphenMinusHyphenMinus||LA295_0==SolidusEqualsSign||LA295_0==As||LA295_0==Of||LA295_0==ExclamationMark||LA295_0==LeftParenthesis||LA295_0==PlusSign||LA295_0==HyphenMinus||LA295_0==Solidus||LA295_0==LessThanSign||(LA295_0>=CommercialAt && LA295_0<=LeftSquareBracket)||LA295_0==LeftCurlyBracket||LA295_0==Tilde||LA295_0==RULE_DOUBLE||(LA295_0>=RULE_HEX_INT && LA295_0<=RULE_LEGACY_OCTAL_INT)||LA295_0==RULE_SCIENTIFIC_INT||LA295_0==RULE_IDENTIFIER||LA295_0==RULE_STRING||(LA295_0>=RULE_TEMPLATE_HEAD && LA295_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA295_0==RULE_INT) ) {
                                alt295=1;
                            }
                            switch (alt295) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                      					
                                    }
                                    pushFollow(FOLLOW_65);
                                    this_Arguments_9=ruleArguments(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                      					
                                    }

                                    }
                                    break;

                            }

                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              				
                            }
                            loop296:
                            do {
                                int alt296=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt296=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt296=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt296=3;
                                    }
                                    break;

                                }

                                switch (alt296) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    this_IndexedAccessExpressionTail_12=ruleIndexedAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=ruleParameterizedPropertyAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_template_16_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_16_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop296;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_100);
                    this_PrimaryExpression_17=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryExpression_17;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop298:
                    do {
                        int alt298=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt298=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt298=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt298=3;
                            }
                            break;

                        }

                        switch (alt298) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_IndexedAccessExpressionTail_19=ruleIndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_19;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ParameterizedPropertyAccessExpressionTail_21=ruleParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_21;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_template_23_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_23_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop298;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MemberExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        EObject lv_callee_6_0 = null;

        EObject this_ConcreteTypeArguments_7 = null;

        EObject this_Arguments_9 = null;

        EObject this_IndexedAccessExpressionTail_12 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;

        EObject lv_template_16_0 = null;

        EObject this_PrimaryExpression_17 = null;

        EObject this_IndexedAccessExpressionTail_19 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_21 = null;

        EObject lv_template_23_0 = null;



        	enterRule();

        try {
            {
            int alt305=3;
            alt305 = dfa305.predict(input);
            switch (alt305) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_1=(Token)match(input,New,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      					
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_5=(Token)match(input,New,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_106);
                    lv_callee_6_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==LessThanSign) ) {
                        int LA300_1 = input.LA(2);

                        if ( (synpred179_InternalN4JSParser()) ) {
                            alt300=1;
                        }
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                              				
                            }
                            pushFollow(FOLLOW_99);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==LeftParenthesis) ) {
                        int LA303_1 = input.LA(2);

                        if ( (synpred180_InternalN4JSParser()) ) {
                            alt303=1;
                        }
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                              						
                            }

                            }


                            }
                            int alt301=2;
                            int LA301_0 = input.LA(1);

                            if ( ((LA301_0>=Intersection && LA301_0<=Implements)||(LA301_0>=Promisify && LA301_0<=Abstract)||(LA301_0>=External && LA301_0<=Function)||(LA301_0>=Private && LA301_0<=Delete)||LA301_0==Public||LA301_0==Static||(LA301_0>=Target && LA301_0<=Await)||LA301_0==Class||(LA301_0>=False && LA301_0<=Super)||LA301_0==Union||(LA301_0>=Yield && LA301_0<=This)||(LA301_0>=From && LA301_0<=Void)||LA301_0==FullStopFullStopFullStop||(LA301_0>=Get && LA301_0<=Set)||LA301_0==PlusSignPlusSign||LA301_0==HyphenMinusHyphenMinus||LA301_0==SolidusEqualsSign||LA301_0==As||LA301_0==Of||LA301_0==ExclamationMark||LA301_0==LeftParenthesis||LA301_0==PlusSign||LA301_0==HyphenMinus||LA301_0==Solidus||LA301_0==LessThanSign||(LA301_0>=CommercialAt && LA301_0<=LeftSquareBracket)||LA301_0==LeftCurlyBracket||LA301_0==Tilde||LA301_0==RULE_DOUBLE||(LA301_0>=RULE_HEX_INT && LA301_0<=RULE_LEGACY_OCTAL_INT)||LA301_0==RULE_SCIENTIFIC_INT||LA301_0==RULE_IDENTIFIER||LA301_0==RULE_STRING||(LA301_0>=RULE_TEMPLATE_HEAD && LA301_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA301_0==RULE_INT) ) {
                                alt301=1;
                            }
                            switch (alt301) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                      					
                                    }
                                    pushFollow(FOLLOW_65);
                                    this_Arguments_9=norm1_Arguments(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                      					
                                    }

                                    }
                                    break;

                            }

                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              				
                            }
                            loop302:
                            do {
                                int alt302=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt302=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt302=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt302=3;
                                    }
                                    break;

                                }

                                switch (alt302) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    this_IndexedAccessExpressionTail_12=norm1_IndexedAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=norm1_ParameterizedPropertyAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_template_16_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_16_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop302;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_100);
                    this_PrimaryExpression_17=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryExpression_17;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop304:
                    do {
                        int alt304=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt304=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt304=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt304=3;
                            }
                            break;

                        }

                        switch (alt304) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_IndexedAccessExpressionTail_19=norm1_IndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_19;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    this_ParameterizedPropertyAccessExpressionTail_21=norm1_ParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_21;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_template_23_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_23_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop304;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_index_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_index_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject this_ConcreteTypeArguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,FullStop,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              		
            }
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==LessThanSign) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_25);
                    this_ConcreteTypeArguments_1=ruleConcreteTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConcreteTypeArguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject this_ConcreteTypeArguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,FullStop,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              		
            }
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==LessThanSign) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_25);
                    this_ConcreteTypeArguments_1=ruleConcreteTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConcreteTypeArguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePostfixExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LeftHandSideExpression_0 = null;

        Enumerator lv_op_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_109);
            this_LeftHandSideExpression_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==PlusSignPlusSign) && (synpred181_InternalN4JSParser())) {
                alt308=1;
            }
            else if ( (LA308_0==HyphenMinusHyphenMinus) && (synpred181_InternalN4JSParser())) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LeftHandSideExpression_0 = null;

        Enumerator lv_op_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_109);
            this_LeftHandSideExpression_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==PlusSignPlusSign) && (synpred182_InternalN4JSParser())) {
                alt309=1;
            }
            else if ( (LA309_0==HyphenMinusHyphenMinus) && (synpred182_InternalN4JSParser())) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCastExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCastExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCastExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCastExpression=ruleCastExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCastExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCastExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;

        EObject lv_targetTypeRef_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==As) && (synpred183_InternalN4JSParser())) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefTypeRefForCastParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.N4JS.TypeRefForCast");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CastExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;

        EObject lv_targetTypeRef_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==As) && (synpred184_InternalN4JSParser())) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefTypeRefForCastParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.N4JS.TypeRefForCast");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExpression=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_CastExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( ((LA312_0>=Intersection && LA312_0<=Implements)||(LA312_0>=Promisify && LA312_0<=Abstract)||(LA312_0>=External && LA312_0<=Function)||(LA312_0>=Private && LA312_0<=Project)||LA312_0==Public||LA312_0==Static||LA312_0==Target||(LA312_0>=Async && LA312_0<=Await)||LA312_0==Class||(LA312_0>=False && LA312_0<=Super)||LA312_0==Union||(LA312_0>=Yield && LA312_0<=This)||(LA312_0>=From && LA312_0<=Type)||(LA312_0>=Get && LA312_0<=Set)||LA312_0==SolidusEqualsSign||LA312_0==As||LA312_0==Of||LA312_0==LeftParenthesis||LA312_0==Solidus||LA312_0==LessThanSign||(LA312_0>=CommercialAt && LA312_0<=LeftSquareBracket)||LA312_0==LeftCurlyBracket||LA312_0==RULE_DOUBLE||(LA312_0>=RULE_HEX_INT && LA312_0<=RULE_LEGACY_OCTAL_INT)||LA312_0==RULE_SCIENTIFIC_INT||LA312_0==RULE_IDENTIFIER||LA312_0==RULE_STRING||(LA312_0>=RULE_TEMPLATE_HEAD && LA312_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA312_0==RULE_INT) ) {
                alt312=1;
            }
            else if ( (LA312_0==Delete||LA312_0==Typeof||LA312_0==Void||LA312_0==PlusSignPlusSign||LA312_0==HyphenMinusHyphenMinus||LA312_0==ExclamationMark||LA312_0==PlusSign||LA312_0==HyphenMinus||LA312_0==Tilde) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);

                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_49);
                    lv_op_2_0=ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_UnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_CastExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Project)||LA313_0==Public||LA313_0==Static||LA313_0==Target||(LA313_0>=Async && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||LA313_0==This||(LA313_0>=From && LA313_0<=Type)||(LA313_0>=Get && LA313_0<=Set)||LA313_0==SolidusEqualsSign||LA313_0==As||LA313_0==Of||LA313_0==LeftParenthesis||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                alt313=1;
            }
            else if ( (LA313_0==Delete||LA313_0==Typeof||LA313_0==Void||LA313_0==PlusSignPlusSign||LA313_0==HyphenMinusHyphenMinus||LA313_0==ExclamationMark||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Tilde) ) {
                alt313=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);

                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_49);
                    lv_op_2_0=ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiplicativeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_110);
            this_UnaryExpression_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop314:
            do {
                int alt314=2;
                int LA314_0 = input.LA(1);

                if ( (LA314_0==Asterisk) && (synpred185_InternalN4JSParser())) {
                    alt314=1;
                }
                else if ( (LA314_0==Solidus) && (synpred185_InternalN4JSParser())) {
                    alt314=1;
                }
                else if ( (LA314_0==PercentSign) && (synpred185_InternalN4JSParser())) {
                    alt314=1;
                }


                switch (alt314) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_110);
            	    lv_rhs_3_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop314;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_110);
            this_UnaryExpression_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);

                if ( (LA315_0==Asterisk) && (synpred186_InternalN4JSParser())) {
                    alt315=1;
                }
                else if ( (LA315_0==Solidus) && (synpred186_InternalN4JSParser())) {
                    alt315=1;
                }
                else if ( (LA315_0==PercentSign) && (synpred186_InternalN4JSParser())) {
                    alt315=1;
                }


                switch (alt315) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_110);
            	    lv_rhs_3_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop315;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAdditiveExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MultiplicativeExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_111);
            this_MultiplicativeExpression_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);

                if ( (LA316_0==PlusSign) && (synpred187_InternalN4JSParser())) {
                    alt316=1;
                }
                else if ( (LA316_0==HyphenMinus) && (synpred187_InternalN4JSParser())) {
                    alt316=1;
                }


                switch (alt316) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_111);
            	    lv_rhs_3_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop316;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MultiplicativeExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_111);
            this_MultiplicativeExpression_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);

                if ( (LA317_0==PlusSign) && (synpred188_InternalN4JSParser())) {
                    alt317=1;
                }
                else if ( (LA317_0==HyphenMinus) && (synpred188_InternalN4JSParser())) {
                    alt317=1;
                }


                switch (alt317) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_111);
            	    lv_rhs_3_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop317;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShiftExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftExpression=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AdditiveExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_112);
            this_AdditiveExpression_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop318:
            do {
                int alt318=2;
                alt318 = dfa318.predict(input);
                switch (alt318) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_112);
            	    lv_rhs_3_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop318;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AdditiveExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_112);
            this_AdditiveExpression_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop319:
            do {
                int alt319=2;
                alt319 = dfa319.predict(input);
                switch (alt319) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_112);
            	    lv_rhs_3_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop319;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleShiftOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleShiftOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftOperator=ruleShiftOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleShiftOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==GreaterThanSign) ) {
                alt321=1;
            }
            else if ( (LA321_0==LessThanSignLessThanSign) ) {
                alt321=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);

                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_113); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                      			
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                      			
                    }
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==GreaterThanSign) ) {
                        alt320=1;
                    }
                    switch (alt320) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationalExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExpression=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_115);
            this_ShiftExpression_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop322:
            do {
                int alt322=2;
                alt322 = dfa322.predict(input);
                switch (alt322) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_rhs_3_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop322;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_116);
            this_ShiftExpression_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop323:
            do {
                int alt323=2;
                alt323 = dfa323.predict(input);
                switch (alt323) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_116);
            	    lv_rhs_3_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop323;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_115);
            this_ShiftExpression_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop324:
            do {
                int alt324=2;
                alt324 = dfa324.predict(input);
                switch (alt324) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_rhs_3_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop324;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_116);
            this_ShiftExpression_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop325:
            do {
                int alt325=2;
                alt325 = dfa325.predict(input);
                switch (alt325) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_116);
            	    lv_rhs_3_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop325;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleRelationalOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelationalOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalOperator=ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleRelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt326=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt326=1;
                }
                break;
            case GreaterThanSign:
                {
                alt326=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt326=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt326=4;
                }
                break;
            case Instanceof:
                {
                alt326=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);

                throw nvae;
            }

            switch (alt326) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_RelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt327=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt327=1;
                }
                break;
            case GreaterThanSign:
                {
                alt327=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt327=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt327=4;
                }
                break;
            case Instanceof:
                {
                alt327=5;
                }
                break;
            case In:
                {
                alt327=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 0, input);

                throw nvae;
            }

            switch (alt327) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEqualityExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEqualityExpression=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_RelationalExpression_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);

                if ( (LA328_0==EqualsSignEqualsSignEqualsSign) && (synpred199_InternalN4JSParser())) {
                    alt328=1;
                }
                else if ( (LA328_0==ExclamationMarkEqualsSignEqualsSign) && (synpred199_InternalN4JSParser())) {
                    alt328=1;
                }
                else if ( (LA328_0==EqualsSignEqualsSign) && (synpred199_InternalN4JSParser())) {
                    alt328=1;
                }
                else if ( (LA328_0==ExclamationMarkEqualsSign) && (synpred199_InternalN4JSParser())) {
                    alt328=1;
                }


                switch (alt328) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_117);
            	    lv_rhs_3_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop328;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_RelationalExpression_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==EqualsSignEqualsSignEqualsSign) && (synpred200_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==ExclamationMarkEqualsSignEqualsSign) && (synpred200_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==EqualsSignEqualsSign) && (synpred200_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==ExclamationMarkEqualsSign) && (synpred200_InternalN4JSParser())) {
                    alt329=1;
                }


                switch (alt329) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_117);
            	    lv_rhs_3_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop329;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_RelationalExpression_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==EqualsSignEqualsSignEqualsSign) && (synpred201_InternalN4JSParser())) {
                    alt330=1;
                }
                else if ( (LA330_0==ExclamationMarkEqualsSignEqualsSign) && (synpred201_InternalN4JSParser())) {
                    alt330=1;
                }
                else if ( (LA330_0==EqualsSignEqualsSign) && (synpred201_InternalN4JSParser())) {
                    alt330=1;
                }
                else if ( (LA330_0==ExclamationMarkEqualsSign) && (synpred201_InternalN4JSParser())) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_117);
            	    lv_rhs_3_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_RelationalExpression_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==EqualsSignEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==ExclamationMarkEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==EqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==ExclamationMarkEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_117);
            	    lv_rhs_3_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseANDExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDExpression=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_EqualityExpression_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==Ampersand) && (synpred203_InternalN4JSParser())) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_EqualityExpression_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);

                if ( (LA333_0==Ampersand) && (synpred204_InternalN4JSParser())) {
                    alt333=1;
                }


                switch (alt333) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop333;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_EqualityExpression_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);

                if ( (LA334_0==Ampersand) && (synpred205_InternalN4JSParser())) {
                    alt334=1;
                }


                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_EqualityExpression_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);

                if ( (LA335_0==Ampersand) && (synpred206_InternalN4JSParser())) {
                    alt335=1;
                }


                switch (alt335) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseANDOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseANDOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDOperator=ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseXORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXORExpression=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_119);
            this_BitwiseANDExpression_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop336:
            do {
                int alt336=2;
                int LA336_0 = input.LA(1);

                if ( (LA336_0==CircumflexAccent) && (synpred207_InternalN4JSParser())) {
                    alt336=1;
                }


                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_119);
            this_BitwiseANDExpression_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop337:
            do {
                int alt337=2;
                int LA337_0 = input.LA(1);

                if ( (LA337_0==CircumflexAccent) && (synpred208_InternalN4JSParser())) {
                    alt337=1;
                }


                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop337;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_119);
            this_BitwiseANDExpression_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop338:
            do {
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==CircumflexAccent) && (synpred209_InternalN4JSParser())) {
                    alt338=1;
                }


                switch (alt338) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_119);
            this_BitwiseANDExpression_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop339:
            do {
                int alt339=2;
                int LA339_0 = input.LA(1);

                if ( (LA339_0==CircumflexAccent) && (synpred210_InternalN4JSParser())) {
                    alt339=1;
                }


                switch (alt339) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseXOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseXOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXOROperator=ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseXOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseORExpression=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_120);
            this_BitwiseXORExpression_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==VerticalLine) && (synpred211_InternalN4JSParser())) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_120);
            this_BitwiseXORExpression_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==VerticalLine) && (synpred212_InternalN4JSParser())) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_120);
            this_BitwiseXORExpression_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop342:
            do {
                int alt342=2;
                int LA342_0 = input.LA(1);

                if ( (LA342_0==VerticalLine) && (synpred213_InternalN4JSParser())) {
                    alt342=1;
                }


                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_120);
            this_BitwiseXORExpression_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==VerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt343=1;
                }


                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseOROperator=ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalANDExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDExpression=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_121);
            this_BitwiseORExpression_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==AmpersandAmpersand) && (synpred215_InternalN4JSParser())) {
                    alt344=1;
                }


                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_121);
            this_BitwiseORExpression_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==AmpersandAmpersand) && (synpred216_InternalN4JSParser())) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_121);
            this_BitwiseORExpression_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==AmpersandAmpersand) && (synpred217_InternalN4JSParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_121);
            this_BitwiseORExpression_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==AmpersandAmpersand) && (synpred218_InternalN4JSParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalANDOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLogicalANDOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDOperator=ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalORExpression=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_122);
            this_LogicalANDExpression_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==VerticalLineVerticalLine) && (synpred219_InternalN4JSParser())) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_122);
            	    lv_rhs_3_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_122);
            this_LogicalANDExpression_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==VerticalLineVerticalLine) && (synpred220_InternalN4JSParser())) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_122);
            	    lv_rhs_3_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_122);
            this_LogicalANDExpression_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==VerticalLineVerticalLine) && (synpred221_InternalN4JSParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_122);
            	    lv_rhs_3_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_122);
            this_LogicalANDExpression_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==VerticalLineVerticalLine) && (synpred222_InternalN4JSParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_122);
            	    lv_rhs_3_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLogicalOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOROperator=ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleConditionalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConditionalExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConditionalExpression=ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConditionalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_LogicalORExpression_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==QuestionMark) && (synpred223_InternalN4JSParser())) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_82);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_LogicalORExpression_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==QuestionMark) && (synpred224_InternalN4JSParser())) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_82);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_LogicalORExpression_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==QuestionMark) && (synpred225_InternalN4JSParser())) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_82);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_LogicalORExpression_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==QuestionMark) && (synpred226_InternalN4JSParser())) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_82);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssignmentExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpression=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_ConditionalExpression_3 = null;

        AntlrDatatypeRuleToken lv_op_5_0 = null;

        EObject lv_rhs_6_0 = null;



        	enterRule();

        try {
            {
            int alt357=4;
            alt357 = dfa357.predict(input);
            switch (alt357) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_124);
                    this_ConditionalExpression_3=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt356=2;
                    alt356 = dfa356.predict(input);
                    switch (alt356) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_ConditionalExpression_3 = null;

        AntlrDatatypeRuleToken lv_op_5_0 = null;

        EObject lv_rhs_6_0 = null;



        	enterRule();

        try {
            {
            int alt359=4;
            alt359 = dfa359.predict(input);
            switch (alt359) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_124);
                    this_ConditionalExpression_3=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt358=2;
                    alt358 = dfa358.predict(input);
                    switch (alt358) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_YieldExpression_3 = null;

        EObject this_ConditionalExpression_4 = null;

        AntlrDatatypeRuleToken lv_op_6_0 = null;

        EObject lv_rhs_7_0 = null;



        	enterRule();

        try {
            {
            int alt361=5;
            alt361 = dfa361.predict(input);
            switch (alt361) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_124);
                    this_ConditionalExpression_4=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt360=2;
                    alt360 = dfa360.predict(input);
                    switch (alt360) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_6_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_YieldExpression_3 = null;

        EObject this_ConditionalExpression_4 = null;

        AntlrDatatypeRuleToken lv_op_6_0 = null;

        EObject lv_rhs_7_0 = null;



        	enterRule();

        try {
            {
            int alt363=5;
            alt363 = dfa363.predict(input);
            switch (alt363) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_124);
                    this_ConditionalExpression_4=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt362=2;
                    alt362 = dfa362.predict(input);
                    switch (alt362) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_6_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleYieldExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldExpression=ruleYieldExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleYieldExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Yield,FOLLOW_125); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              		
            }
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==Asterisk) && (synpred251_InternalN4JSParser())) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt365=2;
            alt365 = dfa365.predict(input);
            switch (alt365) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_YieldExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Yield,FOLLOW_125); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              		
            }
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==Asterisk) && (synpred253_InternalN4JSParser())) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt367=2;
            alt367 = dfa367.predict(input);
            switch (alt367) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAssignmentOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperator=ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt369=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt369=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt369=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt369=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt369=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt369=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt369=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt369=7;
                }
                break;
            case GreaterThanSign:
                {
                alt369=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt369=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt369=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt369=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);

                throw nvae;
            }

            switch (alt369) {
                case 1 :
                    {
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_126); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                      			
                    }
                    int alt368=2;
                    int LA368_0 = input.LA(1);

                    if ( (LA368_0==GreaterThanSign) ) {
                        alt368=1;
                    }
                    switch (alt368) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_127); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                              				
                            }

                            }
                            break;

                    }

                    kw=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAwaitExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAwaitExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAwaitExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAwaitExpression=ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAwaitExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePromisifyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePromisifyExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPromisifyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePromisifyExpression=rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePromisifyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_31);
            this_AssignmentExpression_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==Comma) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_exprs_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop370:
                    do {
                        int alt370=2;
                        int LA370_0 = input.LA(1);

                        if ( (LA370_0==Comma) ) {
                            alt370=1;
                        }


                        switch (alt370) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_31);
                    	    lv_exprs_5_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop370;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_31);
            this_AssignmentExpression_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==Comma) ) {
                alt373=1;
            }
            switch (alt373) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_exprs_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop372:
                    do {
                        int alt372=2;
                        int LA372_0 = input.LA(1);

                        if ( (LA372_0==Comma) ) {
                            alt372=1;
                        }


                        switch (alt372) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_31);
                    	    lv_exprs_5_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop372;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_31);
            this_AssignmentExpression_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==Comma) ) {
                alt375=1;
            }
            switch (alt375) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_exprs_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop374:
                    do {
                        int alt374=2;
                        int LA374_0 = input.LA(1);

                        if ( (LA374_0==Comma) ) {
                            alt374=1;
                        }


                        switch (alt374) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_31);
                    	    lv_exprs_5_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop374;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_31);
            this_AssignmentExpression_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==Comma) ) {
                alt377=1;
            }
            switch (alt377) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_exprs_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop376:
                    do {
                        int alt376=2;
                        int LA376_0 = input.LA(1);

                        if ( (LA376_0==Comma) ) {
                            alt376=1;
                        }


                        switch (alt376) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_31);
                    	    lv_exprs_5_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop376;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateLiteral=ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject lv_segments_1_0 = null;

        EObject lv_segments_2_0 = null;

        EObject lv_segments_3_0 = null;

        EObject lv_segments_5_0 = null;

        EObject lv_segments_6_0 = null;

        EObject lv_segments_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
              			
            }

            }
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt381=1;
            }
            else if ( (LA381_0==RULE_TEMPLATE_HEAD) ) {
                alt381=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 381, 0, input);

                throw nvae;
            }
            switch (alt381) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_129);
                    lv_segments_2_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt378=2;
                    int LA378_0 = input.LA(1);

                    if ( ((LA378_0>=Intersection && LA378_0<=Implements)||(LA378_0>=Promisify && LA378_0<=Abstract)||(LA378_0>=External && LA378_0<=Function)||(LA378_0>=Private && LA378_0<=Delete)||LA378_0==Public||LA378_0==Static||(LA378_0>=Target && LA378_0<=Await)||LA378_0==Class||(LA378_0>=False && LA378_0<=Super)||LA378_0==Union||(LA378_0>=Yield && LA378_0<=This)||(LA378_0>=From && LA378_0<=Void)||(LA378_0>=Get && LA378_0<=Set)||LA378_0==PlusSignPlusSign||LA378_0==HyphenMinusHyphenMinus||LA378_0==SolidusEqualsSign||LA378_0==As||LA378_0==Of||LA378_0==ExclamationMark||LA378_0==LeftParenthesis||LA378_0==PlusSign||LA378_0==HyphenMinus||LA378_0==Solidus||LA378_0==LessThanSign||(LA378_0>=CommercialAt && LA378_0<=LeftSquareBracket)||LA378_0==LeftCurlyBracket||LA378_0==Tilde||LA378_0==RULE_DOUBLE||(LA378_0>=RULE_HEX_INT && LA378_0<=RULE_LEGACY_OCTAL_INT)||LA378_0==RULE_SCIENTIFIC_INT||LA378_0==RULE_IDENTIFIER||LA378_0==RULE_STRING||(LA378_0>=RULE_TEMPLATE_HEAD && LA378_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA378_0==RULE_INT) ) {
                        alt378=1;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_129);
                            lv_segments_3_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_130);
                    ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }
                    loop380:
                    do {
                        int alt380=2;
                        int LA380_0 = input.LA(1);

                        if ( (LA380_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt380=1;
                        }


                        switch (alt380) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_129);
                    	    lv_segments_5_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }
                    	    int alt379=2;
                    	    int LA379_0 = input.LA(1);

                    	    if ( ((LA379_0>=Intersection && LA379_0<=Implements)||(LA379_0>=Promisify && LA379_0<=Abstract)||(LA379_0>=External && LA379_0<=Function)||(LA379_0>=Private && LA379_0<=Delete)||LA379_0==Public||LA379_0==Static||(LA379_0>=Target && LA379_0<=Await)||LA379_0==Class||(LA379_0>=False && LA379_0<=Super)||LA379_0==Union||(LA379_0>=Yield && LA379_0<=This)||(LA379_0>=From && LA379_0<=Void)||(LA379_0>=Get && LA379_0<=Set)||LA379_0==PlusSignPlusSign||LA379_0==HyphenMinusHyphenMinus||LA379_0==SolidusEqualsSign||LA379_0==As||LA379_0==Of||LA379_0==ExclamationMark||LA379_0==LeftParenthesis||LA379_0==PlusSign||LA379_0==HyphenMinus||LA379_0==Solidus||LA379_0==LessThanSign||(LA379_0>=CommercialAt && LA379_0<=LeftSquareBracket)||LA379_0==LeftCurlyBracket||LA379_0==Tilde||LA379_0==RULE_DOUBLE||(LA379_0>=RULE_HEX_INT && LA379_0<=RULE_LEGACY_OCTAL_INT)||LA379_0==RULE_SCIENTIFIC_INT||LA379_0==RULE_IDENTIFIER||LA379_0==RULE_STRING||(LA379_0>=RULE_TEMPLATE_HEAD && LA379_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA379_0==RULE_INT) ) {
                    	        alt379=1;
                    	    }
                    	    switch (alt379) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	              							
                    	            }
                    	            pushFollow(FOLLOW_129);
                    	            lv_segments_6_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_130);
                    	    ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop380;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject lv_segments_1_0 = null;

        EObject lv_segments_2_0 = null;

        EObject lv_segments_3_0 = null;

        EObject lv_segments_5_0 = null;

        EObject lv_segments_6_0 = null;

        EObject lv_segments_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
              			
            }

            }
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt385=1;
            }
            else if ( (LA385_0==RULE_TEMPLATE_HEAD) ) {
                alt385=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 385, 0, input);

                throw nvae;
            }
            switch (alt385) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_129);
                    lv_segments_2_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt382=2;
                    int LA382_0 = input.LA(1);

                    if ( ((LA382_0>=Intersection && LA382_0<=Implements)||(LA382_0>=Promisify && LA382_0<=Abstract)||(LA382_0>=External && LA382_0<=Function)||(LA382_0>=Private && LA382_0<=Delete)||LA382_0==Public||LA382_0==Static||(LA382_0>=Target && LA382_0<=Await)||LA382_0==Class||(LA382_0>=False && LA382_0<=Super)||LA382_0==Union||(LA382_0>=Yield && LA382_0<=This)||(LA382_0>=From && LA382_0<=Void)||(LA382_0>=Get && LA382_0<=Set)||LA382_0==PlusSignPlusSign||LA382_0==HyphenMinusHyphenMinus||LA382_0==SolidusEqualsSign||LA382_0==As||LA382_0==Of||LA382_0==ExclamationMark||LA382_0==LeftParenthesis||LA382_0==PlusSign||LA382_0==HyphenMinus||LA382_0==Solidus||LA382_0==LessThanSign||(LA382_0>=CommercialAt && LA382_0<=LeftSquareBracket)||LA382_0==LeftCurlyBracket||LA382_0==Tilde||LA382_0==RULE_DOUBLE||(LA382_0>=RULE_HEX_INT && LA382_0<=RULE_LEGACY_OCTAL_INT)||LA382_0==RULE_SCIENTIFIC_INT||LA382_0==RULE_IDENTIFIER||LA382_0==RULE_STRING||(LA382_0>=RULE_TEMPLATE_HEAD && LA382_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA382_0==RULE_INT) ) {
                        alt382=1;
                    }
                    switch (alt382) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_129);
                            lv_segments_3_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_130);
                    ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }
                    loop384:
                    do {
                        int alt384=2;
                        int LA384_0 = input.LA(1);

                        if ( (LA384_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt384=1;
                        }


                        switch (alt384) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_129);
                    	    lv_segments_5_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }
                    	    int alt383=2;
                    	    int LA383_0 = input.LA(1);

                    	    if ( ((LA383_0>=Intersection && LA383_0<=Implements)||(LA383_0>=Promisify && LA383_0<=Abstract)||(LA383_0>=External && LA383_0<=Function)||(LA383_0>=Private && LA383_0<=Delete)||LA383_0==Public||LA383_0==Static||(LA383_0>=Target && LA383_0<=Await)||LA383_0==Class||(LA383_0>=False && LA383_0<=Super)||LA383_0==Union||(LA383_0>=Yield && LA383_0<=This)||(LA383_0>=From && LA383_0<=Void)||(LA383_0>=Get && LA383_0<=Set)||LA383_0==PlusSignPlusSign||LA383_0==HyphenMinusHyphenMinus||LA383_0==SolidusEqualsSign||LA383_0==As||LA383_0==Of||LA383_0==ExclamationMark||LA383_0==LeftParenthesis||LA383_0==PlusSign||LA383_0==HyphenMinus||LA383_0==Solidus||LA383_0==LessThanSign||(LA383_0>=CommercialAt && LA383_0<=LeftSquareBracket)||LA383_0==LeftCurlyBracket||LA383_0==Tilde||LA383_0==RULE_DOUBLE||(LA383_0>=RULE_HEX_INT && LA383_0<=RULE_LEGACY_OCTAL_INT)||LA383_0==RULE_SCIENTIFIC_INT||LA383_0==RULE_IDENTIFIER||LA383_0==RULE_STRING||(LA383_0>=RULE_TEMPLATE_HEAD && LA383_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA383_0==RULE_INT) ) {
                    	        alt383=1;
                    	    }
                    	    switch (alt383) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	              							
                    	            }
                    	            pushFollow(FOLLOW_129);
                    	            lv_segments_6_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_130);
                    	    ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop384;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateExpressionEnd() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateExpressionEnd = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateExpressionEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateExpressionEnd=ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateExpressionEnd.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateExpressionEnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();
        	setInTemplateSegment();
        try {
            {
            kw=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNoSubstitutionTemplate = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoSubstitutionTemplateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNoSubstitutionTemplate=ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoSubstitutionTemplate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;

        Token lv_rawValue_1_0=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNoSubstitutionTemplateAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            lv_rawValue_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_rawValue_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNoSubstitutionTemplateRule());
              					}
              					setWithLastConsumed(
              						current,
              						"rawValue",
              						lv_rawValue_1_0,
              						"org.eclipse.n4js.N4JS.NO_SUBSTITUTION_TEMPLATE_LITERAL");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateHead() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateHead = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateHead=ruleTemplateHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateHead; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateHead() throws RecognitionException {
        EObject current = null;

        Token lv_rawValue_1_0=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateHeadAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            lv_rawValue_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_rawValue_1_0, grammarAccess.getTemplateHeadAccess().getRawValueTEMPLATE_HEADTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTemplateHeadRule());
              					}
              					setWithLastConsumed(
              						current,
              						"rawValue",
              						lv_rawValue_1_0,
              						"org.eclipse.n4js.N4JS.TEMPLATE_HEAD");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateTail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateTail = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTail=ruleTemplateTail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateTail() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_rawValue_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateTailAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTemplateTailAccess().getRawValueTemplateTailLiteralParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_rawValue_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateTailRule());
              					}
              					set(
              						current,
              						"rawValue",
              						lv_rawValue_1_0,
              						"org.eclipse.n4js.N4JS.TemplateTailLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateMiddle() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateMiddle = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddle=ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddle; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateMiddle() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_rawValue_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateMiddleAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTemplateMiddleAccess().getRawValueTemplateMiddleLiteralParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_rawValue_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateMiddleRule());
              					}
              					set(
              						current,
              						"rawValue",
              						lv_rawValue_1_0,
              						"org.eclipse.n4js.N4JS.TemplateMiddleLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_NumericLiteral_0 = null;

        EObject this_BooleanLiteral_1 = null;

        EObject this_StringLiteral_2 = null;

        EObject this_NullLiteral_3 = null;

        EObject this_RegularExpressionLiteral_4 = null;



        	enterRule();

        try {
            {
            int alt386=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt386=1;
                }
                break;
            case False:
            case True:
                {
                alt386=2;
                }
                break;
            case RULE_STRING:
                {
                alt386=3;
                }
                break;
            case Null:
                {
                alt386=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt386=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);

                throw nvae;
            }

            switch (alt386) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteral_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NumericLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BooleanLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringLiteral_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NullLiteral_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularExpressionLiteral_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RegularExpressionLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBooleanLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_true_1_0=null;
        Token otherlv_2=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
              			
            }

            }
            int alt387=2;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==True) ) {
                alt387=1;
            }
            else if ( (LA387_0==False) ) {
                alt387=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);

                throw nvae;
            }
            switch (alt387) {
                case 1 :
                    {
                    {
                    {
                    lv_true_1_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "true", true, "true");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNumericLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteral=ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_DoubleLiteral_0 = null;

        EObject this_IntLiteral_1 = null;

        EObject this_BinaryIntLiteral_2 = null;

        EObject this_OctalIntLiteral_3 = null;

        EObject this_LegacyOctalIntLiteral_4 = null;

        EObject this_HexIntLiteral_5 = null;

        EObject this_ScientificIntLiteral_6 = null;



        	enterRule();

        try {
            {
            int alt388=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt388=1;
                }
                break;
            case RULE_INT:
                {
                alt388=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt388=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt388=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt388=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt388=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt388=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 388, 0, input);

                throw nvae;
            }

            switch (alt388) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoubleLiteral_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoubleLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntLiteral_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BinaryIntLiteral_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BinaryIntLiteral_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OctalIntLiteral_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OctalIntLiteral_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyOctalIntLiteral_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyOctalIntLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_HexIntLiteral_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_HexIntLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScientificIntLiteral_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScientificIntLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoubleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDoubleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoubleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoubleLiteral=ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoubleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoubleLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getDoubleLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.DOUBLE");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntLiteral=ruleIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOctalIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOctalIntLiteral=ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.OCTAL_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLegacyOctalIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyOctalIntLiteral=ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getLegacyOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.LEGACY_OCTAL_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleHexIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHexIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHexIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHexIntLiteral=ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHexIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleHexIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getHexIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.HEX_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBinaryIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBinaryIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBinaryIntLiteral=ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBinaryIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getBinaryIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.BINARY_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScientificIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScientificIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScientificIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScientificIntLiteral=ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScientificIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScientificIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getScientificIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.SCIENTIFIC_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularExpressionLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularExpressionLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getRegularExpressionLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.REGEX_LITERAL");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleNumericLiteralAsString() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumericLiteralAsString = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralAsStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralAsString=ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralAsString.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleNumericLiteralAsString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_DOUBLE_0=null;
        Token this_INT_1=null;
        Token this_OCTAL_INT_2=null;
        Token this_HEX_INT_3=null;
        Token this_SCIENTIFIC_INT_4=null;


        	enterRule();

        try {
            {
            int alt389=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt389=1;
                }
                break;
            case RULE_INT:
                {
                alt389=2;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt389=3;
                }
                break;
            case RULE_HEX_INT:
                {
                alt389=4;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt389=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 389, 0, input);

                throw nvae;
            }

            switch (alt389) {
                case 1 :
                    {
                    this_DOUBLE_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DOUBLE_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DOUBLE_0, grammarAccess.getNumericLiteralAsStringAccess().getDOUBLETerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_INT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_INT_1, grammarAccess.getNumericLiteralAsStringAccess().getINTTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    this_OCTAL_INT_2=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_OCTAL_INT_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_OCTAL_INT_2, grammarAccess.getNumericLiteralAsStringAccess().getOCTAL_INTTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    this_HEX_INT_3=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_INT_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_INT_3, grammarAccess.getNumericLiteralAsStringAccess().getHEX_INTTerminalRuleCall_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    this_SCIENTIFIC_INT_4=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SCIENTIFIC_INT_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SCIENTIFIC_INT_4, grammarAccess.getNumericLiteralAsStringAccess().getSCIENTIFIC_INTTerminalRuleCall_4());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierOrThis() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierOrThis = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierOrThisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierOrThis=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierOrThis.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierOrThis() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;


        	enterRule();

        try {
            {
            int alt390=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt390=1;
                }
                break;
            case This:
                {
                alt390=2;
                }
                break;
            case Promisify:
                {
                alt390=3;
                }
                break;
            case Target:
                {
                alt390=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 390, 0, input);

                throw nvae;
            }

            switch (alt390) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierOrThisAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAnnotationName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAnnotationName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationName=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAnnotationName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;


        	enterRule();

        try {
            {
            int alt391=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt391=1;
                }
                break;
            case This:
                {
                alt391=2;
                }
                break;
            case Target:
                {
                alt391=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 391, 0, input);

                throw nvae;
            }

            switch (alt391) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAnnotationNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleREGEX_LITERAL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleREGEX_LITERAL = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getREGEX_LITERALRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleREGEX_LITERAL=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleREGEX_LITERAL.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleREGEX_LITERAL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_REGEX_TAIL_2=null;


        	enterRule();
        	setInRegularExpression();

        try {
            {
            {
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==Solidus) ) {
                alt392=1;
            }
            else if ( (LA392_0==SolidusEqualsSign) ) {
                alt392=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 392, 0, input);

                throw nvae;
            }
            switch (alt392) {
                case 1 :
                    {
                    kw=(Token)match(input,Solidus,FOLLOW_131); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_131); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                      			
                    }

                    }
                    break;

            }
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==RULE_REGEX_TAIL) ) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    this_REGEX_TAIL_2=(Token)match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_REGEX_TAIL_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_REGEX_TAIL_2, grammarAccess.getREGEX_LITERALAccess().getREGEX_TAILTerminalRuleCall_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateTailLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateTailLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTailLiteral=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTailLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateTailLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_TEMPLATE_END_0=null;


        	enterRule();

        try {
            {
            int alt394=2;
            int LA394_0 = input.LA(1);

            if ( (LA394_0==RULE_TEMPLATE_END) ) {
                alt394=1;
            }
            switch (alt394) {
                case 1 :
                    {
                    this_TEMPLATE_END_0=(Token)match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TEMPLATE_END_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_TEMPLATE_END_0, grammarAccess.getTemplateTailLiteralAccess().getTEMPLATE_ENDTerminalRuleCall());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateMiddleLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateMiddleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddleLiteral=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateMiddleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_TEMPLATE_MIDDLE_0=null;


        	enterRule();

        try {
            {
            this_TEMPLATE_MIDDLE_0=(Token)match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_TEMPLATE_MIDDLE_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_TEMPLATE_MIDDLE_0, grammarAccess.getTemplateMiddleLiteralAccess().getTEMPLATE_MIDDLETerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleSemi() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSemi = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSemiRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSemi=ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSemi.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleSemi() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule();
        		int marker = input.mark();
        		promoteEOL();    
        try {
            int alt395=3;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt395=1;
                }
                break;
            case EOF:
            case RULE_ML_COMMENT:
            case RULE_EOL:
                {
                alt395=2;
                }
                break;
            case RightCurlyBracket:
                {
                alt395=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);

                throw nvae;
            }

            switch (alt395) {
                case 1 :
                    {
                    kw=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                          
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)input.LT(1);
                    if ( input.LA(1)==EOF||input.LA(1)==RULE_ML_COMMENT||input.LA(1)==RULE_EOL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {

                              addASIMessage();
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                          
                    }

                    }
                    break;
                case 3 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement START
 public final EObject ruleNoLineTerminator(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedEOL()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement END
    public final EObject entryRuleAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotation=ruleAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_132); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptAnnotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptAnnotation=ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_132); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationNoAtSign = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNoAtSignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationNoAtSign=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationNoAtSign; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_args_2_0 = null;

        EObject lv_args_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNameAnnotationNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_99);
            lv_name_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt399=2;
            alt399 = dfa399.predict(input);
            switch (alt399) {
                case 1 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_133); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                      				
                    }

                    }
                    int alt398=2;
                    int LA398_0 = input.LA(1);

                    if ( ((LA398_0>=Intersection && LA398_0<=Constructor)||LA398_0==Promisify||LA398_0==Target||LA398_0==Await||LA398_0==False||LA398_0==Union||LA398_0==This||(LA398_0>=Null && LA398_0<=Void)||LA398_0==SolidusEqualsSign||LA398_0==LeftParenthesis||LA398_0==Solidus||LA398_0==LeftSquareBracket||LA398_0==LeftCurlyBracket||LA398_0==Tilde||LA398_0==RULE_DOUBLE||(LA398_0>=RULE_HEX_INT && LA398_0<=RULE_LEGACY_OCTAL_INT)||LA398_0==RULE_SCIENTIFIC_INT||LA398_0==RULE_IDENTIFIER||LA398_0==RULE_STRING||LA398_0==RULE_INT) ) {
                        alt398=1;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_53);
                            lv_args_2_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_2_0,
                              								"org.eclipse.n4js.N4JS.AnnotationArgument");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            loop397:
                            do {
                                int alt397=2;
                                int LA397_0 = input.LA(1);

                                if ( (LA397_0==Comma) ) {
                                    alt397=1;
                                }


                                switch (alt397) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_134); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_3, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_53);
                            	    lv_args_4_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_4_0,
                            	      									"org.eclipse.n4js.N4JS.AnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop397;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationArgument=ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject this_LiteralAnnotationArgument_0 = null;

        EObject this_TypeRefAnnotationArgument_1 = null;



        	enterRule();

        try {
            {
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==False||LA400_0==Null||LA400_0==True||LA400_0==SolidusEqualsSign||LA400_0==Solidus||LA400_0==RULE_DOUBLE||(LA400_0>=RULE_HEX_INT && LA400_0<=RULE_LEGACY_OCTAL_INT)||LA400_0==RULE_SCIENTIFIC_INT||LA400_0==RULE_STRING||LA400_0==RULE_INT) ) {
                alt400=1;
            }
            else if ( ((LA400_0>=Intersection && LA400_0<=Constructor)||LA400_0==Promisify||LA400_0==Target||LA400_0==Await||LA400_0==Union||LA400_0==This||LA400_0==This_1||(LA400_0>=Type && LA400_0<=Void)||LA400_0==LeftParenthesis||LA400_0==LeftSquareBracket||LA400_0==LeftCurlyBracket||LA400_0==Tilde||LA400_0==RULE_IDENTIFIER) ) {
                alt400=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);

                throw nvae;
            }
            switch (alt400) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralAnnotationArgument_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LiteralAnnotationArgument_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefAnnotationArgument_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefAnnotationArgument_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralAnnotationArgument=ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_literal_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_literal_0_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getLiteralAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"literal",
              					lv_literal_0_0,
              					"org.eclipse.n4js.N4JS.Literal");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefAnnotationArgument=ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_typeRef_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefTypeRefParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_0_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeRefAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"typeRef",
              					lv_typeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefForCast() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefForCast = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefForCastRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefForCast=ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefForCast; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefForCast() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ArrayTypeRef_1 = null;

        EObject this_ThisTypeRef_2 = null;

        EObject this_TypeTypeRef_3 = null;

        EObject this_ArrowFunctionTypeExpression_4 = null;

        EObject this_FunctionTypeExpressionOLD_5 = null;

        EObject this_UnionTypeExpressionOLD_6 = null;

        EObject this_IntersectionTypeExpressionOLD_7 = null;



        	enterRule();

        try {
            {
            int alt401=8;
            alt401 = dfa401.predict(input);
            switch (alt401) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeRef_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRef_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_4=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowFunctionTypeExpression_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_5=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationList=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationList() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_annotations_2_0 = null;

        EObject lv_annotations_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAnnotationListAccess().getAnnotationListAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_132); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_135);
            lv_annotations_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getAnnotationListRule());
              							}
              							add(
              								current,
              								"annotations",
              								lv_annotations_2_0,
              								"org.eclipse.n4js.N4JS.AnnotationNoAtSign");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            loop402:
            do {
                int alt402=2;
                int LA402_0 = input.LA(1);

                if ( (LA402_0==CommercialAt) ) {
                    alt402=1;
                }


                switch (alt402) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_annotations_3_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_3_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop402;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnnotationList=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionAnnotationListAccess().getExpressionAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt403=0;
            loop403:
            do {
                int alt403=2;
                int LA403_0 = input.LA(1);

                if ( (LA403_0==CommercialAt) ) {
                    alt403=1;
                }


                switch (alt403) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpressionAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt403 >= 1 ) break loop403;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(403, input);
                        throw eee;
                }
                cnt403++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyAssignmentAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignmentAnnotationList=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignmentAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getPropertyAssignmentAnnotationListAccess().getPropertyAssignmentAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt404=0;
            loop404:
            do {
                int alt404=2;
                int LA404_0 = input.LA(1);

                if ( (LA404_0==CommercialAt) ) {
                    alt404=1;
                }


                switch (alt404) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyAssignmentAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt404 >= 1 ) break loop404;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(404, input);
                        throw eee;
                }
                cnt404++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MemberAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberAnnotationList=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4MemberAnnotationListAccess().getN4MemberAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt405=0;
            loop405:
            do {
                int alt405=2;
                int LA405_0 = input.LA(1);

                if ( (LA405_0==CommercialAt) ) {
                    alt405=1;
                }


                switch (alt405) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4MemberAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt405 >= 1 ) break loop405;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(405, input);
                        throw eee;
                }
                cnt405++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_QualifiedTypeReferenceName_5 = null;



        	enterRule();

        try {
            {
            int alt406=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt406=1;
                }
                break;
            case This:
                {
                alt406=2;
                }
                break;
            case Await:
                {
                alt406=3;
                }
                break;
            case Promisify:
                {
                alt406=4;
                }
                break;
            case Target:
                {
                alt406=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt406=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeReferenceNameAccess().getQualifiedTypeReferenceNameParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_QualifiedTypeReferenceName_5=ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_QualifiedTypeReferenceName_5);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleQualifiedTypeReferenceName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQualifiedTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQualifiedTypeReferenceName=ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQualifiedTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleQualifiedTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;
        Token this_IDENTIFIER_2=null;


        	enterRule();

        try {
            {
            {
            this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_136); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_IDENTIFIER_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_IDENTIFIER_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_0());
              		
            }
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==FullStop) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    {
                    kw=(Token)match(input,FullStop,FOLLOW_137); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0());
                      			
                    }
                    this_IDENTIFIER_2=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_IDENTIFIER_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualifiedTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4ClassDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassDeclaration=ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_3_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_TypeVariables_5 = null;

        EObject this_ClassExtendsClause_6 = null;

        EObject this_Members_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4ClassDeclarationAccess().getN4ClassDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop408:
            do {
                int alt408=2;
                int LA408_0 = input.LA(1);

                if ( ((LA408_0>=Protected && LA408_0<=Abstract)||LA408_0==External||(LA408_0>=Private && LA408_0<=Project)||LA408_0==Public||LA408_0==Static||LA408_0==Const) ) {
                    alt408=1;
                }


                switch (alt408) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop408;
                }
            } while (true);

            otherlv_2=(Token)match(input,Class,FOLLOW_138); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2());
              				
            }
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==Tilde) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_56);
                    lv_typingStrategy_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( ((LA410_0>=Intersection && LA410_0<=Constructor)||(LA410_0>=Promisify && LA410_0<=Abstract)||LA410_0==External||(LA410_0>=Private && LA410_0<=Project)||LA410_0==Public||LA410_0==Static||LA410_0==Target||(LA410_0>=Async && LA410_0<=Await)||LA410_0==Union||(LA410_0>=Yield && LA410_0<=This)||LA410_0==From||LA410_0==Type||(LA410_0>=Get && LA410_0<=Let)||(LA410_0>=Out && LA410_0<=Set)||LA410_0==As||LA410_0==Of||LA410_0==RULE_IDENTIFIER) ) {
                alt410=1;
            }
            else if ( (LA410_0==Implements) ) {
                int LA410_2 = input.LA(2);

                if ( (LA410_2==Implements||LA410_2==Extends||LA410_2==LessThanSign||LA410_2==LeftCurlyBracket) ) {
                    alt410=1;
                }
            }
            switch (alt410) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_4_0());
                      						
                    }
                    pushFollow(FOLLOW_10);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==LessThanSign) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_TypeVariables_5=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==Implements||LA412_0==Extends) ) {
                alt412=1;
            }
            switch (alt412) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_ClassExtendsClause_6=ruleClassExtendsClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsClause_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMembers(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop413:
            do {
                int alt413=2;
                int LA413_0 = input.LA(1);

                if ( ((LA413_0>=Intersection && LA413_0<=With)||(LA413_0>=For && LA413_0<=Var)||(LA413_0>=As && LA413_0<=Of)||LA413_0==LeftParenthesis||LA413_0==Asterisk||LA413_0==LessThanSign||(LA413_0>=CommercialAt && LA413_0<=LeftSquareBracket)||LA413_0==LeftCurlyBracket||LA413_0==Tilde||LA413_0==RULE_DOUBLE||LA413_0==RULE_HEX_INT||LA413_0==RULE_OCTAL_INT||LA413_0==RULE_SCIENTIFIC_INT||LA413_0==RULE_IDENTIFIER||LA413_0==RULE_STRING||LA413_0==RULE_INT) ) {
                    alt413=1;
                }


                switch (alt413) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_89);
            	    lv_ownedMembersRaw_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop413;
                }
            } while (true);

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Members(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop414:
            do {
                int alt414=2;
                int LA414_0 = input.LA(1);

                if ( ((LA414_0>=Intersection && LA414_0<=With)||(LA414_0>=For && LA414_0<=Var)||(LA414_0>=As && LA414_0<=Of)||LA414_0==LeftParenthesis||LA414_0==Asterisk||LA414_0==LessThanSign||(LA414_0>=CommercialAt && LA414_0<=LeftSquareBracket)||LA414_0==LeftCurlyBracket||LA414_0==Tilde||LA414_0==RULE_DOUBLE||LA414_0==RULE_HEX_INT||LA414_0==RULE_OCTAL_INT||LA414_0==RULE_SCIENTIFIC_INT||LA414_0==RULE_IDENTIFIER||LA414_0==RULE_STRING||LA414_0==RULE_INT) ) {
                    alt414=1;
                }


                switch (alt414) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_89);
            	    lv_ownedMembersRaw_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop414;
                }
            } while (true);

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_6=null;
        EObject lv_superClassRef_1_0 = null;

        EObject this_ClassImplementsList_4 = null;

        EObject lv_superClassExpression_5_0 = null;

        EObject this_ClassImplementsList_7 = null;



        	enterRule();

        try {
            {
            int alt418=2;
            int LA418_0 = input.LA(1);

            if ( (LA418_0==Extends) ) {
                alt418=1;
            }
            else if ( (LA418_0==Implements) ) {
                alt418=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);

                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      			
                    }
                    int alt417=2;
                    int LA417_0 = input.LA(1);

                    if ( (LA417_0==Void) && (synpred268_InternalN4JSParser())) {
                        alt417=1;
                    }
                    else if ( (LA417_0==This) ) {
                        int LA417_2 = input.LA(2);

                        if ( (synpred268_InternalN4JSParser()) ) {
                            alt417=1;
                        }
                        else if ( (true) ) {
                            alt417=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 417, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA417_0==Await) ) {
                        int LA417_3 = input.LA(2);

                        if ( (synpred268_InternalN4JSParser()) ) {
                            alt417=1;
                        }
                        else if ( (true) ) {
                            alt417=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 417, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA417_0==Promisify) ) {
                        int LA417_4 = input.LA(2);

                        if ( (synpred268_InternalN4JSParser()) ) {
                            alt417=1;
                        }
                        else if ( (true) ) {
                            alt417=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 417, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA417_0==Target) ) {
                        int LA417_5 = input.LA(2);

                        if ( (synpred268_InternalN4JSParser()) ) {
                            alt417=1;
                        }
                        else if ( (true) ) {
                            alt417=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 417, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA417_0==RULE_IDENTIFIER) ) {
                        int LA417_6 = input.LA(2);

                        if ( (synpred268_InternalN4JSParser()) ) {
                            alt417=1;
                        }
                        else if ( (true) ) {
                            alt417=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 417, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA417_0>=Intersection && LA417_0<=Implements)||(LA417_0>=Interface && LA417_0<=Abstract)||(LA417_0>=External && LA417_0<=Function)||(LA417_0>=Private && LA417_0<=Project)||LA417_0==Public||LA417_0==Static||LA417_0==Async||LA417_0==Class||(LA417_0>=False && LA417_0<=Super)||LA417_0==Union||LA417_0==Yield||(LA417_0>=From && LA417_0<=Type)||(LA417_0>=Get && LA417_0<=Set)||LA417_0==SolidusEqualsSign||LA417_0==As||LA417_0==Of||LA417_0==LeftParenthesis||LA417_0==Solidus||LA417_0==LessThanSign||(LA417_0>=CommercialAt && LA417_0<=LeftSquareBracket)||LA417_0==LeftCurlyBracket||LA417_0==RULE_DOUBLE||(LA417_0>=RULE_HEX_INT && LA417_0<=RULE_LEGACY_OCTAL_INT)||LA417_0==RULE_SCIENTIFIC_INT||LA417_0==RULE_STRING||(LA417_0>=RULE_TEMPLATE_HEAD && LA417_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA417_0==RULE_INT) ) {
                        alt417=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 0, input);

                        throw nvae;
                    }
                    switch (alt417) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0());
                              							
                            }
                            pushFollow(FOLLOW_140);
                            lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                              								}
                              								set(
                              									current,
                              									"superClassRef",
                              									lv_superClassRef_1_0,
                              									"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }
                            int alt416=2;
                            int LA416_0 = input.LA(1);

                            if ( (LA416_0==Implements||LA416_0==Extends) ) {
                                alt416=1;
                            }
                            switch (alt416) {
                                case 1 :
                                    {
                                    int alt415=2;
                                    int LA415_0 = input.LA(1);

                                    if ( (LA415_0==Implements) ) {
                                        alt415=1;
                                    }
                                    else if ( (LA415_0==Extends) ) {
                                        alt415=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 415, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt415) {
                                        case 1 :
                                            {
                                            otherlv_2=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              								newLeafNode(otherlv_2, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              							
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            otherlv_3=(Token)match(input,Extends,FOLLOW_141); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              								newLeafNode(otherlv_3, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              							
                                            }

                                            }
                                            break;

                                    }

                                    if ( state.backtracking==0 ) {

                                      							if (current==null) {
                                      								current = createModelElement(grammarAccess.getClassExtendsClauseRule());
                                      							}
                                      							newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1());
                                      						
                                    }
                                    pushFollow(FOLLOW_2);
                                    this_ClassImplementsList_4=ruleClassImplementsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							current = this_ClassImplementsList_4;
                                      							afterParserOrEnumRuleCall();
                                      						
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_superClassExpression_5_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                              							}
                              							set(
                              								current,
                              								"superClassExpression",
                              								lv_superClassExpression_5_0,
                              								"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_6=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsClauseRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ClassImplementsList_7=ruleClassImplementsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassImplementsList_7;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_6=null;
        EObject lv_superClassRef_1_0 = null;

        EObject this_ClassImplementsList_4 = null;

        EObject lv_superClassExpression_5_0 = null;

        EObject this_ClassImplementsList_7 = null;



        	enterRule();

        try {
            {
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==Extends) ) {
                alt422=1;
            }
            else if ( (LA422_0==Implements) ) {
                alt422=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);

                throw nvae;
            }
            switch (alt422) {
                case 1 :
                    {
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      			
                    }
                    int alt421=2;
                    int LA421_0 = input.LA(1);

                    if ( (LA421_0==Void) && (synpred269_InternalN4JSParser())) {
                        alt421=1;
                    }
                    else if ( (LA421_0==This) ) {
                        int LA421_2 = input.LA(2);

                        if ( (synpred269_InternalN4JSParser()) ) {
                            alt421=1;
                        }
                        else if ( (true) ) {
                            alt421=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 421, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA421_0==Await) ) {
                        int LA421_3 = input.LA(2);

                        if ( (synpred269_InternalN4JSParser()) ) {
                            alt421=1;
                        }
                        else if ( (true) ) {
                            alt421=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 421, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA421_0==Promisify) ) {
                        int LA421_4 = input.LA(2);

                        if ( (synpred269_InternalN4JSParser()) ) {
                            alt421=1;
                        }
                        else if ( (true) ) {
                            alt421=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 421, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA421_0==Target) ) {
                        int LA421_5 = input.LA(2);

                        if ( (synpred269_InternalN4JSParser()) ) {
                            alt421=1;
                        }
                        else if ( (true) ) {
                            alt421=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 421, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA421_0==RULE_IDENTIFIER) ) {
                        int LA421_6 = input.LA(2);

                        if ( (synpred269_InternalN4JSParser()) ) {
                            alt421=1;
                        }
                        else if ( (true) ) {
                            alt421=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 421, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA421_0>=Intersection && LA421_0<=Implements)||(LA421_0>=Interface && LA421_0<=Abstract)||(LA421_0>=External && LA421_0<=Function)||(LA421_0>=Private && LA421_0<=Project)||LA421_0==Public||LA421_0==Static||LA421_0==Async||LA421_0==Class||(LA421_0>=False && LA421_0<=Super)||LA421_0==Union||(LA421_0>=From && LA421_0<=Type)||(LA421_0>=Get && LA421_0<=Set)||LA421_0==SolidusEqualsSign||LA421_0==As||LA421_0==Of||LA421_0==LeftParenthesis||LA421_0==Solidus||LA421_0==LessThanSign||(LA421_0>=CommercialAt && LA421_0<=LeftSquareBracket)||LA421_0==LeftCurlyBracket||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_HEX_INT && LA421_0<=RULE_LEGACY_OCTAL_INT)||LA421_0==RULE_SCIENTIFIC_INT||LA421_0==RULE_STRING||(LA421_0>=RULE_TEMPLATE_HEAD && LA421_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_0==RULE_INT) ) {
                        alt421=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 421, 0, input);

                        throw nvae;
                    }
                    switch (alt421) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0());
                              							
                            }
                            pushFollow(FOLLOW_140);
                            lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                              								}
                              								set(
                              									current,
                              									"superClassRef",
                              									lv_superClassRef_1_0,
                              									"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }
                            int alt420=2;
                            int LA420_0 = input.LA(1);

                            if ( (LA420_0==Implements||LA420_0==Extends) ) {
                                alt420=1;
                            }
                            switch (alt420) {
                                case 1 :
                                    {
                                    int alt419=2;
                                    int LA419_0 = input.LA(1);

                                    if ( (LA419_0==Implements) ) {
                                        alt419=1;
                                    }
                                    else if ( (LA419_0==Extends) ) {
                                        alt419=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 419, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt419) {
                                        case 1 :
                                            {
                                            otherlv_2=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              								newLeafNode(otherlv_2, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              							
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            otherlv_3=(Token)match(input,Extends,FOLLOW_141); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              								newLeafNode(otherlv_3, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              							
                                            }

                                            }
                                            break;

                                    }

                                    if ( state.backtracking==0 ) {

                                      							if (current==null) {
                                      								current = createModelElement(grammarAccess.getClassExtendsClauseRule());
                                      							}
                                      							newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1());
                                      						
                                    }
                                    pushFollow(FOLLOW_2);
                                    this_ClassImplementsList_4=ruleClassImplementsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							current = this_ClassImplementsList_4;
                                      							afterParserOrEnumRuleCall();
                                      						
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_superClassExpression_5_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                              							}
                              							set(
                              								current,
                              								"superClassExpression",
                              								lv_superClassExpression_5_0,
                              								"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_6=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsClauseRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ClassImplementsList_7=ruleClassImplementsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassImplementsList_7;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_implementedInterfaceRefs_0_0 = null;

        EObject lv_implementedInterfaceRefs_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_142);
            lv_implementedInterfaceRefs_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
              					}
              					add(
              						current,
              						"implementedInterfaceRefs",
              						lv_implementedInterfaceRefs_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop424:
            do {
                int alt424=2;
                int LA424_0 = input.LA(1);

                if ( (LA424_0==Implements||LA424_0==Extends||LA424_0==Comma) ) {
                    alt424=1;
                }


                switch (alt424) {
            	case 1 :
            	    {
            	    int alt423=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt423=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt423=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt423=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 423, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt423) {
            	        case 1 :
            	            {
            	            otherlv_1=(Token)match(input,Comma,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_1, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_2=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_2, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1());
            	              				
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            otherlv_3=(Token)match(input,Extends,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2());
            	              				
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_implementedInterfaceRefs_4_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"implementedInterfaceRefs",
            	      							lv_implementedInterfaceRefs_4_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop424;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4ClassExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassExpression=ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ClassExtendsClause_3 = null;

        EObject this_Members_4 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Class,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              		
            }
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( ((LA425_0>=Intersection && LA425_0<=Constructor)||(LA425_0>=Promisify && LA425_0<=Abstract)||LA425_0==External||(LA425_0>=Private && LA425_0<=Project)||LA425_0==Public||LA425_0==Static||LA425_0==Target||(LA425_0>=Async && LA425_0<=Await)||LA425_0==Union||(LA425_0>=Yield && LA425_0<=This)||LA425_0==From||LA425_0==Type||(LA425_0>=Get && LA425_0<=Let)||(LA425_0>=Out && LA425_0<=Set)||LA425_0==As||LA425_0==Of||LA425_0==RULE_IDENTIFIER) ) {
                alt425=1;
            }
            else if ( (LA425_0==Implements) ) {
                int LA425_2 = input.LA(2);

                if ( (LA425_2==Implements||LA425_2==Extends||LA425_2==LeftCurlyBracket) ) {
                    alt425=1;
                }
            }
            switch (alt425) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    lv_name_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==Implements||LA426_0==Extends) ) {
                alt426=1;
            }
            switch (alt426) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_ClassExtendsClause_3=ruleClassExtendsClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsClause_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_4=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ClassExtendsClause_3 = null;

        EObject this_Members_4 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Class,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              		
            }
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( ((LA427_0>=Intersection && LA427_0<=Constructor)||(LA427_0>=Promisify && LA427_0<=Abstract)||LA427_0==External||(LA427_0>=Private && LA427_0<=Project)||LA427_0==Public||LA427_0==Static||LA427_0==Target||(LA427_0>=Async && LA427_0<=Await)||LA427_0==Union||LA427_0==This||LA427_0==From||LA427_0==Type||(LA427_0>=Get && LA427_0<=Let)||(LA427_0>=Out && LA427_0<=Set)||LA427_0==As||LA427_0==Of||LA427_0==RULE_IDENTIFIER) ) {
                alt427=1;
            }
            else if ( (LA427_0==Implements) ) {
                int LA427_2 = input.LA(2);

                if ( (LA427_2==Implements||LA427_2==Extends||LA427_2==LeftCurlyBracket) ) {
                    alt427=1;
                }
            }
            switch (alt427) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_name_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt428=2;
            int LA428_0 = input.LA(1);

            if ( (LA428_0==Implements||LA428_0==Extends) ) {
                alt428=1;
            }
            switch (alt428) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_57);
                    this_ClassExtendsClause_3=norm1_ClassExtendsClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsClause_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_4=norm1_Members(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4InterfaceDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4InterfaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4InterfaceDeclaration=ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4InterfaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_3_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_TypeVariables_5 = null;

        EObject this_InterfaceImplementsList_6 = null;

        EObject this_Members_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4InterfaceDeclarationAccess().getN4InterfaceDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop429:
            do {
                int alt429=2;
                int LA429_0 = input.LA(1);

                if ( ((LA429_0>=Protected && LA429_0<=Abstract)||LA429_0==External||(LA429_0>=Private && LA429_0<=Project)||LA429_0==Public||LA429_0==Static||LA429_0==Const) ) {
                    alt429=1;
                }


                switch (alt429) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_11);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop429;
                }
            } while (true);

            otherlv_2=(Token)match(input,Interface,FOLLOW_138); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2());
              				
            }
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( (LA430_0==Tilde) ) {
                alt430=1;
            }
            switch (alt430) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_56);
                    lv_typingStrategy_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt431=2;
            int LA431_0 = input.LA(1);

            if ( ((LA431_0>=Intersection && LA431_0<=Constructor)||(LA431_0>=Promisify && LA431_0<=Abstract)||LA431_0==External||(LA431_0>=Private && LA431_0<=Project)||LA431_0==Public||LA431_0==Static||LA431_0==Target||(LA431_0>=Async && LA431_0<=Await)||LA431_0==Union||(LA431_0>=Yield && LA431_0<=This)||LA431_0==From||LA431_0==Type||(LA431_0>=Get && LA431_0<=Let)||(LA431_0>=Out && LA431_0<=Set)||LA431_0==As||LA431_0==Of||LA431_0==RULE_IDENTIFIER) ) {
                alt431=1;
            }
            else if ( (LA431_0==Implements) ) {
                int LA431_2 = input.LA(2);

                if ( (LA431_2==Implements||LA431_2==Extends||LA431_2==LessThanSign||LA431_2==LeftCurlyBracket) ) {
                    alt431=1;
                }
            }
            switch (alt431) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_4_0());
                      						
                    }
                    pushFollow(FOLLOW_10);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==LessThanSign) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_TypeVariables_5=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt433=2;
            int LA433_0 = input.LA(1);

            if ( (LA433_0==Implements||LA433_0==Extends) ) {
                alt433=1;
            }
            switch (alt433) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_InterfaceImplementsList_6=ruleInterfaceImplementsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_InterfaceImplementsList_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleInterfaceImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_superInterfaceRefs_2_0 = null;

        EObject lv_superInterfaceRefs_6_0 = null;



        	enterRule();

        try {
            {
            {
            int alt434=2;
            int LA434_0 = input.LA(1);

            if ( (LA434_0==Extends) ) {
                alt434=1;
            }
            else if ( (LA434_0==Implements) ) {
                alt434=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);

                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_141); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    otherlv_1=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1());
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_142);
            lv_superInterfaceRefs_2_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInterfaceImplementsListRule());
              					}
              					add(
              						current,
              						"superInterfaceRefs",
              						lv_superInterfaceRefs_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop436:
            do {
                int alt436=2;
                int LA436_0 = input.LA(1);

                if ( (LA436_0==Implements||LA436_0==Extends||LA436_0==Comma) ) {
                    alt436=1;
                }


                switch (alt436) {
            	case 1 :
            	    {
            	    int alt435=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt435=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt435=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt435=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 435, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt435) {
            	        case 1 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_4=(Token)match(input,Implements,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_4, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1());
            	              				
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            otherlv_5=(Token)match(input,Extends,FOLLOW_141); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_5, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2());
            	              				
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_superInterfaceRefs_6_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInterfaceImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"superInterfaceRefs",
            	      							lv_superInterfaceRefs_6_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop436;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4EnumDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumDeclaration=ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject lv_literals_5_0 = null;

        EObject lv_literals_7_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop437:
            do {
                int alt437=2;
                int LA437_0 = input.LA(1);

                if ( ((LA437_0>=Protected && LA437_0<=Abstract)||LA437_0==External||(LA437_0>=Private && LA437_0<=Project)||LA437_0==Public||LA437_0==Static||LA437_0==Const) ) {
                    alt437=1;
                }


                switch (alt437) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop437;
                }
            } while (true);

            otherlv_2=(Token)match(input,Enum,FOLLOW_143); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
              				
            }
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( ((LA438_0>=Intersection && LA438_0<=Implements)||(LA438_0>=Promisify && LA438_0<=Abstract)||LA438_0==External||(LA438_0>=Private && LA438_0<=Project)||LA438_0==Public||LA438_0==Static||LA438_0==Target||(LA438_0>=Async && LA438_0<=Await)||LA438_0==Union||(LA438_0>=Yield && LA438_0<=This)||LA438_0==From||LA438_0==Type||(LA438_0>=Get && LA438_0<=Let)||(LA438_0>=Out && LA438_0<=Set)||LA438_0==As||LA438_0==Of||LA438_0==RULE_IDENTIFIER) ) {
                alt438=1;
            }
            switch (alt438) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }


            }


            }

            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_144); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==Promisify||LA440_0==Target||LA440_0==This||LA440_0==RULE_IDENTIFIER) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_5_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop439:
                    do {
                        int alt439=2;
                        int LA439_0 = input.LA(1);

                        if ( (LA439_0==Comma) ) {
                            alt439=1;
                        }


                        switch (alt439) {
                    	case 1 :
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_6, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_7_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_7_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop439;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4EnumLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumLiteral=ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_value_2_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getNameIdentifierOrThisParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_name_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierOrThis");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( (LA441_0==Colon) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                      			
                    }
                    {
                    {
                    lv_value_2_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_2_0, grammarAccess.getN4EnumLiteralAccess().getValueSTRINGTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4EnumLiteralRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.STRING");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MemberDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberDeclaration=ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedN4MemberDeclaration_0 = null;

        EObject this_N4GetterDeclaration_1 = null;

        EObject this_N4SetterDeclaration_2 = null;

        EObject this_N4MethodDeclaration_3 = null;

        EObject this_N4FieldDeclaration_4 = null;

        EObject this_N4CallableConstructorDeclaration_5 = null;



        	enterRule();

        try {
            {
            int alt442=6;
            alt442 = dfa442.predict(input);
            switch (alt442) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedN4MemberDeclaration_0 = null;

        EObject this_N4GetterDeclaration_1 = null;

        EObject this_N4SetterDeclaration_2 = null;

        EObject this_N4MethodDeclaration_3 = null;

        EObject this_N4FieldDeclaration_4 = null;

        EObject this_N4CallableConstructorDeclaration_5 = null;



        	enterRule();

        try {
            {
            int alt443=6;
            alt443 = dfa443.predict(input);
            switch (alt443) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedN4MemberDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedN4MemberDeclaration=ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_GetterHeader_3 = null;

        EObject lv_body_4_0 = null;

        Enumerator lv_declaredModifiers_7_0 = null;

        EObject lv_declaredName_9_0 = null;

        EObject lv_fpar_12_0 = null;

        EObject lv_body_14_0 = null;

        Enumerator lv_declaredModifiers_17_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject this_BogusTypeRefFragment_19 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsReturnAndBody_22 = null;

        EObject this_AsyncNoTrailingLineBreak_23 = null;

        EObject lv_declaredName_24_0 = null;

        EObject this_MethodParamsReturnAndBody_25 = null;

        EObject this_FieldDeclarationImpl_28 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_145);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt456=4;
            alt456 = dfa456.predict(input);
            switch (alt456) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop444:
                    do {
                        int alt444=2;
                        int LA444_0 = input.LA(1);

                        if ( ((LA444_0>=Protected && LA444_0<=Abstract)||LA444_0==External||(LA444_0>=Private && LA444_0<=Project)||LA444_0==Public||LA444_0==Static||LA444_0==Const) ) {
                            alt444=1;
                        }


                        switch (alt444) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_146);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop444;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                      						
                    }
                    pushFollow(FOLLOW_147);
                    this_GetterHeader_3=ruleGetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt445=2;
                    alt445 = dfa445.predict(input);
                    switch (alt445) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_95);
                            lv_body_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt446=2;
                    int LA446_0 = input.LA(1);

                    if ( (LA446_0==Semicolon) ) {
                        alt446=1;
                    }
                    switch (alt446) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop447:
                    do {
                        int alt447=2;
                        int LA447_0 = input.LA(1);

                        if ( ((LA447_0>=Protected && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Const) ) {
                            alt447=1;
                        }


                        switch (alt447) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_148);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop447;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                      								
                    }
                    pushFollow(FOLLOW_93);
                    lv_declaredName_9_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt448=2;
                    int LA448_0 = input.LA(1);

                    if ( (LA448_0==QuestionMark) ) {
                        alt448=1;
                    }
                    switch (alt448) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_65);
                    lv_fpar_12_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_147); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      				
                    }
                    int alt449=2;
                    alt449 = dfa449.predict(input);
                    switch (alt449) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                              						
                            }
                            pushFollow(FOLLOW_95);
                            lv_body_14_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt450=2;
                    int LA450_0 = input.LA(1);

                    if ( (LA450_0==Semicolon) ) {
                        alt450=1;
                    }
                    switch (alt450) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop451:
                    do {
                        int alt451=2;
                        alt451 = dfa451.predict(input);
                        switch (alt451) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_145);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop451;
                        }
                    } while (true);
                    int alt452=2;
                    int LA452_0 = input.LA(1);

                    if ( (LA452_0==LessThanSign) ) {
                        alt452=1;
                    }
                    switch (alt452) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt453=2;
                    alt453 = dfa453.predict(input);
                    switch (alt453) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt454=2;
                    int LA454_0 = input.LA(1);

                    if ( (LA454_0==Asterisk) ) {
                        alt454=1;
                    }
                    else if ( ((LA454_0>=Intersection && LA454_0<=With)||(LA454_0>=For && LA454_0<=Var)||(LA454_0>=As && LA454_0<=Of)||LA454_0==LeftSquareBracket||LA454_0==RULE_DOUBLE||LA454_0==RULE_HEX_INT||LA454_0==RULE_OCTAL_INT||LA454_0==RULE_SCIENTIFIC_INT||LA454_0==RULE_IDENTIFIER||LA454_0==RULE_STRING||LA454_0==RULE_INT) ) {
                        alt454=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 454, 0, input);

                        throw nvae;
                    }
                    switch (alt454) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_40);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                              								
                            }
                            pushFollow(FOLLOW_92);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                              								
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                              										
                            }
                            pushFollow(FOLLOW_90);
                            lv_declaredName_24_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt455=2;
                    int LA455_0 = input.LA(1);

                    if ( (LA455_0==Semicolon) ) {
                        alt455=1;
                    }
                    switch (alt455) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=ruleFieldDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_GetterHeader_3 = null;

        EObject lv_body_4_0 = null;

        Enumerator lv_declaredModifiers_7_0 = null;

        EObject lv_declaredName_9_0 = null;

        EObject lv_fpar_12_0 = null;

        EObject lv_body_14_0 = null;

        Enumerator lv_declaredModifiers_17_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject this_BogusTypeRefFragment_19 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsReturnAndBody_22 = null;

        EObject this_AsyncNoTrailingLineBreak_23 = null;

        EObject lv_declaredName_24_0 = null;

        EObject this_MethodParamsReturnAndBody_25 = null;

        EObject this_FieldDeclarationImpl_28 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_145);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt469=4;
            alt469 = dfa469.predict(input);
            switch (alt469) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop457:
                    do {
                        int alt457=2;
                        int LA457_0 = input.LA(1);

                        if ( ((LA457_0>=Protected && LA457_0<=Abstract)||LA457_0==External||(LA457_0>=Private && LA457_0<=Project)||LA457_0==Public||LA457_0==Static||LA457_0==Const) ) {
                            alt457=1;
                        }


                        switch (alt457) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_146);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop457;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                      						
                    }
                    pushFollow(FOLLOW_147);
                    this_GetterHeader_3=norm1_GetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt458=2;
                    alt458 = dfa458.predict(input);
                    switch (alt458) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_95);
                            lv_body_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt459=2;
                    int LA459_0 = input.LA(1);

                    if ( (LA459_0==Semicolon) ) {
                        alt459=1;
                    }
                    switch (alt459) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop460:
                    do {
                        int alt460=2;
                        int LA460_0 = input.LA(1);

                        if ( ((LA460_0>=Protected && LA460_0<=Abstract)||LA460_0==External||(LA460_0>=Private && LA460_0<=Project)||LA460_0==Public||LA460_0==Static||LA460_0==Const) ) {
                            alt460=1;
                        }


                        switch (alt460) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_148);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop460;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                      								
                    }
                    pushFollow(FOLLOW_93);
                    lv_declaredName_9_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt461=2;
                    int LA461_0 = input.LA(1);

                    if ( (LA461_0==QuestionMark) ) {
                        alt461=1;
                    }
                    switch (alt461) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_65);
                    lv_fpar_12_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_147); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      				
                    }
                    int alt462=2;
                    alt462 = dfa462.predict(input);
                    switch (alt462) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                              						
                            }
                            pushFollow(FOLLOW_95);
                            lv_body_14_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt463=2;
                    int LA463_0 = input.LA(1);

                    if ( (LA463_0==Semicolon) ) {
                        alt463=1;
                    }
                    switch (alt463) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop464:
                    do {
                        int alt464=2;
                        alt464 = dfa464.predict(input);
                        switch (alt464) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_145);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop464;
                        }
                    } while (true);
                    int alt465=2;
                    int LA465_0 = input.LA(1);

                    if ( (LA465_0==LessThanSign) ) {
                        alt465=1;
                    }
                    switch (alt465) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt466=2;
                    alt466 = dfa466.predict(input);
                    switch (alt466) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                              							
                            }
                            pushFollow(FOLLOW_94);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt467=2;
                    int LA467_0 = input.LA(1);

                    if ( (LA467_0==Asterisk) ) {
                        alt467=1;
                    }
                    else if ( ((LA467_0>=Intersection && LA467_0<=With)||(LA467_0>=For && LA467_0<=Var)||(LA467_0>=As && LA467_0<=Of)||LA467_0==LeftSquareBracket||LA467_0==RULE_DOUBLE||LA467_0==RULE_HEX_INT||LA467_0==RULE_OCTAL_INT||LA467_0==RULE_SCIENTIFIC_INT||LA467_0==RULE_IDENTIFIER||LA467_0==RULE_STRING||LA467_0==RULE_INT) ) {
                        alt467=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 467, 0, input);

                        throw nvae;
                    }
                    switch (alt467) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_40);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                              								
                            }
                            pushFollow(FOLLOW_92);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                              								
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                              										
                            }
                            pushFollow(FOLLOW_90);
                            lv_declaredName_24_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                              									
                            }
                            pushFollow(FOLLOW_95);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt468=2;
                    int LA468_0 = input.LA(1);

                    if ( (LA468_0==Semicolon) ) {
                        alt468=1;
                    }
                    switch (alt468) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=norm1_FieldDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        EObject this_BogusTypeRefFragment_1 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_4 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            {
            {
            loop470:
            do {
                int alt470=2;
                alt470 = dfa470.predict(input);
                switch (alt470) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop470;
                }
            } while (true);
            int alt471=2;
            alt471 = dfa471.predict(input);
            switch (alt471) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_92);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_149);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt472=2;
            int LA472_0 = input.LA(1);

            if ( (LA472_0==QuestionMark) ) {
                alt472=1;
            }
            switch (alt472) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_150); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt473=2;
            int LA473_0 = input.LA(1);

            if ( (LA473_0==Colon) ) {
                alt473=1;
            }
            switch (alt473) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_151);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt474=2;
            int LA474_0 = input.LA(1);

            if ( (LA474_0==EqualsSign) ) {
                alt474=1;
            }
            switch (alt474) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        EObject this_BogusTypeRefFragment_1 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_4 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            {
            {
            loop475:
            do {
                int alt475=2;
                alt475 = dfa475.predict(input);
                switch (alt475) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop475;
                }
            } while (true);
            int alt476=2;
            alt476 = dfa476.predict(input);
            switch (alt476) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_92);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_149);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt477=2;
            int LA477_0 = input.LA(1);

            if ( (LA477_0==QuestionMark) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_150); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt478=2;
            int LA478_0 = input.LA(1);

            if ( (LA478_0==Colon) ) {
                alt478=1;
            }
            switch (alt478) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_151);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt479=2;
            int LA479_0 = input.LA(1);

            if ( (LA479_0==EqualsSign) ) {
                alt479=1;
            }
            switch (alt479) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4FieldDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4FieldDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4FieldDeclaration=ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4FieldDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_FieldDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=ruleFieldDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_FieldDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=norm1_FieldDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MethodDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MethodDeclaration=ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_4_0=null;
        Token otherlv_10=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_TypeVariables_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        EObject lv_declaredName_5_0 = null;

        EObject this_MethodParamsReturnAndBody_6 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject lv_declaredName_8_0 = null;

        EObject this_MethodParamsReturnAndBody_9 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop480:
            do {
                int alt480=2;
                alt480 = dfa480.predict(input);
                switch (alt480) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_145);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop480;
                }
            } while (true);
            int alt481=2;
            int LA481_0 = input.LA(1);

            if ( (LA481_0==LessThanSign) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_TypeVariables_2=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt482=2;
            alt482 = dfa482.predict(input);
            switch (alt482) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_BogusTypeRefFragment_3;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt483=2;
            int LA483_0 = input.LA(1);

            if ( (LA483_0==Asterisk) ) {
                alt483=1;
            }
            else if ( ((LA483_0>=Intersection && LA483_0<=With)||(LA483_0>=For && LA483_0<=Var)||(LA483_0>=As && LA483_0<=Of)||LA483_0==LeftSquareBracket||LA483_0==RULE_DOUBLE||LA483_0==RULE_HEX_INT||LA483_0==RULE_OCTAL_INT||LA483_0==RULE_SCIENTIFIC_INT||LA483_0==RULE_IDENTIFIER||LA483_0==RULE_STRING||LA483_0==RULE_INT) ) {
                alt483=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 483, 0, input);

                throw nvae;
            }
            switch (alt483) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0());
                      						
                    }
                    pushFollow(FOLLOW_92);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0());
                      								
                    }
                    pushFollow(FOLLOW_90);
                    lv_declaredName_8_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_8_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsReturnAndBody_9=ruleMethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_9;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt484=2;
            int LA484_0 = input.LA(1);

            if ( (LA484_0==Semicolon) ) {
                alt484=1;
            }
            switch (alt484) {
                case 1 :
                    {
                    otherlv_10=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_4_0=null;
        Token otherlv_10=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_TypeVariables_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        EObject lv_declaredName_5_0 = null;

        EObject this_MethodParamsReturnAndBody_6 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject lv_declaredName_8_0 = null;

        EObject this_MethodParamsReturnAndBody_9 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop485:
            do {
                int alt485=2;
                alt485 = dfa485.predict(input);
                switch (alt485) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_145);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop485;
                }
            } while (true);
            int alt486=2;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==LessThanSign) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_TypeVariables_2=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt487=2;
            alt487 = dfa487.predict(input);
            switch (alt487) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_BogusTypeRefFragment_3;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt488=2;
            int LA488_0 = input.LA(1);

            if ( (LA488_0==Asterisk) ) {
                alt488=1;
            }
            else if ( ((LA488_0>=Intersection && LA488_0<=With)||(LA488_0>=For && LA488_0<=Var)||(LA488_0>=As && LA488_0<=Of)||LA488_0==LeftSquareBracket||LA488_0==RULE_DOUBLE||LA488_0==RULE_HEX_INT||LA488_0==RULE_OCTAL_INT||LA488_0==RULE_SCIENTIFIC_INT||LA488_0==RULE_IDENTIFIER||LA488_0==RULE_STRING||LA488_0==RULE_INT) ) {
                alt488=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 488, 0, input);

                throw nvae;
            }
            switch (alt488) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_40);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0());
                      						
                    }
                    pushFollow(FOLLOW_92);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0());
                      								
                    }
                    pushFollow(FOLLOW_90);
                    lv_declaredName_8_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_8_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2());
                      							
                    }
                    pushFollow(FOLLOW_95);
                    this_MethodParamsReturnAndBody_9=ruleMethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_9;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt489=2;
            int LA489_0 = input.LA(1);

            if ( (LA489_0==Semicolon) ) {
                alt489=1;
            }
            switch (alt489) {
                case 1 :
                    {
                    otherlv_10=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4CallableConstructorDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4CallableConstructorDeclaration=ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4CallableConstructorDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==Semicolon) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==Semicolon) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject lv_body_1_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_152);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt492=2;
            int LA492_0 = input.LA(1);

            if ( (LA492_0==LeftCurlyBracket) && (synpred300_InternalN4JSParser())) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject lv_body_1_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_152);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt493=2;
            int LA493_0 = input.LA(1);

            if ( (LA493_0==LeftCurlyBracket) && (synpred301_InternalN4JSParser())) {
                alt493=1;
            }
            switch (alt493) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_153);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==Colon) ) {
                alt494=1;
            }
            switch (alt494) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_152);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt495=2;
            alt495 = dfa495.predict(input);
            switch (alt495) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_153);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt496=2;
            int LA496_0 = input.LA(1);

            if ( (LA496_0==Colon) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_152);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt497=2;
            alt497 = dfa497.predict(input);
            switch (alt497) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4GetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4GetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4GetterDeclaration=ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4GetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_GetterHeader_2 = null;

        EObject lv_body_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop498:
            do {
                int alt498=2;
                int LA498_0 = input.LA(1);

                if ( ((LA498_0>=Protected && LA498_0<=Abstract)||LA498_0==External||(LA498_0>=Private && LA498_0<=Project)||LA498_0==Public||LA498_0==Static||LA498_0==Const) ) {
                    alt498=1;
                }


                switch (alt498) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_146);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop498;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_147);
            this_GetterHeader_2=ruleGetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt499=2;
            alt499 = dfa499.predict(input);
            switch (alt499) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_95);
                    lv_body_3_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Semicolon) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_GetterHeader_2 = null;

        EObject lv_body_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop501:
            do {
                int alt501=2;
                int LA501_0 = input.LA(1);

                if ( ((LA501_0>=Protected && LA501_0<=Abstract)||LA501_0==External||(LA501_0>=Private && LA501_0<=Project)||LA501_0==Public||LA501_0==Static||LA501_0==Const) ) {
                    alt501=1;
                }


                switch (alt501) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_146);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop501;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_147);
            this_GetterHeader_2=norm1_GetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt502=2;
            alt502 = dfa502.predict(input);
            switch (alt502) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_95);
                    lv_body_3_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==Semicolon) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleGetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( ((LA504_0>=Intersection && LA504_0<=Constructor)||LA504_0==Promisify||LA504_0==Target||LA504_0==Await||LA504_0==Union||LA504_0==This||LA504_0==This_1||(LA504_0>=Type && LA504_0<=Void)||LA504_0==LeftCurlyBracket||LA504_0==Tilde||LA504_0==RULE_IDENTIFIER) ) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_154);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==QuestionMark) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==Colon) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_GetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( ((LA507_0>=Intersection && LA507_0<=Constructor)||LA507_0==Promisify||LA507_0==Target||LA507_0==Await||LA507_0==Union||LA507_0==This||LA507_0==This_1||(LA507_0>=Type && LA507_0<=Void)||LA507_0==LeftCurlyBracket||LA507_0==Tilde||LA507_0==RULE_IDENTIFIER) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_154);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==QuestionMark) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==Colon) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4SetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4SetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4SetterDeclaration=ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4SetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_fpar_6_0 = null;

        EObject lv_body_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop510:
            do {
                int alt510=2;
                int LA510_0 = input.LA(1);

                if ( ((LA510_0>=Protected && LA510_0<=Abstract)||LA510_0==External||(LA510_0>=Private && LA510_0<=Project)||LA510_0==Public||LA510_0==Static||LA510_0==Const) ) {
                    alt510=1;
                }


                switch (alt510) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_148);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop510;
                }
            } while (true);

            otherlv_2=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==QuestionMark) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_fpar_6_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            int alt512=2;
            alt512 = dfa512.predict(input);
            switch (alt512) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_95);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==Semicolon) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_fpar_6_0 = null;

        EObject lv_body_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop514:
            do {
                int alt514=2;
                int LA514_0 = input.LA(1);

                if ( ((LA514_0>=Protected && LA514_0<=Abstract)||LA514_0==External||(LA514_0>=Private && LA514_0<=Project)||LA514_0==Public||LA514_0==Static||LA514_0==Const) ) {
                    alt514=1;
                }


                switch (alt514) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_148);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop514;
                }
            } while (true);

            otherlv_2=(Token)match(input,Set,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==QuestionMark) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_fpar_6_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            int alt516=2;
            alt516 = dfa516.predict(input);
            switch (alt516) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_95);
                    lv_body_8_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==Semicolon) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingPattern=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject this_ObjectBindingPattern_0 = null;

        EObject this_ArrayBindingPattern_1 = null;



        	enterRule();

        try {
            {
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==LeftCurlyBracket) ) {
                alt518=1;
            }
            else if ( (LA518_0==LeftSquareBracket) ) {
                alt518=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 518, 0, input);

                throw nvae;
            }
            switch (alt518) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingPattern() throws RecognitionException {
        EObject current = null;

        EObject this_ObjectBindingPattern_0 = null;

        EObject this_ArrayBindingPattern_1 = null;



        	enterRule();

        try {
            {
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==LeftCurlyBracket) ) {
                alt519=1;
            }
            else if ( (LA519_0==LeftSquareBracket) ) {
                alt519=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 519, 0, input);

                throw nvae;
            }
            switch (alt519) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectBindingPattern=ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_155); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( ((LA521_0>=Intersection && LA521_0<=With)||(LA521_0>=For && LA521_0<=Var)||(LA521_0>=As && LA521_0<=Of)||(LA521_0>=CommercialAt && LA521_0<=LeftSquareBracket)||LA521_0==RULE_DOUBLE||LA521_0==RULE_HEX_INT||LA521_0==RULE_OCTAL_INT||LA521_0==RULE_SCIENTIFIC_INT||LA521_0==RULE_IDENTIFIER||LA521_0==RULE_STRING||LA521_0==RULE_INT) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop520:
                    do {
                        int alt520=2;
                        int LA520_0 = input.LA(1);

                        if ( (LA520_0==Comma) ) {
                            alt520=1;
                        }


                        switch (alt520) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop520;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_155); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( ((LA523_0>=Intersection && LA523_0<=With)||(LA523_0>=For && LA523_0<=Var)||(LA523_0>=As && LA523_0<=Of)||(LA523_0>=CommercialAt && LA523_0<=LeftSquareBracket)||LA523_0==RULE_DOUBLE||LA523_0==RULE_HEX_INT||LA523_0==RULE_OCTAL_INT||LA523_0==RULE_SCIENTIFIC_INT||LA523_0==RULE_IDENTIFIER||LA523_0==RULE_STRING||LA523_0==RULE_INT) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop522:
                    do {
                        int alt522=2;
                        int LA522_0 = input.LA(1);

                        if ( (LA522_0==Comma) ) {
                            alt522=1;
                        }


                        switch (alt522) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop522;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayBindingPattern=ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_157); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop524:
            do {
                int alt524=2;
                int LA524_0 = input.LA(1);

                if ( (LA524_0==Comma) ) {
                    alt524=1;
                }


                switch (alt524) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_elements_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop524;
                }
            } while (true);
            int alt529=2;
            int LA529_0 = input.LA(1);

            if ( ((LA529_0>=Intersection && LA529_0<=Implements)||(LA529_0>=Promisify && LA529_0<=Abstract)||LA529_0==External||(LA529_0>=Private && LA529_0<=Project)||LA529_0==Public||LA529_0==Static||LA529_0==Target||(LA529_0>=Async && LA529_0<=Await)||LA529_0==Union||(LA529_0>=Yield && LA529_0<=This)||LA529_0==From||LA529_0==Type||LA529_0==FullStopFullStopFullStop||(LA529_0>=Get && LA529_0<=Let)||(LA529_0>=Out && LA529_0<=Set)||LA529_0==As||LA529_0==Of||(LA529_0>=CommercialAt && LA529_0<=LeftSquareBracket)||LA529_0==LeftCurlyBracket||LA529_0==RULE_IDENTIFIER) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_87);
                    lv_elements_3_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop526:
                    do {
                        int alt526=2;
                        alt526 = dfa526.predict(input);
                        switch (alt526) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_158); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop525:
                    	    do {
                    	        int alt525=2;
                    	        int LA525_0 = input.LA(1);

                    	        if ( (LA525_0==Comma) ) {
                    	            alt525=1;
                    	        }


                    	        switch (alt525) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_158);
                    	    	    lv_elements_5_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop525;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_elements_6_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop526;
                        }
                    } while (true);
                    int alt528=2;
                    int LA528_0 = input.LA(1);

                    if ( (LA528_0==Comma) ) {
                        alt528=1;
                    }
                    switch (alt528) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              				
                            }
                            loop527:
                            do {
                                int alt527=2;
                                int LA527_0 = input.LA(1);

                                if ( (LA527_0==Comma) ) {
                                    alt527=1;
                                }


                                switch (alt527) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_87);
                            	    lv_elements_8_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop527;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_157); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop530:
            do {
                int alt530=2;
                int LA530_0 = input.LA(1);

                if ( (LA530_0==Comma) ) {
                    alt530=1;
                }


                switch (alt530) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_elements_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop530;
                }
            } while (true);
            int alt535=2;
            int LA535_0 = input.LA(1);

            if ( ((LA535_0>=Intersection && LA535_0<=Implements)||(LA535_0>=Promisify && LA535_0<=Abstract)||LA535_0==External||(LA535_0>=Private && LA535_0<=Project)||LA535_0==Public||LA535_0==Static||LA535_0==Target||(LA535_0>=Async && LA535_0<=Await)||LA535_0==Union||LA535_0==This||LA535_0==From||LA535_0==Type||LA535_0==FullStopFullStopFullStop||(LA535_0>=Get && LA535_0<=Let)||(LA535_0>=Out && LA535_0<=Set)||LA535_0==As||LA535_0==Of||(LA535_0>=CommercialAt && LA535_0<=LeftSquareBracket)||LA535_0==LeftCurlyBracket||LA535_0==RULE_IDENTIFIER) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_87);
                    lv_elements_3_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop532:
                    do {
                        int alt532=2;
                        alt532 = dfa532.predict(input);
                        switch (alt532) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_158); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop531:
                    	    do {
                    	        int alt531=2;
                    	        int LA531_0 = input.LA(1);

                    	        if ( (LA531_0==Comma) ) {
                    	            alt531=1;
                    	        }


                    	        switch (alt531) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_158);
                    	    	    lv_elements_5_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop531;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_87);
                    	    lv_elements_6_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop532;
                        }
                    } while (true);
                    int alt534=2;
                    int LA534_0 = input.LA(1);

                    if ( (LA534_0==Comma) ) {
                        alt534=1;
                    }
                    switch (alt534) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              				
                            }
                            loop533:
                            do {
                                int alt533=2;
                                int LA533_0 = input.LA(1);

                                if ( (LA533_0==Comma) ) {
                                    alt533=1;
                                }


                                switch (alt533) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_87);
                            	    lv_elements_8_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop533;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingProperty() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingProperty = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPropertyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingProperty=ruleBindingProperty();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingProperty; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingProperty() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;

        EObject lv_value_2_0 = null;

        EObject lv_value_3_0 = null;



        	enterRule();

        try {
            {
            int alt536=2;
            alt536 = dfa536.predict(input);
            switch (alt536) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_82);
                    lv_declaredName_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingProperty() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;

        EObject lv_value_2_0 = null;

        EObject lv_value_3_0 = null;



        	enterRule();

        try {
            {
            int alt537=2;
            alt537 = dfa537.predict(input);
            switch (alt537) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_82);
                    lv_declaredName_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSingleNameBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleNameBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleNameBinding=ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleNameBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingElement=ruleBindingElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElement() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementImpl_0 = null;



        	enterRule();

        try {
            {
            if ( state.backtracking==0 ) {

              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=ruleBindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElement() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementImpl_0 = null;



        	enterRule();

        try {
            {
            if ( state.backtracking==0 ) {

              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=norm1_BindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingRestElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingRestElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingRestElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingRestElement=ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingRestElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingRestElement() throws RecognitionException {
        EObject current = null;

        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;



        	enterRule();

        try {
            {
            {
            int alt538=2;
            int LA538_0 = input.LA(1);

            if ( (LA538_0==FullStopFullStopFullStop) ) {
                alt538=1;
            }
            switch (alt538) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=ruleBindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingRestElement() throws RecognitionException {
        EObject current = null;

        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;



        	enterRule();

        try {
            {
            {
            int alt539=2;
            int LA539_0 = input.LA(1);

            if ( (LA539_0==FullStopFullStopFullStop) ) {
                alt539=1;
            }
            switch (alt539) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=norm1_BindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_varDecl_3_0 = null;



        	enterRule();

        try {
            {
            int alt541=2;
            int LA541_0 = input.LA(1);

            if ( (LA541_0==LeftCurlyBracket) && (synpred318_InternalN4JSParser())) {
                alt541=1;
            }
            else if ( (LA541_0==LeftSquareBracket) && (synpred318_InternalN4JSParser())) {
                alt541=1;
            }
            else if ( ((LA541_0>=Intersection && LA541_0<=Implements)||(LA541_0>=Promisify && LA541_0<=Abstract)||LA541_0==External||(LA541_0>=Private && LA541_0<=Project)||LA541_0==Public||LA541_0==Static||LA541_0==Target||(LA541_0>=Async && LA541_0<=Await)||LA541_0==Union||(LA541_0>=Yield && LA541_0<=This)||LA541_0==From||LA541_0==Type||(LA541_0>=Get && LA541_0<=Let)||(LA541_0>=Out && LA541_0<=Set)||LA541_0==As||LA541_0==Of||LA541_0==CommercialAt||LA541_0==RULE_IDENTIFIER) ) {
                alt541=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 541, 0, input);

                throw nvae;
            }
            switch (alt541) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_nestedPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    int alt540=2;
                    int LA540_0 = input.LA(1);

                    if ( (LA540_0==EqualsSign) ) {
                        alt540=1;
                    }
                    switch (alt540) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                              				
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_varDecl_3_0 = null;



        	enterRule();

        try {
            {
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( (LA543_0==LeftCurlyBracket) && (synpred319_InternalN4JSParser())) {
                alt543=1;
            }
            else if ( (LA543_0==LeftSquareBracket) && (synpred319_InternalN4JSParser())) {
                alt543=1;
            }
            else if ( ((LA543_0>=Intersection && LA543_0<=Implements)||(LA543_0>=Promisify && LA543_0<=Abstract)||LA543_0==External||(LA543_0>=Private && LA543_0<=Project)||LA543_0==Public||LA543_0==Static||LA543_0==Target||(LA543_0>=Async && LA543_0<=Await)||LA543_0==Union||LA543_0==This||LA543_0==From||LA543_0==Type||(LA543_0>=Get && LA543_0<=Let)||(LA543_0>=Out && LA543_0<=Set)||LA543_0==As||LA543_0==Of||LA543_0==CommercialAt||LA543_0==RULE_IDENTIFIER) ) {
                alt543=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 543, 0, input);

                throw nvae;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_nestedPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    int alt542=2;
                    int LA542_0 = input.LA(1);

                    if ( (LA542_0==EqualsSign) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                              				
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleElision() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElision = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElisionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElision=ruleElision();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElision; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleElision() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getElisionAccess().getBindingElementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralOrComputedPropertyName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralOrComputedPropertyName=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralOrComputedPropertyName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;

        AntlrDatatypeRuleToken lv_literalName_2_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            int alt544=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt544=1;
                }
                break;
            case RULE_STRING:
                {
                alt544=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt544=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt544=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 544, 0, input);

                throw nvae;
            }

            switch (alt544) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_107);
                    lv_expression_4_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;

        AntlrDatatypeRuleToken lv_literalName_2_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            int alt545=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt545=1;
                }
                break;
            case RULE_STRING:
                {
                alt545=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt545=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt545=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 545, 0, input);

                throw nvae;
            }

            switch (alt545) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_107);
                    lv_expression_4_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_IntersectionTypeExpression_0 = null;

        EObject lv_typeRefs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_120);
            this_IntersectionTypeExpression_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_IntersectionTypeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( (LA547_0==VerticalLine) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTypeRefAccess().getUnionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int cnt546=0;
                    loop546:
                    do {
                        int alt546=2;
                        int LA546_0 = input.LA(1);

                        if ( (LA546_0==VerticalLine) ) {
                            alt546=1;
                        }


                        switch (alt546) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_97); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_120);
                    	    lv_typeRefs_3_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTypeRefRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.IntersectionTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt546 >= 1 ) break loop546;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(546, input);
                                throw eee;
                        }
                        cnt546++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PrimaryTypeExpression_0 = null;

        EObject lv_typeRefs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_PrimaryTypeExpression_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PrimaryTypeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==Ampersand) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int cnt548=0;
                    loop548:
                    do {
                        int alt548=2;
                        int LA548_0 = input.LA(1);

                        if ( (LA548_0==Ampersand) ) {
                            alt548=1;
                        }


                        switch (alt548) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_97); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_118);
                    	    lv_typeRefs_3_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt548 >= 1 ) break loop548;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(548, input);
                                throw eee;
                        }
                        cnt548++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_ArrowFunctionTypeExpression_0 = null;

        EObject this_ArrayTypeRef_1 = null;

        EObject this_TypeRefWithModifiers_2 = null;

        EObject this_TypeRef_4 = null;



        	enterRule();

        try {
            {
            int alt550=4;
            alt550 = dfa550.predict(input);
            switch (alt550) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_0=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowFunctionTypeExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeRef_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefWithModifiers_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1());
                      			
                    }
                    pushFollow(FOLLOW_65);
                    this_TypeRef_4=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithModifiers = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt551=2;
            alt551 = dfa551.predict(input);
            switch (alt551) {
                case 1 :
                    {
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithoutModifiers = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ThisTypeRef_1 = null;

        EObject this_TypeTypeRef_3 = null;

        EObject this_FunctionTypeExpressionOLD_4 = null;

        EObject this_UnionTypeExpressionOLD_5 = null;

        EObject this_IntersectionTypeExpressionOLD_6 = null;



        	enterRule();

        try {
            {
            int alt554=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt554=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt554=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt554=3;
                }
                break;
            case Union:
                {
                alt554=4;
                }
                break;
            case Intersection:
                {
                alt554=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 554, 0, input);

                throw nvae;
            }

            switch (alt554) {
                case 1 :
                    {
                    {
                    int alt552=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt552=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA552_4 = input.LA(3);

                            if ( (LA552_4==Promisify||LA552_4==Target||LA552_4==Await||LA552_4==This||LA552_4==Void||LA552_4==RULE_IDENTIFIER) ) {
                                alt552=1;
                            }
                            else if ( (LA552_4==This_1) ) {
                                alt552=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 552, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA552_5 = input.LA(3);

                            if ( (LA552_5==Promisify||LA552_5==Target||LA552_5==Await||LA552_5==This||LA552_5==Void||LA552_5==RULE_IDENTIFIER) ) {
                                alt552=1;
                            }
                            else if ( (LA552_5==This_1) ) {
                                alt552=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 552, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt552=2;
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt552=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 552, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt552=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 552, 0, input);

                        throw nvae;
                    }

                    switch (alt552) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                              				
                            }
                            pushFollow(FOLLOW_35);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;
                        case 2 :
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                              				
                            }
                            pushFollow(FOLLOW_35);
                            this_ThisTypeRef_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt553=2;
                    alt553 = dfa553.predict(input);
                    switch (alt553) {
                        case 1 :
                            {
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", true, "+");
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefFunctionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ArrayTypeRef_1 = null;

        EObject this_TypeTypeRef_2 = null;

        EObject this_UnionTypeExpressionOLD_3 = null;

        EObject this_IntersectionTypeExpressionOLD_4 = null;



        	enterRule();

        try {
            {
            int alt555=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt555=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt555=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt555=3;
                }
                break;
            case Union:
                {
                alt555=4;
                }
                break;
            case Intersection:
                {
                alt555=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);

                throw nvae;
            }

            switch (alt555) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeRef_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgInTypeTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ThisTypeRefNominal_1 = null;

        EObject this_Wildcard_2 = null;



        	enterRule();

        try {
            {
            int alt556=3;
            int LA556_0 = input.LA(1);

            if ( (LA556_0==Promisify||LA556_0==Target||LA556_0==Await||LA556_0==This||LA556_0==Void||LA556_0==RULE_IDENTIFIER) ) {
                alt556=1;
            }
            else if ( (LA556_0==This_1) ) {
                alt556=2;
            }
            else if ( (LA556_0==QuestionMark) && (synpred323_InternalN4JSParser())) {
                alt556=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 556, 0, input);

                throw nvae;
            }
            switch (alt556) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Wildcard_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ThisTypeRefNominal_0 = null;

        EObject this_ThisTypeRefStructural_1 = null;



        	enterRule();

        try {
            {
            int alt557=2;
            int LA557_0 = input.LA(1);

            if ( (LA557_0==This_1) ) {
                alt557=1;
            }
            else if ( (LA557_0==Tilde) ) {
                alt557=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 557, 0, input);

                throw nvae;
            }
            switch (alt557) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefNominal = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefStructural = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TStructMemberList_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_160);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_161); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              		
            }
            int alt558=2;
            int LA558_0 = input.LA(1);

            if ( (LA558_0==With) ) {
                int LA558_1 = input.LA(2);

                if ( (LA558_1==LeftCurlyBracket) ) {
                    alt558=1;
                }
            }
            switch (alt558) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;

        EObject lv_ownedTypeVars_9_0 = null;

        EObject lv_ownedTypeVars_11_0 = null;

        EObject this_TAnonymousFormalParameterList_14 = null;

        EObject this_ColonSepReturnTypeRef_16 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_162); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==CommercialAt) ) {
                alt559=1;
            }
            switch (alt559) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_163); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      			
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      			
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                      					
                    }
                    pushFollow(FOLLOW_65);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      			
                    }

                    }
                    break;

            }

            otherlv_7=(Token)match(input,Function,FOLLOW_165); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              		
            }
            int alt561=2;
            int LA561_0 = input.LA(1);

            if ( (LA561_0==LessThanSign) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_166); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_98);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop560:
                    do {
                        int alt560=2;
                        int LA560_0 = input.LA(1);

                        if ( (LA560_0==Comma) ) {
                            alt560=1;
                        }


                        switch (alt560) {
                    	case 1 :
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_98);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop560;
                        }
                    } while (true);

                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_167); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_65);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_168); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              		
            }
            int alt562=2;
            int LA562_0 = input.LA(1);

            if ( (LA562_0==Colon) ) {
                alt562=1;
            }
            switch (alt562) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                      			
                    }
                    pushFollow(FOLLOW_23);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowFunctionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_TAnonymousFormalParameterList_2 = null;

        EObject lv_returnTypeRef_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_167); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_65);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
              				
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
              				
            }
            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;

        EObject lv_fpars_2_0 = null;



        	enterRule();

        try {
            {
            int alt564=2;
            int LA564_0 = input.LA(1);

            if ( ((LA564_0>=Intersection && LA564_0<=Implements)||(LA564_0>=Promisify && LA564_0<=Abstract)||LA564_0==External||(LA564_0>=Private && LA564_0<=Project)||LA564_0==Public||LA564_0==Static||LA564_0==Target||(LA564_0>=Async && LA564_0<=Await)||LA564_0==Union||(LA564_0>=Yield && LA564_0<=This)||LA564_0==From||LA564_0==This_1||(LA564_0>=Type && LA564_0<=Void)||LA564_0==FullStopFullStopFullStop||(LA564_0>=Get && LA564_0<=Let)||(LA564_0>=Out && LA564_0<=Set)||LA564_0==As||LA564_0==Of||LA564_0==LeftParenthesis||LA564_0==LeftSquareBracket||LA564_0==LeftCurlyBracket||LA564_0==Tilde||LA564_0==RULE_IDENTIFIER) ) {
                alt564=1;
            }
            switch (alt564) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_31);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    loop563:
                    do {
                        int alt563=2;
                        int LA563_0 = input.LA(1);

                        if ( (LA563_0==Comma) ) {
                            alt563=1;
                        }


                        switch (alt563) {
                    	case 1 :
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_169); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_31);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop563;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnonymousFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepTypeRef_2 = null;

        EObject lv_typeRef_3_0 = null;

        EObject this_DefaultFormalParameter_4 = null;



        	enterRule();

        try {
            {
            {
            int alt565=2;
            int LA565_0 = input.LA(1);

            if ( (LA565_0==FullStopFullStopFullStop) ) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_170); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt566=2;
            alt566 = dfa566.predict(input);
            switch (alt566) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_82);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_63);
                    lv_typeRef_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;



        	enterRule();

        try {
            {
            int alt568=2;
            int LA568_0 = input.LA(1);

            if ( (LA568_0==EqualsSign) ) {
                alt568=1;
            }
            switch (alt568) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_171); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      				
                    }

                    }


                    }
                    int alt567=2;
                    int LA567_0 = input.LA(1);

                    if ( (LA567_0==Promisify||LA567_0==Target||LA567_0==Await||LA567_0==This||LA567_0==Void||LA567_0==RULE_IDENTIFIER) ) {
                        alt567=1;
                    }
                    switch (alt567) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.N4JS.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_172); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop569:
            do {
                int alt569=2;
                int LA569_0 = input.LA(1);

                if ( (LA569_0==Comma) ) {
                    alt569=1;
                }


                switch (alt569) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_172); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop569;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_172); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop570:
            do {
                int alt570=2;
                int LA570_0 = input.LA(1);

                if ( (LA570_0==Comma) ) {
                    alt570=1;
                }


                switch (alt570) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_172); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop570;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ParameterizedTypeRefStructural_1 = null;



        	enterRule();

        try {
            {
            int alt571=2;
            int LA571_0 = input.LA(1);

            if ( (LA571_0==Promisify||LA571_0==Target||LA571_0==Await||LA571_0==This||LA571_0==Void||LA571_0==RULE_IDENTIFIER) ) {
                alt571=1;
            }
            else if ( (LA571_0==Tilde) ) {
                alt571=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 571, 0, input);

                throw nvae;
            }
            switch (alt571) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefNominal = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject this_TypeAndTypeArguments_0 = null;



        	enterRule();

        try {
            {
            if ( state.backtracking==0 ) {

              		if (current==null) {
              			current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
              		}
              		newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeAndTypeArgumentsParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_TypeAndTypeArguments_0=ruleTypeAndTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_TypeAndTypeArguments_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeRef=ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_arrayTypeLiteral_0_0=null;
        Token otherlv_2=null;
        EObject lv_typeArgs_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            lv_arrayTypeLiteral_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_173); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_arrayTypeLiteral_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrayTypeRefRule());
              					}
              					setWithLastConsumed(current, "arrayTypeLiteral", true, "[");
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayTypeRefAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_typeArgs_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayTypeRefRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefStructural = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TypeAndTypeArguments_1 = null;

        EObject this_TStructMemberList_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_141);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeAndTypeArgumentsParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_161);
            this_TypeAndTypeArguments_1=ruleTypeAndTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeAndTypeArguments_1;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( (LA572_0==With) ) {
                int LA572_1 = input.LA(2);

                if ( (LA572_1==LeftCurlyBracket) ) {
                    alt572=1;
                }
            }
            switch (alt572) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeAndTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeArguments_1 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeAndTypeArgumentsRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeAndTypeArgumentsAccess().getDeclaredTypeTypeCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_174);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt573=2;
            alt573 = dfa573.predict(input);
            switch (alt573) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTypeAndTypeArgumentsRule());
                      				}
                      				newCompositeNode(grammarAccess.getTypeAndTypeArgumentsAccess().getTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_1=ruleTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeArguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_173); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_98);
            lv_typeArgs_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop574:
            do {
                int alt574=2;
                int LA574_0 = input.LA(1);

                if ( (LA574_0==Comma) ) {
                    alt574=1;
                }


                switch (alt574) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_173); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_typeArgs_3_0=ruleTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop574;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop576:
            do {
                int alt576=2;
                int LA576_0 = input.LA(1);

                if ( ((LA576_0>=Intersection && LA576_0<=With)||(LA576_0>=For && LA576_0<=Var)||(LA576_0>=As && LA576_0<=Of)||LA576_0==LessThanSign||LA576_0==RULE_IDENTIFIER) ) {
                    alt576=1;
                }


                switch (alt576) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_176);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }
            	    int alt575=3;
            	    int LA575_0 = input.LA(1);

            	    if ( (LA575_0==Semicolon) ) {
            	        alt575=1;
            	    }
            	    else if ( (LA575_0==Comma) ) {
            	        alt575=2;
            	    }
            	    switch (alt575) {
            	        case 1 :
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_175); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              				
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop576;
                }
            } while (true);

            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMember = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject this_TStructGetter_0 = null;

        EObject this_TStructSetter_1 = null;

        EObject this_TStructMethod_2 = null;

        EObject this_TStructField_3 = null;



        	enterRule();

        try {
            {
            int alt577=4;
            alt577 = dfa577.predict(input);
            switch (alt577) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMethod = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_TypeVariables_1 = null;

        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_TAnonymousFormalParameterList_4 = null;

        EObject this_ColonSepReturnTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
              					
            }

            }
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( (LA578_0==LessThanSign) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTStructMethodRule());
                      						}
                      						newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_25);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_42);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_167); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_65);
            this_TAnonymousFormalParameterList_4=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_4;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              		
            }
            int alt579=2;
            int LA579_0 = input.LA(1);

            if ( (LA579_0==Colon) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_6=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariables(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;

        EObject lv_typeVars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_166); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_98);
            lv_typeVars_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop580:
            do {
                int alt580=2;
                int LA580_0 = input.LA(1);

                if ( (LA580_0==Comma) ) {
                    alt580=1;
                }


                switch (alt580) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_typeVars_3_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop580;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_declaredTypeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredTypeRefRule());
              					}
              					set(
              						current,
              						"declaredTypeRef",
              						lv_declaredTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructField = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;

        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject this_ColonSepTypeRef_2 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_177);
            lv_name_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt581=2;
            int LA581_0 = input.LA(1);

            if ( (LA581_0==QuestionMark) ) {
                alt581=1;
            }
            switch (alt581) {
                case 1 :
                    {
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==Colon) ) {
                alt582=1;
            }
            switch (alt582) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructGetter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt583=2;
            int LA583_0 = input.LA(1);

            if ( (LA583_0==QuestionMark) ) {
                alt583=1;
            }
            switch (alt583) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            int alt584=2;
            int LA584_0 = input.LA(1);

            if ( (LA584_0==Colon) ) {
                alt584=1;
            }
            switch (alt584) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructSetter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_fpar_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_93);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt585=2;
            int LA585_0 = input.LA(1);

            if ( (LA585_0==QuestionMark) ) {
                alt585=1;
            }
            switch (alt585) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_169); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;


        	enterRule();

        try {
            {
            {
            kw=(Token)match(input,Tilde,FOLLOW_178); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              		
            }
            int alt586=3;
            int LA586_0 = input.LA(1);

            if ( (LA586_0==Tilde) ) {
                alt586=1;
            }
            else if ( (LA586_0==RULE_STRUCTMODSUFFIX) ) {
                alt586=2;
            }
            switch (alt586) {
                case 1 :
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRUCTMODSUFFIX_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
              			
            }

            }
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==Type) ) {
                alt587=1;
            }
            else if ( (LA587_0==Constructor) ) {
                alt587=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 587, 0, input);

                throw nvae;
            }
            switch (alt587) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", true, "constructor");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_179); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject this_Wildcard_0 = null;

        EObject this_WildcardNewNotation_1 = null;

        EObject this_TypeRef_2 = null;



        	enterRule();

        try {
            {
            int alt588=3;
            int LA588_0 = input.LA(1);

            if ( (LA588_0==QuestionMark) && (synpred334_InternalN4JSParser())) {
                alt588=1;
            }
            else if ( (LA588_0==Out||LA588_0==In) ) {
                alt588=2;
            }
            else if ( ((LA588_0>=Intersection && LA588_0<=Constructor)||LA588_0==Promisify||LA588_0==Target||LA588_0==Await||LA588_0==Union||LA588_0==This||LA588_0==This_1||(LA588_0>=Type && LA588_0<=Void)||LA588_0==LeftParenthesis||LA588_0==LeftSquareBracket||LA588_0==LeftCurlyBracket||LA588_0==Tilde||LA588_0==RULE_IDENTIFIER) ) {
                alt588=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 588, 0, input);

                throw nvae;
            }
            switch (alt588) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Wildcard_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcard = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;

        EObject lv_declaredLowerBound_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getWildcardAccess().getWildcardAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_180); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1());
              				
            }

            }


            }
            int alt589=3;
            int LA589_0 = input.LA(1);

            if ( (LA589_0==Extends) ) {
                alt589=1;
            }
            else if ( (LA589_0==Super) ) {
                alt589=2;
            }
            switch (alt589) {
                case 1 :
                    {
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardNewNotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;

        EObject lv_declaredLowerBound_3_0 = null;



        	enterRule();

        try {
            {
            int alt590=2;
            int LA590_0 = input.LA(1);

            if ( (LA590_0==Out) ) {
                alt590=1;
            }
            else if ( (LA590_0==In) ) {
                alt590=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 590, 0, input);

                throw nvae;
            }
            switch (alt590) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "out");
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "in");
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeVariable = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;

        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        EObject lv_declaredUpperBound_4_0 = null;



        	enterRule();

        try {
            {
            {
            int alt591=3;
            int LA591_0 = input.LA(1);

            if ( (LA591_0==Out) ) {
                alt591=1;
            }
            else if ( (LA591_0==In) ) {
                alt591=2;
            }
            switch (alt591) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_137); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", true, "out");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_137); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", true, "in");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            lv_name_2_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_181); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              				
            }

            }


            }
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==Extends) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_4_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            {
            int alt593=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt593=1;
                }
                break;
            case Yield:
                {
                alt593=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt593=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 593, 0, input);

                throw nvae;
            }

            switch (alt593) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_BindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_N4Keyword_1 = null;



        	enterRule();

        try {
            {
            int alt594=2;
            int LA594_0 = input.LA(1);

            if ( (LA594_0==RULE_IDENTIFIER) ) {
                alt594=1;
            }
            else if ( ((LA594_0>=Intersection && LA594_0<=Implements)||(LA594_0>=Promisify && LA594_0<=Abstract)||LA594_0==External||(LA594_0>=Private && LA594_0<=Project)||LA594_0==Public||LA594_0==Static||LA594_0==Target||(LA594_0>=Async && LA594_0<=Await)||LA594_0==Union||LA594_0==This||LA594_0==From||LA594_0==Type||(LA594_0>=Get && LA594_0<=Let)||(LA594_0>=Out && LA594_0<=Set)||LA594_0==As||LA594_0==Of) ) {
                alt594=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 594, 0, input);

                throw nvae;
            }
            switch (alt594) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_1=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;

        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            {
            int alt595=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt595=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt595=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt595=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 595, 0, input);

                throw nvae;
            }

            switch (alt595) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ReservedWord_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleReservedWord = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt596=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt596=1;
                }
                break;
            case Case:
                {
                alt596=2;
                }
                break;
            case Catch:
                {
                alt596=3;
                }
                break;
            case Class:
                {
                alt596=4;
                }
                break;
            case Const:
                {
                alt596=5;
                }
                break;
            case Continue:
                {
                alt596=6;
                }
                break;
            case Debugger:
                {
                alt596=7;
                }
                break;
            case Default:
                {
                alt596=8;
                }
                break;
            case Delete:
                {
                alt596=9;
                }
                break;
            case Do:
                {
                alt596=10;
                }
                break;
            case Else:
                {
                alt596=11;
                }
                break;
            case Export:
                {
                alt596=12;
                }
                break;
            case Extends:
                {
                alt596=13;
                }
                break;
            case Finally:
                {
                alt596=14;
                }
                break;
            case For:
                {
                alt596=15;
                }
                break;
            case Function:
                {
                alt596=16;
                }
                break;
            case If:
                {
                alt596=17;
                }
                break;
            case Import:
                {
                alt596=18;
                }
                break;
            case In:
                {
                alt596=19;
                }
                break;
            case Instanceof:
                {
                alt596=20;
                }
                break;
            case New:
                {
                alt596=21;
                }
                break;
            case Return:
                {
                alt596=22;
                }
                break;
            case Super:
                {
                alt596=23;
                }
                break;
            case Switch:
                {
                alt596=24;
                }
                break;
            case This_1:
                {
                alt596=25;
                }
                break;
            case Throw:
                {
                alt596=26;
                }
                break;
            case Try:
                {
                alt596=27;
                }
                break;
            case Typeof:
                {
                alt596=28;
                }
                break;
            case Var:
                {
                alt596=29;
                }
                break;
            case Void:
                {
                alt596=30;
                }
                break;
            case While:
                {
                alt596=31;
                }
                break;
            case With:
                {
                alt596=32;
                }
                break;
            case Yield:
                {
                alt596=33;
                }
                break;
            case Null:
                {
                alt596=34;
                }
                break;
            case True:
                {
                alt596=35;
                }
                break;
            case False:
                {
                alt596=36;
                }
                break;
            case Enum:
                {
                alt596=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 596, 0, input);

                throw nvae;
            }

            switch (alt596) {
                case 1 :
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt597=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt597=1;
                }
                break;
            case Set:
                {
                alt597=2;
                }
                break;
            case Let:
                {
                alt597=3;
                }
                break;
            case Project:
                {
                alt597=4;
                }
                break;
            case External:
                {
                alt597=5;
                }
                break;
            case Abstract:
                {
                alt597=6;
                }
                break;
            case Static:
                {
                alt597=7;
                }
                break;
            case As:
                {
                alt597=8;
                }
                break;
            case From:
                {
                alt597=9;
                }
                break;
            case Constructor:
                {
                alt597=10;
                }
                break;
            case Of:
                {
                alt597=11;
                }
                break;
            case Target:
                {
                alt597=12;
                }
                break;
            case Type:
                {
                alt597=13;
                }
                break;
            case Union:
                {
                alt597=14;
                }
                break;
            case Intersection:
                {
                alt597=15;
                }
                break;
            case This:
                {
                alt597=16;
                }
                break;
            case Promisify:
                {
                alt597=17;
                }
                break;
            case Await:
                {
                alt597=18;
                }
                break;
            case Async:
                {
                alt597=19;
                }
                break;
            case Implements:
                {
                alt597=20;
                }
                break;
            case Interface:
                {
                alt597=21;
                }
                break;
            case Private:
                {
                alt597=22;
                }
                break;
            case Protected:
                {
                alt597=23;
                }
                break;
            case Public:
                {
                alt597=24;
                }
                break;
            case Out:
                {
                alt597=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 597, 0, input);

                throw nvae;
            }

            switch (alt597) {
                case 1 :
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleVariableStatementKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            {
            int alt598=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt598=1;
                }
                break;
            case Const:
                {
                alt598=2;
                }
                break;
            case Let:
                {
                alt598=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);

                throw nvae;
            }

            switch (alt598) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator rulePostfixOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            {
            int alt599=2;
            int LA599_0 = input.LA(1);

            if ( (LA599_0==PlusSignPlusSign) ) {
                alt599=1;
            }
            else if ( (LA599_0==HyphenMinusHyphenMinus) ) {
                alt599=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 599, 0, input);

                throw nvae;
            }
            switch (alt599) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleUnaryOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;


        	enterRule();

        try {
            {
            int alt600=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt600=1;
                }
                break;
            case Void:
                {
                alt600=2;
                }
                break;
            case Typeof:
                {
                alt600=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt600=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt600=5;
                }
                break;
            case PlusSign:
                {
                alt600=6;
                }
                break;
            case HyphenMinus:
                {
                alt600=7;
                }
                break;
            case Tilde:
                {
                alt600=8;
                }
                break;
            case ExclamationMark:
                {
                alt600=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 600, 0, input);

                throw nvae;
            }

            switch (alt600) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    enumLiteral_8=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleMultiplicativeOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            {
            int alt601=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt601=1;
                }
                break;
            case Solidus:
                {
                alt601=2;
                }
                break;
            case PercentSign:
                {
                alt601=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }

            switch (alt601) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleAdditiveOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);

            if ( (LA602_0==PlusSign) ) {
                alt602=1;
            }
            else if ( (LA602_0==HyphenMinus) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleEqualityOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;


        	enterRule();

        try {
            {
            int alt603=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt603=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt603=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt603=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt603=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4Modifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;


        	enterRule();

        try {
            {
            int alt604=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt604=1;
                }
                break;
            case Project:
                {
                alt604=2;
                }
                break;
            case Protected:
                {
                alt604=3;
                }
                break;
            case Public:
                {
                alt604=4;
                }
                break;
            case External:
                {
                alt604=5;
                }
                break;
            case Abstract:
                {
                alt604=6;
                }
                break;
            case Static:
                {
                alt604=7;
                }
                break;
            case Const:
                {
                alt604=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop605:
        do {
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( ((LA605_0>=Protected && LA605_0<=Abstract)||LA605_0==External||(LA605_0>=Private && LA605_0<=Project)||LA605_0==Public||LA605_0==Static||LA605_0==Const) ) {
                alt605=1;
            }


            switch (alt605) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop605;
            }
        } while (true);

        match(input,Class,FOLLOW_182); if (state.failed) return ;
        int alt606=2;
        int LA606_0 = input.LA(1);

        if ( (LA606_0==Tilde) ) {
            alt606=1;
        }
        switch (alt606) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_183);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt607=2;
        int LA607_0 = input.LA(1);

        if ( ((LA607_0>=Intersection && LA607_0<=Implements)||(LA607_0>=Promisify && LA607_0<=Abstract)||LA607_0==External||(LA607_0>=Private && LA607_0<=Project)||LA607_0==Public||LA607_0==Static||LA607_0==Target||(LA607_0>=Async && LA607_0<=Await)||LA607_0==Union||(LA607_0>=Yield && LA607_0<=This)||LA607_0==From||LA607_0==Type||(LA607_0>=Get && LA607_0<=Let)||(LA607_0>=Out && LA607_0<=Set)||LA607_0==As||LA607_0==Of||LA607_0==RULE_IDENTIFIER) ) {
            alt607=1;
        }
        switch (alt607) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop608:
        do {
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( ((LA608_0>=Protected && LA608_0<=Abstract)||LA608_0==External||(LA608_0>=Private && LA608_0<=Project)||LA608_0==Public||LA608_0==Static||LA608_0==Const) ) {
                alt608=1;
            }


            switch (alt608) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop608;
            }
        } while (true);

        match(input,Interface,FOLLOW_182); if (state.failed) return ;
        int alt609=2;
        int LA609_0 = input.LA(1);

        if ( (LA609_0==Tilde) ) {
            alt609=1;
        }
        switch (alt609) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_183);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt610=2;
        int LA610_0 = input.LA(1);

        if ( ((LA610_0>=Intersection && LA610_0<=Implements)||(LA610_0>=Promisify && LA610_0<=Abstract)||LA610_0==External||(LA610_0>=Private && LA610_0<=Project)||LA610_0==Public||LA610_0==Static||LA610_0==Target||(LA610_0>=Async && LA610_0<=Await)||LA610_0==Union||(LA610_0>=Yield && LA610_0<=This)||LA610_0==From||LA610_0==Type||(LA610_0>=Get && LA610_0<=Let)||(LA610_0>=Out && LA610_0<=Set)||LA610_0==As||LA610_0==Of||LA610_0==RULE_IDENTIFIER) ) {
            alt610=1;
        }
        switch (alt610) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop611:
        do {
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( ((LA611_0>=Protected && LA611_0<=Abstract)||LA611_0==External||(LA611_0>=Private && LA611_0<=Project)||LA611_0==Public||LA611_0==Static||LA611_0==Const) ) {
                alt611=1;
            }


            switch (alt611) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop611;
            }
        } while (true);

        match(input,Enum,FOLLOW_183); if (state.failed) return ;
        int alt612=2;
        int LA612_0 = input.LA(1);

        if ( ((LA612_0>=Intersection && LA612_0<=Implements)||(LA612_0>=Promisify && LA612_0<=Abstract)||LA612_0==External||(LA612_0>=Private && LA612_0<=Project)||LA612_0==Public||LA612_0==Static||LA612_0==Target||(LA612_0>=Async && LA612_0<=Await)||LA612_0==Union||(LA612_0>=Yield && LA612_0<=This)||LA612_0==From||LA612_0==Type||(LA612_0>=Get && LA612_0<=Let)||(LA612_0>=Out && LA612_0<=Set)||LA612_0==As||LA612_0==Of||LA612_0==RULE_IDENTIFIER) ) {
            alt612=1;
        }
        switch (alt612) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred8_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop614:
        do {
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( ((LA614_0>=Protected && LA614_0<=Abstract)||LA614_0==External||(LA614_0>=Private && LA614_0<=Project)||LA614_0==Public||LA614_0==Static||LA614_0==Const) ) {
                alt614=1;
            }


            switch (alt614) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop614;
            }
        } while (true);

        match(input,Class,FOLLOW_182); if (state.failed) return ;
        int alt615=2;
        int LA615_0 = input.LA(1);

        if ( (LA615_0==Tilde) ) {
            alt615=1;
        }
        switch (alt615) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_183);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt616=2;
        int LA616_0 = input.LA(1);

        if ( ((LA616_0>=Intersection && LA616_0<=Implements)||(LA616_0>=Promisify && LA616_0<=Abstract)||LA616_0==External||(LA616_0>=Private && LA616_0<=Project)||LA616_0==Public||LA616_0==Static||LA616_0==Target||(LA616_0>=Async && LA616_0<=Await)||LA616_0==Union||(LA616_0>=Yield && LA616_0<=This)||LA616_0==From||LA616_0==Type||(LA616_0>=Get && LA616_0<=Let)||(LA616_0>=Out && LA616_0<=Set)||LA616_0==As||LA616_0==Of||LA616_0==RULE_IDENTIFIER) ) {
            alt616=1;
        }
        switch (alt616) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop617:
        do {
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( ((LA617_0>=Protected && LA617_0<=Abstract)||LA617_0==External||(LA617_0>=Private && LA617_0<=Project)||LA617_0==Public||LA617_0==Static||LA617_0==Const) ) {
                alt617=1;
            }


            switch (alt617) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop617;
            }
        } while (true);

        match(input,Interface,FOLLOW_182); if (state.failed) return ;
        int alt618=2;
        int LA618_0 = input.LA(1);

        if ( (LA618_0==Tilde) ) {
            alt618=1;
        }
        switch (alt618) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_183);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt619=2;
        int LA619_0 = input.LA(1);

        if ( ((LA619_0>=Intersection && LA619_0<=Implements)||(LA619_0>=Promisify && LA619_0<=Abstract)||LA619_0==External||(LA619_0>=Private && LA619_0<=Project)||LA619_0==Public||LA619_0==Static||LA619_0==Target||(LA619_0>=Async && LA619_0<=Await)||LA619_0==Union||(LA619_0>=Yield && LA619_0<=This)||LA619_0==From||LA619_0==Type||(LA619_0>=Get && LA619_0<=Let)||(LA619_0>=Out && LA619_0<=Set)||LA619_0==As||LA619_0==Of||LA619_0==RULE_IDENTIFIER) ) {
            alt619=1;
        }
        switch (alt619) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop620:
        do {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( ((LA620_0>=Protected && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Const) ) {
                alt620=1;
            }


            switch (alt620) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop620;
            }
        } while (true);

        match(input,Enum,FOLLOW_183); if (state.failed) return ;
        int alt621=2;
        int LA621_0 = input.LA(1);

        if ( ((LA621_0>=Intersection && LA621_0<=Implements)||(LA621_0>=Promisify && LA621_0<=Abstract)||LA621_0==External||(LA621_0>=Private && LA621_0<=Project)||LA621_0==Public||LA621_0==Static||LA621_0==Target||(LA621_0>=Async && LA621_0<=Await)||LA621_0==Union||(LA621_0>=Yield && LA621_0<=This)||LA621_0==From||LA621_0==Type||(LA621_0>=Get && LA621_0<=Let)||(LA621_0>=Out && LA621_0<=Set)||LA621_0==As||LA621_0==Of||LA621_0==RULE_IDENTIFIER) ) {
            alt621=1;
        }
        switch (alt621) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop622:
        do {
            int alt622=2;
            int LA622_0 = input.LA(1);

            if ( ((LA622_0>=Protected && LA622_0<=Abstract)||LA622_0==External||(LA622_0>=Private && LA622_0<=Project)||LA622_0==Public||LA622_0==Static||LA622_0==Const) ) {
                alt622=1;
            }


            switch (alt622) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop622;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred18_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred36_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred38_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred42_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred44_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred48_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred54_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred56_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop637:
        do {
            int alt637=2;
            int LA637_0 = input.LA(1);

            if ( ((LA637_0>=Protected && LA637_0<=Abstract)||LA637_0==External||(LA637_0>=Private && LA637_0<=Project)||LA637_0==Public||LA637_0==Static||LA637_0==Const) ) {
                alt637=1;
            }


            switch (alt637) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop637;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop638:
        do {
            int alt638=2;
            int LA638_0 = input.LA(1);

            if ( ((LA638_0>=Protected && LA638_0<=Abstract)||LA638_0==External||(LA638_0>=Private && LA638_0<=Project)||LA638_0==Public||LA638_0==Static||LA638_0==Const) ) {
                alt638=1;
            }


            switch (alt638) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop638;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred73_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred87_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt639=2;
        int LA639_0 = input.LA(1);

        if ( (LA639_0==Colon) ) {
            alt639=1;
        }
        switch (alt639) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt640=2;
        int LA640_0 = input.LA(1);

        if ( (LA640_0==Colon) ) {
            alt640=1;
        }
        switch (alt640) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt641=2;
        int LA641_0 = input.LA(1);

        if ( (LA641_0==Colon) ) {
            alt641=1;
        }
        switch (alt641) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt642=2;
        int LA642_0 = input.LA(1);

        if ( (LA642_0==Colon) ) {
            alt642=1;
        }
        switch (alt642) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_70);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_49); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_65);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred105_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_71);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt643=2;
        int LA643_0 = input.LA(1);

        if ( (LA643_0==In) ) {
            alt643=1;
        }
        else if ( (LA643_0==Of) ) {
            alt643=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 643, 0, input);

            throw nvae;
        }
        switch (alt643) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt644=2;
        int LA644_0 = input.LA(1);

        if ( ((LA644_0>=Intersection && LA644_0<=Implements)||(LA644_0>=Promisify && LA644_0<=Abstract)||(LA644_0>=External && LA644_0<=Function)||(LA644_0>=Private && LA644_0<=Delete)||LA644_0==Public||LA644_0==Static||(LA644_0>=Target && LA644_0<=Await)||LA644_0==Class||(LA644_0>=False && LA644_0<=Super)||LA644_0==Union||(LA644_0>=Yield && LA644_0<=This)||(LA644_0>=From && LA644_0<=Void)||(LA644_0>=Get && LA644_0<=Set)||LA644_0==PlusSignPlusSign||LA644_0==HyphenMinusHyphenMinus||LA644_0==SolidusEqualsSign||LA644_0==As||LA644_0==Of||LA644_0==ExclamationMark||LA644_0==LeftParenthesis||LA644_0==PlusSign||LA644_0==HyphenMinus||LA644_0==Solidus||LA644_0==LessThanSign||(LA644_0>=CommercialAt && LA644_0<=LeftSquareBracket)||LA644_0==LeftCurlyBracket||LA644_0==Tilde||LA644_0==RULE_DOUBLE||(LA644_0>=RULE_HEX_INT && LA644_0<=RULE_LEGACY_OCTAL_INT)||LA644_0==RULE_SCIENTIFIC_INT||LA644_0==RULE_IDENTIFIER||LA644_0==RULE_STRING||(LA644_0>=RULE_TEMPLATE_HEAD && LA644_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA644_0==RULE_INT) ) {
            alt644=1;
        }
        switch (alt644) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_70);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_49); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_65);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_71);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt645=2;
        int LA645_0 = input.LA(1);

        if ( (LA645_0==In) ) {
            alt645=1;
        }
        else if ( (LA645_0==Of) ) {
            alt645=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 645, 0, input);

            throw nvae;
        }
        switch (alt645) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt646=2;
        int LA646_0 = input.LA(1);

        if ( ((LA646_0>=Intersection && LA646_0<=Implements)||(LA646_0>=Promisify && LA646_0<=Abstract)||(LA646_0>=External && LA646_0<=Function)||(LA646_0>=Private && LA646_0<=Delete)||LA646_0==Public||LA646_0==Static||(LA646_0>=Target && LA646_0<=Await)||LA646_0==Class||(LA646_0>=False && LA646_0<=Super)||LA646_0==Union||(LA646_0>=Yield && LA646_0<=This)||(LA646_0>=From && LA646_0<=Void)||(LA646_0>=Get && LA646_0<=Set)||LA646_0==PlusSignPlusSign||LA646_0==HyphenMinusHyphenMinus||LA646_0==SolidusEqualsSign||LA646_0==As||LA646_0==Of||LA646_0==ExclamationMark||LA646_0==LeftParenthesis||LA646_0==PlusSign||LA646_0==HyphenMinus||LA646_0==Solidus||LA646_0==LessThanSign||(LA646_0>=CommercialAt && LA646_0<=LeftSquareBracket)||LA646_0==LeftCurlyBracket||LA646_0==Tilde||LA646_0==RULE_DOUBLE||(LA646_0>=RULE_HEX_INT && LA646_0<=RULE_LEGACY_OCTAL_INT)||LA646_0==RULE_SCIENTIFIC_INT||LA646_0==RULE_IDENTIFIER||LA646_0==RULE_STRING||(LA646_0>=RULE_TEMPLATE_HEAD && LA646_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA646_0==RULE_INT) ) {
            alt646=1;
        }
        switch (alt646) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred117_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt647=2;
        alt647 = dfa647.predict(input);
        switch (alt647) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_96);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt648=2;
        int LA648_0 = input.LA(1);

        if ( (LA648_0==QuestionMark) ) {
            alt648=1;
        }
        switch (alt648) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_82); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt649=2;
        int LA649_0 = input.LA(1);

        if ( (LA649_0==LessThanSign) ) {
            alt649=1;
        }
        switch (alt649) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt650=2;
        alt650 = dfa650.predict(input);
        switch (alt650) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt651=2;
        int LA651_0 = input.LA(1);

        if ( (LA651_0==Asterisk) ) {
            alt651=1;
        }
        else if ( ((LA651_0>=Intersection && LA651_0<=With)||(LA651_0>=For && LA651_0<=Var)||(LA651_0>=As && LA651_0<=Of)||LA651_0==LeftSquareBracket||LA651_0==RULE_DOUBLE||LA651_0==RULE_HEX_INT||LA651_0==RULE_OCTAL_INT||LA651_0==RULE_SCIENTIFIC_INT||LA651_0==RULE_IDENTIFIER||LA651_0==RULE_STRING||LA651_0==RULE_INT) ) {
            alt651=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 651, 0, input);

            throw nvae;
        }
        switch (alt651) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred131_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt652=2;
        alt652 = dfa652.predict(input);
        switch (alt652) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_96);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt653=2;
        int LA653_0 = input.LA(1);

        if ( (LA653_0==QuestionMark) ) {
            alt653=1;
        }
        switch (alt653) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_82); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred132_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt654=2;
        int LA654_0 = input.LA(1);

        if ( (LA654_0==LessThanSign) ) {
            alt654=1;
        }
        switch (alt654) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt655=2;
        alt655 = dfa655.predict(input);
        switch (alt655) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt656=2;
        int LA656_0 = input.LA(1);

        if ( (LA656_0==Asterisk) ) {
            alt656=1;
        }
        else if ( ((LA656_0>=Intersection && LA656_0<=With)||(LA656_0>=For && LA656_0<=Var)||(LA656_0>=As && LA656_0<=Of)||LA656_0==LeftSquareBracket||LA656_0==RULE_DOUBLE||LA656_0==RULE_HEX_INT||LA656_0==RULE_OCTAL_INT||LA656_0==RULE_SCIENTIFIC_INT||LA656_0==RULE_IDENTIFIER||LA656_0==RULE_STRING||LA656_0==RULE_INT) ) {
            alt656=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 656, 0, input);

            throw nvae;
        }
        switch (alt656) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt657=2;
        alt657 = dfa657.predict(input);
        switch (alt657) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_82);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred138_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred141_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt658=2;
        int LA658_0 = input.LA(1);

        if ( (LA658_0==LessThanSign) ) {
            alt658=1;
        }
        switch (alt658) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt659=2;
        alt659 = dfa659.predict(input);
        switch (alt659) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt660=2;
        int LA660_0 = input.LA(1);

        if ( (LA660_0==Asterisk) ) {
            alt660=1;
        }
        else if ( ((LA660_0>=Intersection && LA660_0<=With)||(LA660_0>=For && LA660_0<=Var)||(LA660_0>=As && LA660_0<=Of)||LA660_0==LeftSquareBracket||LA660_0==RULE_DOUBLE||LA660_0==RULE_HEX_INT||LA660_0==RULE_OCTAL_INT||LA660_0==RULE_SCIENTIFIC_INT||LA660_0==RULE_IDENTIFIER||LA660_0==RULE_STRING||LA660_0==RULE_INT) ) {
            alt660=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 660, 0, input);

            throw nvae;
        }
        switch (alt660) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred144_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt661=2;
        alt661 = dfa661.predict(input);
        switch (alt661) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_82);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred147_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred150_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt662=2;
        int LA662_0 = input.LA(1);

        if ( (LA662_0==LessThanSign) ) {
            alt662=1;
        }
        switch (alt662) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt663=2;
        alt663 = dfa663.predict(input);
        switch (alt663) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==Asterisk) ) {
            alt664=1;
        }
        else if ( ((LA664_0>=Intersection && LA664_0<=With)||(LA664_0>=For && LA664_0<=Var)||(LA664_0>=As && LA664_0<=Of)||LA664_0==LeftSquareBracket||LA664_0==RULE_DOUBLE||LA664_0==RULE_HEX_INT||LA664_0==RULE_OCTAL_INT||LA664_0==RULE_SCIENTIFIC_INT||LA664_0==RULE_IDENTIFIER||LA664_0==RULE_STRING||LA664_0==RULE_INT) ) {
            alt664=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 664, 0, input);

            throw nvae;
        }
        switch (alt664) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred171_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_103); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_103); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_185);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_185);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt677=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt677=1;
            }
            break;
        case Async:
            {
            int LA677_2 = input.LA(2);

            if ( (LA677_2==EqualsSignGreaterThanSign) ) {
                alt677=3;
            }
            else if ( (LA677_2==RULE_NO_LINE_TERMINATOR) && (synpred229_InternalN4JSParser())) {
                alt677=2;
            }
            else if ( (LA677_2==LeftParenthesis) && (synpred229_InternalN4JSParser())) {
                alt677=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 677, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt677=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 677, 0, input);

            throw nvae;
        }

        switch (alt677) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt675=2;
                int LA675_0 = input.LA(1);

                if ( (LA675_0==Colon) ) {
                    alt675=1;
                }
                switch (alt675) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt676=2;
                int LA676_0 = input.LA(1);

                if ( (LA676_0==Colon) ) {
                    alt676=1;
                }
                switch (alt676) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt680=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt680=1;
            }
            break;
        case Async:
            {
            int LA680_2 = input.LA(2);

            if ( (LA680_2==EqualsSignGreaterThanSign) ) {
                alt680=3;
            }
            else if ( (LA680_2==RULE_NO_LINE_TERMINATOR) && (synpred235_InternalN4JSParser())) {
                alt680=2;
            }
            else if ( (LA680_2==LeftParenthesis) && (synpred235_InternalN4JSParser())) {
                alt680=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 680, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt680=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 680, 0, input);

            throw nvae;
        }

        switch (alt680) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt678=2;
                int LA678_0 = input.LA(1);

                if ( (LA678_0==Colon) ) {
                    alt678=1;
                }
                switch (alt678) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt679=2;
                int LA679_0 = input.LA(1);

                if ( (LA679_0==Colon) ) {
                    alt679=1;
                }
                switch (alt679) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred243_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt683=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt683=1;
            }
            break;
        case Async:
            {
            int LA683_2 = input.LA(2);

            if ( (LA683_2==EqualsSignGreaterThanSign) ) {
                alt683=3;
            }
            else if ( (LA683_2==RULE_NO_LINE_TERMINATOR) && (synpred241_InternalN4JSParser())) {
                alt683=2;
            }
            else if ( (LA683_2==LeftParenthesis) && (synpred241_InternalN4JSParser())) {
                alt683=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 683, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt683=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 683, 0, input);

            throw nvae;
        }

        switch (alt683) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt681=2;
                int LA681_0 = input.LA(1);

                if ( (LA681_0==Colon) ) {
                    alt681=1;
                }
                switch (alt681) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_40);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt682=2;
                int LA682_0 = input.LA(1);

                if ( (LA682_0==Colon) ) {
                    alt682=1;
                }
                switch (alt682) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred249_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt686=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt686=1;
            }
            break;
        case Async:
            {
            int LA686_2 = input.LA(2);

            if ( (LA686_2==RULE_NO_LINE_TERMINATOR) && (synpred247_InternalN4JSParser())) {
                alt686=2;
            }
            else if ( (LA686_2==LeftParenthesis) && (synpred247_InternalN4JSParser())) {
                alt686=2;
            }
            else if ( (LA686_2==EqualsSignGreaterThanSign) ) {
                alt686=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 686, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt686=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 686, 0, input);

            throw nvae;
        }

        switch (alt686) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt684=2;
                int LA684_0 = input.LA(1);

                if ( (LA684_0==Colon) ) {
                    alt684=1;
                }
                switch (alt684) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_40);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt685=2;
                int LA685_0 = input.LA(1);

                if ( (LA685_0==Colon) ) {
                    alt685=1;
                }
                switch (alt685) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftParenthesis,FOLLOW_167); if (state.failed) return ;
        pushFollow(FOLLOW_65);
        ruleTAnonymousFormalParameterList(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_47); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred268_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred269_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred272_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop695:
        do {
            int alt695=2;
            int LA695_0 = input.LA(1);

            if ( ((LA695_0>=Protected && LA695_0<=Abstract)||LA695_0==External||(LA695_0>=Private && LA695_0<=Project)||LA695_0==Public||LA695_0==Static||LA695_0==Const) ) {
                alt695=1;
            }


            switch (alt695) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop695;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred273_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop696:
        do {
            int alt696=2;
            int LA696_0 = input.LA(1);

            if ( ((LA696_0>=Protected && LA696_0<=Abstract)||LA696_0==External||(LA696_0>=Private && LA696_0<=Project)||LA696_0==Public||LA696_0==Static||LA696_0==Const) ) {
                alt696=1;
            }


            switch (alt696) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_148);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop696;
            }
        } while (true);

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop697:
        do {
            int alt697=2;
            alt697 = dfa697.predict(input);
            switch (alt697) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop697;
            }
        } while (true);
        int alt698=2;
        int LA698_0 = input.LA(1);

        if ( (LA698_0==LessThanSign) ) {
            alt698=1;
        }
        switch (alt698) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt699=2;
        alt699 = dfa699.predict(input);
        switch (alt699) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt700=2;
        int LA700_0 = input.LA(1);

        if ( (LA700_0==Asterisk) ) {
            alt700=1;
        }
        else if ( ((LA700_0>=Intersection && LA700_0<=With)||(LA700_0>=For && LA700_0<=Var)||(LA700_0>=As && LA700_0<=Of)||LA700_0==LeftSquareBracket||LA700_0==RULE_DOUBLE||LA700_0==RULE_HEX_INT||LA700_0==RULE_OCTAL_INT||LA700_0==RULE_SCIENTIFIC_INT||LA700_0==RULE_IDENTIFIER||LA700_0==RULE_STRING||LA700_0==RULE_INT) ) {
            alt700=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 700, 0, input);

            throw nvae;
        }
        switch (alt700) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop701:
        do {
            int alt701=2;
            int LA701_0 = input.LA(1);

            if ( ((LA701_0>=Protected && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Const) ) {
                alt701=1;
            }


            switch (alt701) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop701;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred276_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop702:
        do {
            int alt702=2;
            int LA702_0 = input.LA(1);

            if ( ((LA702_0>=Protected && LA702_0<=Abstract)||LA702_0==External||(LA702_0>=Private && LA702_0<=Project)||LA702_0==Public||LA702_0==Static||LA702_0==Const) ) {
                alt702=1;
            }


            switch (alt702) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_148);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop702;
            }
        } while (true);

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop703:
        do {
            int alt703=2;
            alt703 = dfa703.predict(input);
            switch (alt703) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop703;
            }
        } while (true);
        int alt704=2;
        int LA704_0 = input.LA(1);

        if ( (LA704_0==LessThanSign) ) {
            alt704=1;
        }
        switch (alt704) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt705=2;
        alt705 = dfa705.predict(input);
        switch (alt705) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt706=2;
        int LA706_0 = input.LA(1);

        if ( (LA706_0==Asterisk) ) {
            alt706=1;
        }
        else if ( ((LA706_0>=Intersection && LA706_0<=With)||(LA706_0>=For && LA706_0<=Var)||(LA706_0>=As && LA706_0<=Of)||LA706_0==LeftSquareBracket||LA706_0==RULE_DOUBLE||LA706_0==RULE_HEX_INT||LA706_0==RULE_OCTAL_INT||LA706_0==RULE_SCIENTIFIC_INT||LA706_0==RULE_IDENTIFIER||LA706_0==RULE_STRING||LA706_0==RULE_INT) ) {
            alt706=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 706, 0, input);

            throw nvae;
        }
        switch (alt706) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop707:
        do {
            int alt707=2;
            int LA707_0 = input.LA(1);

            if ( ((LA707_0>=Protected && LA707_0<=Abstract)||LA707_0==External||(LA707_0>=Private && LA707_0<=Project)||LA707_0==Public||LA707_0==Static||LA707_0==Const) ) {
                alt707=1;
            }


            switch (alt707) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop707;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop708:
        do {
            int alt708=2;
            int LA708_0 = input.LA(1);

            if ( ((LA708_0>=Protected && LA708_0<=Abstract)||LA708_0==External||(LA708_0>=Private && LA708_0<=Project)||LA708_0==Public||LA708_0==Static||LA708_0==Const) ) {
                alt708=1;
            }


            switch (alt708) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_148);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop708;
            }
        } while (true);

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop709:
        do {
            int alt709=2;
            alt709 = dfa709.predict(input);
            switch (alt709) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop709;
            }
        } while (true);
        int alt710=2;
        int LA710_0 = input.LA(1);

        if ( (LA710_0==LessThanSign) ) {
            alt710=1;
        }
        switch (alt710) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt711=2;
        alt711 = dfa711.predict(input);
        switch (alt711) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt712=2;
        int LA712_0 = input.LA(1);

        if ( (LA712_0==Asterisk) ) {
            alt712=1;
        }
        else if ( ((LA712_0>=Intersection && LA712_0<=With)||(LA712_0>=For && LA712_0<=Var)||(LA712_0>=As && LA712_0<=Of)||LA712_0==LeftSquareBracket||LA712_0==RULE_DOUBLE||LA712_0==RULE_HEX_INT||LA712_0==RULE_OCTAL_INT||LA712_0==RULE_SCIENTIFIC_INT||LA712_0==RULE_IDENTIFIER||LA712_0==RULE_STRING||LA712_0==RULE_INT) ) {
            alt712=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 712, 0, input);

            throw nvae;
        }
        switch (alt712) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop713:
        do {
            int alt713=2;
            int LA713_0 = input.LA(1);

            if ( ((LA713_0>=Protected && LA713_0<=Abstract)||LA713_0==External||(LA713_0>=Private && LA713_0<=Project)||LA713_0==Public||LA713_0==Static||LA713_0==Const) ) {
                alt713=1;
            }


            switch (alt713) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop713;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred287_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop714:
        do {
            int alt714=2;
            int LA714_0 = input.LA(1);

            if ( ((LA714_0>=Protected && LA714_0<=Abstract)||LA714_0==External||(LA714_0>=Private && LA714_0<=Project)||LA714_0==Public||LA714_0==Static||LA714_0==Const) ) {
                alt714=1;
            }


            switch (alt714) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_148);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop714;
            }
        } while (true);

        match(input,Set,FOLLOW_184); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred290_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred291_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop715:
        do {
            int alt715=2;
            alt715 = dfa715.predict(input);
            switch (alt715) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop715;
            }
        } while (true);
        int alt716=2;
        int LA716_0 = input.LA(1);

        if ( (LA716_0==LessThanSign) ) {
            alt716=1;
        }
        switch (alt716) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt717=2;
        alt717 = dfa717.predict(input);
        switch (alt717) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt718=2;
        int LA718_0 = input.LA(1);

        if ( (LA718_0==Asterisk) ) {
            alt718=1;
        }
        else if ( ((LA718_0>=Intersection && LA718_0<=With)||(LA718_0>=For && LA718_0<=Var)||(LA718_0>=As && LA718_0<=Of)||LA718_0==LeftSquareBracket||LA718_0==RULE_DOUBLE||LA718_0==RULE_HEX_INT||LA718_0==RULE_OCTAL_INT||LA718_0==RULE_SCIENTIFIC_INT||LA718_0==RULE_IDENTIFIER||LA718_0==RULE_STRING||LA718_0==RULE_INT) ) {
            alt718=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 718, 0, input);

            throw nvae;
        }
        switch (alt718) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_92); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_92);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred300_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred301_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred303_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred315_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred317_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred319_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred320_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftParenthesis,FOLLOW_167); if (state.failed) return ;
        pushFollow(FOLLOW_65);
        ruleTAnonymousFormalParameterList(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_47); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred325_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Get,FOLLOW_25); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_25); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt731=2;
        int LA731_0 = input.LA(1);

        if ( (LA731_0==LessThanSign) ) {
            alt731=1;
        }
        switch (alt731) {
            case 1 :
                {
                pushFollow(FOLLOW_25);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_42);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred334_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred334_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA219 dfa219 = new DFA219(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA221 dfa221 = new DFA221(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA224 dfa224 = new DFA224(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA247 dfa247 = new DFA247(this);
    protected DFA250 dfa250 = new DFA250(this);
    protected DFA253 dfa253 = new DFA253(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA262 dfa262 = new DFA262(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA305 dfa305 = new DFA305(this);
    protected DFA318 dfa318 = new DFA318(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA322 dfa322 = new DFA322(this);
    protected DFA323 dfa323 = new DFA323(this);
    protected DFA324 dfa324 = new DFA324(this);
    protected DFA325 dfa325 = new DFA325(this);
    protected DFA357 dfa357 = new DFA357(this);
    protected DFA356 dfa356 = new DFA356(this);
    protected DFA359 dfa359 = new DFA359(this);
    protected DFA358 dfa358 = new DFA358(this);
    protected DFA361 dfa361 = new DFA361(this);
    protected DFA360 dfa360 = new DFA360(this);
    protected DFA363 dfa363 = new DFA363(this);
    protected DFA362 dfa362 = new DFA362(this);
    protected DFA365 dfa365 = new DFA365(this);
    protected DFA367 dfa367 = new DFA367(this);
    protected DFA399 dfa399 = new DFA399(this);
    protected DFA401 dfa401 = new DFA401(this);
    protected DFA442 dfa442 = new DFA442(this);
    protected DFA443 dfa443 = new DFA443(this);
    protected DFA456 dfa456 = new DFA456(this);
    protected DFA445 dfa445 = new DFA445(this);
    protected DFA449 dfa449 = new DFA449(this);
    protected DFA451 dfa451 = new DFA451(this);
    protected DFA453 dfa453 = new DFA453(this);
    protected DFA469 dfa469 = new DFA469(this);
    protected DFA458 dfa458 = new DFA458(this);
    protected DFA462 dfa462 = new DFA462(this);
    protected DFA464 dfa464 = new DFA464(this);
    protected DFA466 dfa466 = new DFA466(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA471 dfa471 = new DFA471(this);
    protected DFA475 dfa475 = new DFA475(this);
    protected DFA476 dfa476 = new DFA476(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA482 dfa482 = new DFA482(this);
    protected DFA485 dfa485 = new DFA485(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA495 dfa495 = new DFA495(this);
    protected DFA497 dfa497 = new DFA497(this);
    protected DFA499 dfa499 = new DFA499(this);
    protected DFA502 dfa502 = new DFA502(this);
    protected DFA512 dfa512 = new DFA512(this);
    protected DFA516 dfa516 = new DFA516(this);
    protected DFA526 dfa526 = new DFA526(this);
    protected DFA532 dfa532 = new DFA532(this);
    protected DFA536 dfa536 = new DFA536(this);
    protected DFA537 dfa537 = new DFA537(this);
    protected DFA550 dfa550 = new DFA550(this);
    protected DFA551 dfa551 = new DFA551(this);
    protected DFA553 dfa553 = new DFA553(this);
    protected DFA566 dfa566 = new DFA566(this);
    protected DFA573 dfa573 = new DFA573(this);
    protected DFA577 dfa577 = new DFA577(this);
    protected DFA647 dfa647 = new DFA647(this);
    protected DFA650 dfa650 = new DFA650(this);
    protected DFA652 dfa652 = new DFA652(this);
    protected DFA655 dfa655 = new DFA655(this);
    protected DFA657 dfa657 = new DFA657(this);
    protected DFA659 dfa659 = new DFA659(this);
    protected DFA661 dfa661 = new DFA661(this);
    protected DFA663 dfa663 = new DFA663(this);
    protected DFA697 dfa697 = new DFA697(this);
    protected DFA699 dfa699 = new DFA699(this);
    protected DFA703 dfa703 = new DFA703(this);
    protected DFA705 dfa705 = new DFA705(this);
    protected DFA709 dfa709 = new DFA709(this);
    protected DFA711 dfa711 = new DFA711(this);
    protected DFA715 dfa715 = new DFA715(this);
    protected DFA717 dfa717 = new DFA717(this);
    static final String dfa_1s = "\123\uffff";
    static final String dfa_2s = "\1\4\13\0\107\uffff";
    static final String dfa_3s = "\1\u0095\13\0\107\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "152:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | this_ImportDeclaration_4= ruleImportDeclaration | this_ExportDeclaration_5= ruleExportDeclaration | this_RootStatement_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);

                         
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA3_0==Import) ) {s = 13;}

                        else if ( (LA3_0==Export) ) {s = 14;}

                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||LA3_0==HyphenMinusHyphenMinus||LA3_0==SolidusEqualsSign||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);

                         
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);

                         
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);

                         
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);

                         
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\16\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\3\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\3\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\1\3\1\4\1\5";
    static final String dfa_11s = "\16\uffff}>";
    static final String[] dfa_12s = {
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "336:3: ( ( () this_ExportDeclarationImpl_2= ruleExportDeclarationImpl[$current] ) | ( () this_ImportDeclarationImpl_4= ruleImportDeclarationImpl[$current] ) | ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_7= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_8= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeVariables_14= ruleTypeVariables[$current] )? (this_ClassExtendsClause_15= ruleClassExtendsClause[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeVariables_21= ruleTypeVariables[$current] )? (this_InterfaceImplementsList_22= ruleInterfaceImplementsList[$current] )? ) ) this_Members_23= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_25_0= ruleN4Modifier ) )* otherlv_26= Enum ( (lv_name_27_0= ruleBindingIdentifier ) ) otherlv_28= LeftCurlyBracket ( (lv_literals_29_0= ruleN4EnumLiteral ) ) (otherlv_30= Comma ( (lv_literals_31_0= ruleN4EnumLiteral ) ) )* otherlv_32= RightCurlyBracket ) )";
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "448:5: ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeVariables_14= ruleTypeVariables[$current] )? (this_ClassExtendsClause_15= ruleClassExtendsClause[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeVariables_21= ruleTypeVariables[$current] )? (this_InterfaceImplementsList_22= ruleInterfaceImplementsList[$current] )? ) )";
        }
    }
    static final String dfa_19s = "\101\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "920:5: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (lv_exportedElement_9_0= ruleExportableElement ) ) | ( ( (lv_defaultExportedExpression_10_0= norm1_AssignmentExpression ) ) ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_0==CommercialAt) ) {s = 1;}

                        else if ( (LA18_0==Private) ) {s = 2;}

                        else if ( (LA18_0==Project) ) {s = 3;}

                        else if ( (LA18_0==Protected) ) {s = 4;}

                        else if ( (LA18_0==Public) ) {s = 5;}

                        else if ( (LA18_0==External) ) {s = 6;}

                        else if ( (LA18_0==Abstract) ) {s = 7;}

                        else if ( (LA18_0==Static) ) {s = 8;}

                        else if ( (LA18_0==Const) && (synpred9_InternalN4JSParser())) {s = 9;}

                        else if ( (LA18_0==Class) ) {s = 10;}

                        else if ( (LA18_0==Interface) ) {s = 11;}

                        else if ( (LA18_0==Enum) && (synpred9_InternalN4JSParser())) {s = 12;}

                        else if ( (LA18_0==Async) ) {s = 13;}

                        else if ( (LA18_0==Function) ) {s = 14;}

                        else if ( (LA18_0==Var) && (synpred9_InternalN4JSParser())) {s = 15;}

                        else if ( (LA18_0==Let) ) {s = 16;}

                        else if ( ((LA18_0>=Intersection && LA18_0<=Implements)||LA18_0==Promisify||LA18_0==Delete||(LA18_0>=Target && LA18_0<=Typeof)||LA18_0==Await||(LA18_0>=False && LA18_0<=Super)||LA18_0==Union||(LA18_0>=Yield && LA18_0<=This)||(LA18_0>=From && LA18_0<=Void)||LA18_0==Get||(LA18_0>=New && LA18_0<=Set)||LA18_0==PlusSignPlusSign||LA18_0==HyphenMinusHyphenMinus||LA18_0==SolidusEqualsSign||LA18_0==As||LA18_0==Of||LA18_0==ExclamationMark||LA18_0==LeftParenthesis||LA18_0==PlusSign||LA18_0==HyphenMinus||LA18_0==Solidus||LA18_0==LessThanSign||LA18_0==LeftSquareBracket||LA18_0==LeftCurlyBracket||LA18_0==Tilde||LA18_0==RULE_DOUBLE||(LA18_0>=RULE_HEX_INT && LA18_0<=RULE_LEGACY_OCTAL_INT)||LA18_0==RULE_SCIENTIFIC_INT||LA18_0==RULE_IDENTIFIER||LA18_0==RULE_STRING||(LA18_0>=RULE_TEMPLATE_HEAD && LA18_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA18_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index18_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\71\uffff";
    static final String dfa_26s = "\20\uffff\11\17\40\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\6\uffff\7\11\1\4\1\17\40\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\6\uffff\11\u0099\40\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\2\5\1\6\11\uffff\37\3\1\5";
    static final String dfa_30s = "\1\15\1\uffff\1\16\1\0\1\21\1\7\1\3\1\11\1\1\1\13\6\uffff\1\20\1\12\1\5\1\10\1\6\1\2\1\17\1\4\1\14\40\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\3\17\1\uffff\1\17\1\27\1\22\1\25\2\uffff\1\24\1\16\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\1\uffff\1\17\1\uffff\1\30\1\17\2\uffff\1\12\1\11\3\uffff\1\17\1\uffff\2\17\2\uffff\1\14\1\17\3\uffff\1\17\7\uffff\2\17\1\uffff\2\17\1\uffff\1\17\21\uffff\1\17\3\uffff\1\17\23\uffff\2\17\2\uffff\1\17\17\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\52\1\45\1\57\1\uffff\1\54\1\60\1\62\1\41\2\uffff\1\40\2\uffff\1\66\1\uffff\1\61\1\37\3\uffff\1\63\1\uffff\1\42\1\uffff\1\47\1\uffff\1\56\1\55\7\uffff\1\51\1\uffff\1\33\1\53\3\uffff\1\44\3\uffff\1\50\7\uffff\1\34\1\36\1\uffff\1\64\1\35\23\uffff\1\43\3\uffff\1\46\11\uffff\1\17\3\uffff\2\17\1\65\1\17\6\uffff\1\67\1\uffff\1\17\1\31\14\uffff\1\32\30\uffff\1\17\1\uffff\1\17",
            "\1\16\120\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\40\uffff\1\70\5\uffff\1\17\1\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "1160:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedExportableElement_0= ruleAnnotatedExportableElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_4= ruleFunctionDeclaration ) | this_ExportedVariableStatement_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_3 = input.LA(1);

                         
                        int index24_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_3==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_3==Private) ) {s = 2;}

                        else if ( (LA24_3==Project) ) {s = 3;}

                        else if ( (LA24_3==Protected) ) {s = 4;}

                        else if ( (LA24_3==Public) ) {s = 5;}

                        else if ( (LA24_3==External) ) {s = 6;}

                        else if ( (LA24_3==Abstract) ) {s = 7;}

                        else if ( (LA24_3==Static) ) {s = 8;}

                        else if ( (LA24_3==Const) ) {s = 9;}

                        else if ( (LA24_3==Let||LA24_3==Var) ) {s = 15;}

                        else if ( (LA24_3==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_3==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_3==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_3==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index24_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_8==Let||LA24_8==Var) ) {s = 15;}

                        else if ( (LA24_8==Const) ) {s = 9;}

                        else if ( (LA24_8==Private) ) {s = 2;}

                        else if ( (LA24_8==Project) ) {s = 3;}

                        else if ( (LA24_8==Protected) ) {s = 4;}

                        else if ( (LA24_8==Public) ) {s = 5;}

                        else if ( (LA24_8==External) ) {s = 6;}

                        else if ( (LA24_8==Abstract) ) {s = 7;}

                        else if ( (LA24_8==Static) ) {s = 8;}

                        else if ( (LA24_8==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_8==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_8==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_8==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_8==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_21 = input.LA(1);

                         
                        int index24_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_21==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_21==Private) ) {s = 2;}

                        else if ( (LA24_21==Project) ) {s = 3;}

                        else if ( (LA24_21==Protected) ) {s = 4;}

                        else if ( (LA24_21==Public) ) {s = 5;}

                        else if ( (LA24_21==External) ) {s = 6;}

                        else if ( (LA24_21==Abstract) ) {s = 7;}

                        else if ( (LA24_21==Static) ) {s = 8;}

                        else if ( (LA24_21==Const) ) {s = 9;}

                        else if ( (LA24_21==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_21==EOF||LA24_21==Let||LA24_21==Var||LA24_21==Comma||(LA24_21>=Colon && LA24_21<=Semicolon)||LA24_21==EqualsSign||LA24_21==RightCurlyBracket||LA24_21==RULE_ML_COMMENT||LA24_21==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_21==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_21==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_21==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index24_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_6 = input.LA(1);

                         
                        int index24_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_6==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_6==Private) ) {s = 2;}

                        else if ( (LA24_6==Project) ) {s = 3;}

                        else if ( (LA24_6==Protected) ) {s = 4;}

                        else if ( (LA24_6==Public) ) {s = 5;}

                        else if ( (LA24_6==External) ) {s = 6;}

                        else if ( (LA24_6==Abstract) ) {s = 7;}

                        else if ( (LA24_6==Static) ) {s = 8;}

                        else if ( (LA24_6==Const) ) {s = 9;}

                        else if ( (LA24_6==Let||LA24_6==Var) ) {s = 15;}

                        else if ( (LA24_6==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_6==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_6==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_6==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index24_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_23 = input.LA(1);

                         
                        int index24_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA24_23>=4 && LA24_23<=126 && (s=T2S.M_1[LA24_23-(4)])>=0) && (synpred12_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA24_23==EOF||LA24_23==Comma||(LA24_23>=Colon && LA24_23<=Semicolon)||LA24_23==EqualsSign||LA24_23==RightCurlyBracket||LA24_23==RULE_ML_COMMENT||LA24_23==RULE_EOL) ) {s = 15;}

                         
                        input.seek(index24_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_18 = input.LA(1);

                         
                        int index24_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_18==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_18==Private) ) {s = 2;}

                        else if ( (LA24_18==Project) ) {s = 3;}

                        else if ( (LA24_18==Protected) ) {s = 4;}

                        else if ( (LA24_18==Public) ) {s = 5;}

                        else if ( (LA24_18==External) ) {s = 6;}

                        else if ( (LA24_18==Abstract) ) {s = 7;}

                        else if ( (LA24_18==Static) ) {s = 8;}

                        else if ( (LA24_18==Const) ) {s = 9;}

                        else if ( (LA24_18==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_18==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_18==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_18==EOF||LA24_18==Let||LA24_18==Var||LA24_18==Comma||(LA24_18>=Colon && LA24_18<=Semicolon)||LA24_18==EqualsSign||LA24_18==RightCurlyBracket||LA24_18==RULE_ML_COMMENT||LA24_18==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_18==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA24_20 = input.LA(1);

                         
                        int index24_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_20==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_20==Private) ) {s = 2;}

                        else if ( (LA24_20==Project) ) {s = 3;}

                        else if ( (LA24_20==Protected) ) {s = 4;}

                        else if ( (LA24_20==Public) ) {s = 5;}

                        else if ( (LA24_20==External) ) {s = 6;}

                        else if ( (LA24_20==Abstract) ) {s = 7;}

                        else if ( (LA24_20==Static) ) {s = 8;}

                        else if ( (LA24_20==Const) ) {s = 9;}

                        else if ( (LA24_20==EOF||LA24_20==Let||LA24_20==Var||LA24_20==Comma||(LA24_20>=Colon && LA24_20<=Semicolon)||LA24_20==EqualsSign||LA24_20==RightCurlyBracket||LA24_20==RULE_ML_COMMENT||LA24_20==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_20==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_20==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_20==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_20==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index24_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA24_5 = input.LA(1);

                         
                        int index24_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_5==Let||LA24_5==Var) ) {s = 15;}

                        else if ( (LA24_5==Const) ) {s = 9;}

                        else if ( (LA24_5==Private) ) {s = 2;}

                        else if ( (LA24_5==Project) ) {s = 3;}

                        else if ( (LA24_5==Protected) ) {s = 4;}

                        else if ( (LA24_5==Public) ) {s = 5;}

                        else if ( (LA24_5==External) ) {s = 6;}

                        else if ( (LA24_5==Abstract) ) {s = 7;}

                        else if ( (LA24_5==Static) ) {s = 8;}

                        else if ( (LA24_5==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_5==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_5==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_5==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_5==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA24_19 = input.LA(1);

                         
                        int index24_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_19==EOF||LA24_19==Let||LA24_19==Var||LA24_19==Comma||(LA24_19>=Colon && LA24_19<=Semicolon)||LA24_19==EqualsSign||LA24_19==RightCurlyBracket||LA24_19==RULE_ML_COMMENT||LA24_19==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_19==Const) ) {s = 9;}

                        else if ( (LA24_19==Private) ) {s = 2;}

                        else if ( (LA24_19==Project) ) {s = 3;}

                        else if ( (LA24_19==Protected) ) {s = 4;}

                        else if ( (LA24_19==Public) ) {s = 5;}

                        else if ( (LA24_19==External) ) {s = 6;}

                        else if ( (LA24_19==Abstract) ) {s = 7;}

                        else if ( (LA24_19==Static) ) {s = 8;}

                        else if ( (LA24_19==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_19==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_19==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_19==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_19==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA24_7 = input.LA(1);

                         
                        int index24_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_7==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_7==Private) ) {s = 2;}

                        else if ( (LA24_7==Project) ) {s = 3;}

                        else if ( (LA24_7==Protected) ) {s = 4;}

                        else if ( (LA24_7==Public) ) {s = 5;}

                        else if ( (LA24_7==External) ) {s = 6;}

                        else if ( (LA24_7==Abstract) ) {s = 7;}

                        else if ( (LA24_7==Static) ) {s = 8;}

                        else if ( (LA24_7==Const) ) {s = 9;}

                        else if ( (LA24_7==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_7==Let||LA24_7==Var) ) {s = 15;}

                        else if ( (LA24_7==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_7==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_7==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index24_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA24_17 = input.LA(1);

                         
                        int index24_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_17==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_17==Private) ) {s = 2;}

                        else if ( (LA24_17==Project) ) {s = 3;}

                        else if ( (LA24_17==Protected) ) {s = 4;}

                        else if ( (LA24_17==Public) ) {s = 5;}

                        else if ( (LA24_17==External) ) {s = 6;}

                        else if ( (LA24_17==Abstract) ) {s = 7;}

                        else if ( (LA24_17==Static) ) {s = 8;}

                        else if ( (LA24_17==Const) ) {s = 9;}

                        else if ( (LA24_17==EOF||LA24_17==Let||LA24_17==Var||LA24_17==Comma||(LA24_17>=Colon && LA24_17<=Semicolon)||LA24_17==EqualsSign||LA24_17==RightCurlyBracket||LA24_17==RULE_ML_COMMENT||LA24_17==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_17==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_17==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_17==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_17==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index24_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_9==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_9==Private) ) {s = 16;}

                        else if ( (LA24_9==Project) ) {s = 17;}

                        else if ( (LA24_9==Protected) ) {s = 18;}

                        else if ( (LA24_9==Public) ) {s = 19;}

                        else if ( (LA24_9==External) ) {s = 20;}

                        else if ( (LA24_9==Abstract) ) {s = 21;}

                        else if ( (LA24_9==Static) ) {s = 22;}

                        else if ( (LA24_9==Const) ) {s = 9;}

                        else if ( ((LA24_9>=Intersection && LA24_9<=Implements)||LA24_9==Promisify||LA24_9==Target||LA24_9==Await||LA24_9==Union||(LA24_9>=Yield && LA24_9<=This)||LA24_9==From||LA24_9==Type||(LA24_9>=Get && LA24_9<=Let)||(LA24_9>=Out && LA24_9<=Set)||LA24_9==Var||LA24_9==As||LA24_9==Of||(LA24_9>=CommercialAt && LA24_9<=LeftSquareBracket)||LA24_9==LeftCurlyBracket||LA24_9==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA24_9==Interface) ) {s = 23;}

                        else if ( (LA24_9==Async) ) {s = 24;}

                        else if ( (LA24_9==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_9==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA24_24 = input.LA(1);

                         
                        int index24_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_24==EOF||LA24_24==Comma||(LA24_24>=Colon && LA24_24<=Semicolon)||LA24_24==EqualsSign||LA24_24==RightCurlyBracket||LA24_24==RULE_ML_COMMENT||LA24_24==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_24==RULE_NO_LINE_TERMINATOR) && (synpred14_InternalN4JSParser())) {s = 56;}

                        else if ( (LA24_24==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index24_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA24_0 = input.LA(1);

                         
                        int index24_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}

                        else if ( (LA24_0==Private) ) {s = 2;}

                        else if ( (LA24_0==Project) ) {s = 3;}

                        else if ( (LA24_0==Protected) ) {s = 4;}

                        else if ( (LA24_0==Public) ) {s = 5;}

                        else if ( (LA24_0==External) ) {s = 6;}

                        else if ( (LA24_0==Abstract) ) {s = 7;}

                        else if ( (LA24_0==Static) ) {s = 8;}

                        else if ( (LA24_0==Const) ) {s = 9;}

                        else if ( (LA24_0==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_0==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_0==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_0==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_0==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_0==Let||LA24_0==Var) ) {s = 15;}

                         
                        input.seek(index24_0);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA24_2 = input.LA(1);

                         
                        int index24_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_2==Let||LA24_2==Var) ) {s = 15;}

                        else if ( (LA24_2==Const) ) {s = 9;}

                        else if ( (LA24_2==Private) ) {s = 2;}

                        else if ( (LA24_2==Project) ) {s = 3;}

                        else if ( (LA24_2==Protected) ) {s = 4;}

                        else if ( (LA24_2==Public) ) {s = 5;}

                        else if ( (LA24_2==External) ) {s = 6;}

                        else if ( (LA24_2==Abstract) ) {s = 7;}

                        else if ( (LA24_2==Static) ) {s = 8;}

                        else if ( (LA24_2==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_2==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_2==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_2==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_2==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_2);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA24_22 = input.LA(1);

                         
                        int index24_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_22==EOF||LA24_22==Let||LA24_22==Var||LA24_22==Comma||(LA24_22>=Colon && LA24_22<=Semicolon)||LA24_22==EqualsSign||LA24_22==RightCurlyBracket||LA24_22==RULE_ML_COMMENT||LA24_22==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_22==Const) ) {s = 9;}

                        else if ( (LA24_22==Private) ) {s = 2;}

                        else if ( (LA24_22==Project) ) {s = 3;}

                        else if ( (LA24_22==Protected) ) {s = 4;}

                        else if ( (LA24_22==Public) ) {s = 5;}

                        else if ( (LA24_22==External) ) {s = 6;}

                        else if ( (LA24_22==Abstract) ) {s = 7;}

                        else if ( (LA24_22==Static) ) {s = 8;}

                        else if ( (LA24_22==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_22==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_22==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_22==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_22==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA24_16 = input.LA(1);

                         
                        int index24_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_16==EOF||LA24_16==Let||LA24_16==Var||LA24_16==Comma||(LA24_16>=Colon && LA24_16<=Semicolon)||LA24_16==EqualsSign||LA24_16==RightCurlyBracket||LA24_16==RULE_ML_COMMENT||LA24_16==RULE_EOL) ) {s = 15;}

                        else if ( (LA24_16==Const) ) {s = 9;}

                        else if ( (LA24_16==Private) ) {s = 2;}

                        else if ( (LA24_16==Project) ) {s = 3;}

                        else if ( (LA24_16==Protected) ) {s = 4;}

                        else if ( (LA24_16==Public) ) {s = 5;}

                        else if ( (LA24_16==External) ) {s = 6;}

                        else if ( (LA24_16==Abstract) ) {s = 7;}

                        else if ( (LA24_16==Static) ) {s = 8;}

                        else if ( (LA24_16==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_16==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_16==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_16==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_16==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index24_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA24_4 = input.LA(1);

                         
                        int index24_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_4==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA24_4==Private) ) {s = 2;}

                        else if ( (LA24_4==Project) ) {s = 3;}

                        else if ( (LA24_4==Protected) ) {s = 4;}

                        else if ( (LA24_4==Public) ) {s = 5;}

                        else if ( (LA24_4==External) ) {s = 6;}

                        else if ( (LA24_4==Abstract) ) {s = 7;}

                        else if ( (LA24_4==Static) ) {s = 8;}

                        else if ( (LA24_4==Const) ) {s = 9;}

                        else if ( (LA24_4==Async) && (synpred14_InternalN4JSParser())) {s = 13;}

                        else if ( (LA24_4==Function) && (synpred14_InternalN4JSParser())) {s = 14;}

                        else if ( (LA24_4==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA24_4==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA24_4==Let||LA24_4==Var) ) {s = 15;}

                         
                        input.seek(index24_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\7\11\1\17\1\4";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\1\uffff\1\12\1\uffff\1\24\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "1349:3: ( ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] this_FunctionImpl_4= ruleFunctionImpl[$current] ) | ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* ( (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( (lv_varDeclsOrBindings_8_0= ruleExportedVariableDeclarationOrBinding ) ) (otherlv_9= Comma ( (lv_varDeclsOrBindings_10_0= ruleExportedVariableDeclarationOrBinding ) ) )* ruleSemi ) | ( ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsClause_18= ruleClassExtendsClause[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceImplementsList_25= ruleInterfaceImplementsList[$current] )? ) ) this_Members_26= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_28_0= ruleN4Modifier ) )* otherlv_29= Enum ( (lv_name_30_0= ruleBindingIdentifier ) ) otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 1409:5: ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )*";
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "1501:5: ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsClause_18= ruleClassExtendsClause[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceImplementsList_25= ruleInterfaceImplementsList[$current] )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "2093:2: ( ( ( ruleBindingIdentifier ) ) | ( ( ( ruleIdentifierName ) ) otherlv_2= As ( (lv_alias_3_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\133\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\6\3\uffff\1\132\124\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\1\0\2\uffff\1\0\124\uffff";
    static final String dfa_56s = "\1\u0099\1\0\1\u0095\1\0\2\uffff\1\0\124\uffff";
    static final String dfa_57s = "\4\uffff\1\1\1\2\1\uffff\124\1";
    static final String dfa_58s = "\1\3\1\2\1\1\1\4\2\uffff\1\0\124\uffff}>";
    static final String[] dfa_59s = {
            "\3\5\1\uffff\11\5\2\uffff\16\5\1\uffff\23\5\4\uffff\10\5\5\uffff\1\5\1\uffff\1\5\1\uffff\1\5\7\uffff\3\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\1\1\5\3\uffff\2\5\2\uffff\1\5\1\uffff\1\3\1\5\3\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\11\uffff\2\5\10\uffff\1\5\1\uffff\1\4\1\uffff\1\4",
            "\1\uffff",
            "\1\46\1\41\1\52\1\uffff\1\50\1\21\1\12\1\15\1\116\1\125\1\14\1\27\1\130\2\uffff\1\10\1\11\1\101\1\24\1\23\1\13\1\120\1\16\1\122\1\43\1\103\1\26\1\51\1\117\1\uffff\1\20\1\17\1\71\1\57\1\123\1\45\1\114\1\34\1\47\1\131\1\127\1\22\1\40\1\73\1\56\1\70\1\44\1\102\1\121\4\uffff\1\115\1\35\1\31\1\55\1\53\1\36\1\124\1\30\5\uffff\1\104\1\uffff\1\105\1\uffff\1\75\7\uffff\1\37\1\113\1\112\1\uffff\1\42\2\uffff\1\111\2\uffff\1\54\2\uffff\1\106\1\uffff\1\107\1\uffff\1\74\1\uffff\1\32\1\60\3\uffff\1\7\1\76\2\uffff\1\25\1\uffff\1\126\1\110\3\uffff\1\61\1\uffff\1\66\1\63\1\64\1\65\1\uffff\1\67\1\uffff\1\33\2\uffff\1\72\11\uffff\1\100\1\77\10\uffff\1\62",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "2362:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA50_6 = input.LA(1);

                         
                        int index50_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA50_6==EOF) && (synpred18_InternalN4JSParser())) {s = 90;}

                         
                        input.seek(index50_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA50_2 = input.LA(1);

                         
                        int index50_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA50_2==EOF) ) {s = 6;}

                        
                        else if ((LA50_2>=-1 && LA50_2<=149 && (s=T2S.M_2[LA50_2-(-1)])>=0) && (synpred18_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index50_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA50_1 = input.LA(1);

                         
                        int index50_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index50_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA50_0 = input.LA(1);

                         
                        int index50_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA50_0==Semicolon) ) {s = 1;}

                        else if ( (LA50_0==EOF) ) {s = 2;}

                        else if ( (LA50_0==RightCurlyBracket) ) {s = 3;}

                        else if ( (LA50_0==RULE_ML_COMMENT||LA50_0==RULE_EOL) && (synpred18_InternalN4JSParser())) {s = 4;}

                        else if ( ((LA50_0>=Intersection && LA50_0<=Implements)||(LA50_0>=Promisify && LA50_0<=Default)||(LA50_0>=Private && LA50_0<=Break)||(LA50_0>=Class && LA50_0<=With)||(LA50_0>=For && LA50_0<=Var)||LA50_0==PlusSignPlusSign||LA50_0==HyphenMinusHyphenMinus||LA50_0==SolidusEqualsSign||(LA50_0>=As && LA50_0<=If)||LA50_0==Of||LA50_0==ExclamationMark||LA50_0==LeftParenthesis||LA50_0==PlusSign||LA50_0==HyphenMinus||LA50_0==Solidus||LA50_0==LessThanSign||(LA50_0>=CommercialAt && LA50_0<=LeftSquareBracket)||LA50_0==LeftCurlyBracket||LA50_0==Tilde||LA50_0==RULE_DOUBLE||(LA50_0>=RULE_HEX_INT && LA50_0<=RULE_LEGACY_OCTAL_INT)||LA50_0==RULE_SCIENTIFIC_INT||LA50_0==RULE_IDENTIFIER||LA50_0==RULE_STRING||(LA50_0>=RULE_TEMPLATE_HEAD && LA50_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA50_0==RULE_INT) ) {s = 5;}

                         
                        input.seek(index50_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA50_3 = input.LA(1);

                         
                        int index50_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalN4JSParser()) ) {s = 89;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index50_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\127\uffff";
    static final String dfa_61s = "\1\2\126\uffff";
    static final String dfa_62s = "\1\4\1\0\125\uffff";
    static final String dfa_63s = "\1\u0099\1\0\125\uffff";
    static final String dfa_64s = "\2\uffff\1\2\123\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\125\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3038:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_1 = input.LA(1);

                         
                        int index69_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3074:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSParser()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\77\uffff";
    static final String dfa_68s = "\1\4\1\0\75\uffff";
    static final String dfa_69s = "\1\u0095\1\0\75\uffff";
    static final String dfa_70s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "3661:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "3909:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4157:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4405:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\43\uffff";
    static final String dfa_74s = "\1\4\1\0\41\uffff";
    static final String dfa_75s = "\1\176\1\0\41\uffff";
    static final String dfa_76s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_77s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_78s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "5210:3: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= ruleBindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_0 = input.LA(1);

                         
                        int index105_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA105_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA105_0==LeftSquareBracket) && (synpred57_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA105_0>=Intersection && LA105_0<=Implements)||(LA105_0>=Promisify && LA105_0<=Abstract)||LA105_0==External||(LA105_0>=Private && LA105_0<=Project)||LA105_0==Public||LA105_0==Static||LA105_0==Target||(LA105_0>=Async && LA105_0<=Await)||LA105_0==Union||(LA105_0>=Yield && LA105_0<=This)||LA105_0==From||LA105_0==This_1||(LA105_0>=Type && LA105_0<=Void)||LA105_0==FullStopFullStopFullStop||(LA105_0>=Get && LA105_0<=Let)||(LA105_0>=Out && LA105_0<=Set)||LA105_0==As||LA105_0==Of||LA105_0==CommercialAt||LA105_0==Tilde||LA105_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index105_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\2\uffff\11\13\1\uffff";
    static final String dfa_80s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_81s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_82s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_83s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "5255:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_84s = "\42\uffff";
    static final String dfa_85s = "\1\4\1\0\40\uffff";
    static final String dfa_86s = "\1\176\1\0\40\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\36\uffff";
    static final String dfa_88s = "\1\0\1\1\40\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "5364:3: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_0 = input.LA(1);

                         
                        int index112_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA112_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA112_0==LeftSquareBracket) && (synpred58_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA112_0>=Intersection && LA112_0<=Implements)||(LA112_0>=Promisify && LA112_0<=Abstract)||LA112_0==External||(LA112_0>=Private && LA112_0<=Project)||LA112_0==Public||LA112_0==Static||LA112_0==Target||(LA112_0>=Async && LA112_0<=Await)||LA112_0==Union||LA112_0==This||LA112_0==From||LA112_0==This_1||(LA112_0>=Type && LA112_0<=Void)||LA112_0==FullStopFullStopFullStop||(LA112_0>=Get && LA112_0<=Let)||(LA112_0>=Out && LA112_0<=Set)||LA112_0==As||LA112_0==Of||LA112_0==CommercialAt||LA112_0==Tilde||LA112_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index112_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "5409:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_91s = "\120\uffff";
    static final String dfa_92s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_93s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_94s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_95s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_96s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\12\1\35\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\40\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "5673:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= ruleBlock ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= ruleFunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm1_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= ruleLabelledStatement ) | this_ExpressionStatement_5= ruleExpressionStatement | this_IfStatement_6= ruleIfStatement | this_IterationStatement_7= ruleIterationStatement | this_ContinueStatement_8= ruleContinueStatement | this_BreakStatement_9= ruleBreakStatement | this_ReturnStatement_10= ruleReturnStatement | this_WithStatement_11= ruleWithStatement | this_SwitchStatement_12= ruleSwitchStatement | this_ThrowStatement_13= ruleThrowStatement | this_TryStatement_14= ruleTryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_0 = input.LA(1);

                         
                        int index117_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA117_0>=10 && LA117_0<=110 && (s=T2S.M_3[LA117_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA117_0==Var) && (synpred63_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA117_0>=4 && LA117_0<=126 && (s=T2S.M_4[LA117_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA117_0==Delete||LA117_0==Typeof||LA117_0==Class||(LA117_0>=False && LA117_0<=Super)||(LA117_0>=Null && LA117_0<=True)||LA117_0==Void||LA117_0==New||LA117_0==PlusSignPlusSign||LA117_0==HyphenMinusHyphenMinus||LA117_0==SolidusEqualsSign||LA117_0==ExclamationMark||LA117_0==LeftParenthesis||LA117_0==PlusSign||LA117_0==HyphenMinus||LA117_0==Solidus||LA117_0==LessThanSign||(LA117_0>=CommercialAt && LA117_0<=LeftSquareBracket)||LA117_0==Tilde||LA117_0==RULE_DOUBLE||(LA117_0>=RULE_HEX_INT && LA117_0<=RULE_LEGACY_OCTAL_INT)||LA117_0==RULE_SCIENTIFIC_INT||LA117_0==RULE_STRING||(LA117_0>=RULE_TEMPLATE_HEAD && LA117_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA117_0==RULE_INT) ) {s = 33;}

                        else if ( (LA117_0==If) ) {s = 65;}

                        else if ( (LA117_0==While||LA117_0==For||LA117_0==Do) ) {s = 66;}

                        else if ( (LA117_0==Continue) ) {s = 69;}

                        else if ( (LA117_0==Break) ) {s = 70;}

                        else if ( (LA117_0==Return) ) {s = 71;}

                        else if ( (LA117_0==With) ) {s = 72;}

                        else if ( (LA117_0==Switch) ) {s = 73;}

                        else if ( (LA117_0==Throw) ) {s = 74;}

                        else if ( (LA117_0==Try) ) {s = 75;}

                        else if ( (LA117_0==Debugger) ) {s = 76;}

                         
                        input.seek(index117_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_3 = input.LA(1);

                         
                        int index117_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_6 = input.LA(1);

                         
                        int index117_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_7 = input.LA(1);

                         
                        int index117_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_8 = input.LA(1);

                         
                        int index117_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_9 = input.LA(1);

                         
                        int index117_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred63_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index117_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_10 = input.LA(1);

                         
                        int index117_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_11 = input.LA(1);

                         
                        int index117_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_13 = input.LA(1);

                         
                        int index117_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_16 = input.LA(1);

                         
                        int index117_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_18 = input.LA(1);

                         
                        int index117_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA117_19 = input.LA(1);

                         
                        int index117_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA117_20 = input.LA(1);

                         
                        int index117_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA117_21 = input.LA(1);

                         
                        int index117_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA117_22 = input.LA(1);

                         
                        int index117_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA117_23 = input.LA(1);

                         
                        int index117_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA117_24 = input.LA(1);

                         
                        int index117_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA117_25 = input.LA(1);

                         
                        int index117_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA117_26 = input.LA(1);

                         
                        int index117_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA117_27 = input.LA(1);

                         
                        int index117_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA117_28 = input.LA(1);

                         
                        int index117_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA117_29 = input.LA(1);

                         
                        int index117_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA117_30 = input.LA(1);

                         
                        int index117_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA117_31 = input.LA(1);

                         
                        int index117_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA117_32 = input.LA(1);

                         
                        int index117_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_98s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_99s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_100s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_101s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\12\1\34\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\37\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "5874:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= norm1_Block ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= norm1_FunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm3_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= norm1_LabelledStatement ) | this_ExpressionStatement_5= norm1_ExpressionStatement | this_IfStatement_6= norm1_IfStatement | this_IterationStatement_7= norm1_IterationStatement | this_ContinueStatement_8= norm1_ContinueStatement | this_BreakStatement_9= norm1_BreakStatement | this_ReturnStatement_10= norm1_ReturnStatement | this_WithStatement_11= norm1_WithStatement | this_SwitchStatement_12= norm1_SwitchStatement | this_ThrowStatement_13= norm1_ThrowStatement | this_TryStatement_14= norm1_TryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_0 = input.LA(1);

                         
                        int index118_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA118_0>=10 && LA118_0<=110 && (s=T2S.M_3[LA118_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA118_0==Var) && (synpred67_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA118_0>=4 && LA118_0<=126 && (s=T2S.M_6[LA118_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA118_0==Delete||LA118_0==Typeof||LA118_0==Class||(LA118_0>=False && LA118_0<=Super)||LA118_0==Yield||(LA118_0>=Null && LA118_0<=True)||LA118_0==Void||LA118_0==New||LA118_0==PlusSignPlusSign||LA118_0==HyphenMinusHyphenMinus||LA118_0==SolidusEqualsSign||LA118_0==ExclamationMark||LA118_0==LeftParenthesis||LA118_0==PlusSign||LA118_0==HyphenMinus||LA118_0==Solidus||LA118_0==LessThanSign||(LA118_0>=CommercialAt && LA118_0<=LeftSquareBracket)||LA118_0==Tilde||LA118_0==RULE_DOUBLE||(LA118_0>=RULE_HEX_INT && LA118_0<=RULE_LEGACY_OCTAL_INT)||LA118_0==RULE_SCIENTIFIC_INT||LA118_0==RULE_STRING||(LA118_0>=RULE_TEMPLATE_HEAD && LA118_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA118_0==RULE_INT) ) {s = 32;}

                        else if ( (LA118_0==If) ) {s = 65;}

                        else if ( (LA118_0==While||LA118_0==For||LA118_0==Do) ) {s = 66;}

                        else if ( (LA118_0==Continue) ) {s = 69;}

                        else if ( (LA118_0==Break) ) {s = 70;}

                        else if ( (LA118_0==Return) ) {s = 71;}

                        else if ( (LA118_0==With) ) {s = 72;}

                        else if ( (LA118_0==Switch) ) {s = 73;}

                        else if ( (LA118_0==Throw) ) {s = 74;}

                        else if ( (LA118_0==Try) ) {s = 75;}

                        else if ( (LA118_0==Debugger) ) {s = 76;}

                         
                        input.seek(index118_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA118_1 = input.LA(1);

                         
                        int index118_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA118_2 = input.LA(1);

                         
                        int index118_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA118_3 = input.LA(1);

                         
                        int index118_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA118_4 = input.LA(1);

                         
                        int index118_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA118_5 = input.LA(1);

                         
                        int index118_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA118_6 = input.LA(1);

                         
                        int index118_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA118_7 = input.LA(1);

                         
                        int index118_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA118_8 = input.LA(1);

                         
                        int index118_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA118_9 = input.LA(1);

                         
                        int index118_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred67_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index118_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA118_10 = input.LA(1);

                         
                        int index118_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA118_11 = input.LA(1);

                         
                        int index118_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA118_13 = input.LA(1);

                         
                        int index118_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA118_15 = input.LA(1);

                         
                        int index118_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA118_19 = input.LA(1);

                         
                        int index118_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA118_20 = input.LA(1);

                         
                        int index118_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA118_21 = input.LA(1);

                         
                        int index118_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA118_23 = input.LA(1);

                         
                        int index118_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA118_24 = input.LA(1);

                         
                        int index118_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA118_25 = input.LA(1);

                         
                        int index118_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA118_26 = input.LA(1);

                         
                        int index118_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA118_27 = input.LA(1);

                         
                        int index118_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA118_28 = input.LA(1);

                         
                        int index118_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA118_29 = input.LA(1);

                         
                        int index118_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA118_30 = input.LA(1);

                         
                        int index118_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA118_31 = input.LA(1);

                         
                        int index118_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index118_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\116\uffff";
    static final String dfa_103s = "\1\4\1\0\114\uffff";
    static final String dfa_104s = "\1\u0095\1\0\114\uffff";
    static final String dfa_105s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_106s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_107s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6081:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= ruleAnnotatedFunctionDeclaration ) | this_RootStatement_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_1 = input.LA(1);

                         
                        int index119_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index119_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6126:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= norm1_AnnotatedFunctionDeclaration ) | this_RootStatement_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_1 = input.LA(1);

                         
                        int index120_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index120_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 6393:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_108s = "\35\uffff";
    static final String dfa_109s = "\1\4\34\uffff";
    static final String dfa_110s = "\1\176\34\uffff";
    static final String dfa_111s = "\1\uffff\33\2\1\1";
    static final String dfa_112s = "\1\0\34\uffff}>";
    static final String[] dfa_113s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[][] dfa_113 = unpackEncodedStringArray(dfa_113s);

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 7397:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_0 = input.LA(1);

                         
                        int index135_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA135_0>=4 && LA135_0<=126 && (s=T2S.M_7[LA135_0-(4)])>=0) && (synpred87_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA135_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index135_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 7483:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_0 = input.LA(1);

                         
                        int index137_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA137_0>=4 && LA137_0<=126 && (s=T2S.M_7[LA137_0-(4)])>=0) && (synpred88_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA137_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index137_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_114s = "\34\uffff";
    static final String dfa_115s = "\1\4\33\uffff";
    static final String dfa_116s = "\1\176\33\uffff";
    static final String dfa_117s = "\1\uffff\32\2\1\1";
    static final String dfa_118s = "\1\0\33\uffff}>";
    static final String[] dfa_119s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 7569:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_0 = input.LA(1);

                         
                        int index139_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA139_0>=4 && LA139_0<=126 && (s=T2S.M_9[LA139_0-(4)])>=0) && (synpred89_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA139_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index139_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 7655:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);

                         
                        int index141_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA141_0>=4 && LA141_0<=126 && (s=T2S.M_9[LA141_0-(4)])>=0) && (synpred90_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA141_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index141_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 7741:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_0 = input.LA(1);

                         
                        int index143_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA143_0>=4 && LA143_0<=126 && (s=T2S.M_7[LA143_0-(4)])>=0) && (synpred91_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA143_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index143_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 7847:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA146_0>=4 && LA146_0<=126 && (s=T2S.M_7[LA146_0-(4)])>=0) && (synpred92_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA146_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 7953:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);

                         
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA149_0>=4 && LA149_0<=126 && (s=T2S.M_9[LA149_0-(4)])>=0) && (synpred93_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA149_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 8059:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_0 = input.LA(1);

                         
                        int index152_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA152_0>=4 && LA152_0<=126 && (s=T2S.M_9[LA152_0-(4)])>=0) && (synpred94_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA152_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index152_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_120s = "\1\0\1\1\1\2\1\4\2\uffff\1\3\124\uffff}>";
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_120;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "8881:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_0 = input.LA(1);

                         
                        int index161_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA161_0==Semicolon) ) {s = 1;}

                        else if ( (LA161_0==EOF) ) {s = 2;}

                        else if ( (LA161_0==RightCurlyBracket) ) {s = 3;}

                        else if ( (LA161_0==RULE_ML_COMMENT||LA161_0==RULE_EOL) && (synpred101_InternalN4JSParser())) {s = 4;}

                        else if ( ((LA161_0>=Intersection && LA161_0<=Implements)||(LA161_0>=Promisify && LA161_0<=Default)||(LA161_0>=Private && LA161_0<=Break)||(LA161_0>=Class && LA161_0<=With)||(LA161_0>=For && LA161_0<=Var)||LA161_0==PlusSignPlusSign||LA161_0==HyphenMinusHyphenMinus||LA161_0==SolidusEqualsSign||(LA161_0>=As && LA161_0<=If)||LA161_0==Of||LA161_0==ExclamationMark||LA161_0==LeftParenthesis||LA161_0==PlusSign||LA161_0==HyphenMinus||LA161_0==Solidus||LA161_0==LessThanSign||(LA161_0>=CommercialAt && LA161_0<=LeftSquareBracket)||LA161_0==LeftCurlyBracket||LA161_0==Tilde||LA161_0==RULE_DOUBLE||(LA161_0>=RULE_HEX_INT && LA161_0<=RULE_LEGACY_OCTAL_INT)||LA161_0==RULE_SCIENTIFIC_INT||LA161_0==RULE_IDENTIFIER||LA161_0==RULE_STRING||(LA161_0>=RULE_TEMPLATE_HEAD && LA161_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA161_0==RULE_INT) ) {s = 5;}

                         
                        input.seek(index161_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_2 = input.LA(1);

                         
                        int index161_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA161_2==EOF) ) {s = 6;}

                        
                        else if ((LA161_2>=-1 && LA161_2<=149 && (s=T2S.M_2[LA161_2-(-1)])>=0) && (synpred101_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index161_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_6 = input.LA(1);

                         
                        int index161_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA161_6==EOF) && (synpred101_InternalN4JSParser())) {s = 90;}

                         
                        input.seek(index161_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 89;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\102\uffff";
    static final String dfa_122s = "\1\4\1\0\100\uffff";
    static final String dfa_123s = "\1\u0095\1\0\100\uffff";
    static final String dfa_124s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_125s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_126s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[][] dfa_126 = unpackEncodedStringArray(dfa_126s);

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "9134:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_3_0= ruleLetIdentifierRef ) ) ( (lv_forIn_4_0= In ) ) ( (lv_expression_5_0= norm1_Expression ) ) otherlv_6= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= ruleExpression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm1_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm1_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm1_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm1_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm1_Expression ) )? ) ) otherlv_36= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_1 = input.LA(1);

                         
                        int index180_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index180_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_127s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_128s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_129s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_130s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_131s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "9216:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= ruleExpression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm1_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm1_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm1_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm1_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_0 = input.LA(1);

                         
                        int index179_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA179_0==Var) && (synpred104_InternalN4JSParser())) {s = 1;}

                        else if ( (LA179_0==Const) && (synpred104_InternalN4JSParser())) {s = 2;}

                        else if ( (LA179_0==Let) ) {s = 3;}

                        else if ( ((LA179_0>=Intersection && LA179_0<=Implements)||(LA179_0>=Promisify && LA179_0<=Abstract)||(LA179_0>=External && LA179_0<=Function)||(LA179_0>=Private && LA179_0<=Delete)||LA179_0==Public||LA179_0==Static||(LA179_0>=Target && LA179_0<=Await)||LA179_0==Class||(LA179_0>=False && LA179_0<=Super)||LA179_0==Union||(LA179_0>=Yield && LA179_0<=This)||(LA179_0>=From && LA179_0<=Void)||LA179_0==Get||(LA179_0>=New && LA179_0<=Set)||LA179_0==PlusSignPlusSign||LA179_0==HyphenMinusHyphenMinus||LA179_0==SolidusEqualsSign||LA179_0==As||LA179_0==Of||LA179_0==ExclamationMark||LA179_0==LeftParenthesis||LA179_0==PlusSign||LA179_0==HyphenMinus||LA179_0==Solidus||LA179_0==LessThanSign||(LA179_0>=CommercialAt && LA179_0<=LeftSquareBracket)||LA179_0==LeftCurlyBracket||LA179_0==Tilde||LA179_0==RULE_DOUBLE||(LA179_0>=RULE_HEX_INT && LA179_0<=RULE_LEGACY_OCTAL_INT)||LA179_0==RULE_SCIENTIFIC_INT||LA179_0==RULE_IDENTIFIER||LA179_0==RULE_STRING||(LA179_0>=RULE_TEMPLATE_HEAD && LA179_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA179_0==RULE_INT) ) {s = 4;}

                        else if ( (LA179_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index179_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_3 = input.LA(1);

                         
                        int index179_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index179_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\40\uffff";
    static final String dfa_133s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_134s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_135s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_136s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_137s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = dfa_132;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "9238:7: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_30 = input.LA(1);

                         
                        int index171_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index171_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA171_29 = input.LA(1);

                         
                        int index171_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index171_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\1\4\76\uffff";
    static final String dfa_139s = "\1\u0095\76\uffff";
    static final String dfa_140s = "\1\uffff\75\1\1\2";
    static final String dfa_141s = "\1\0\76\uffff}>";
    static final String[] dfa_142s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\61\3\uffff\1\32\1\12\1\65\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "9435:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA164_0>=4 && LA164_0<=149 && (s=T2S.M_16[LA164_0-(4)])>=0) && (synpred106_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA164_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "9875:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_3_0= ruleLetIdentifierRef ) ) ( (lv_forIn_4_0= In ) ) ( (lv_expression_5_0= norm3_Expression ) ) otherlv_6= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= norm2_Expression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm3_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm3_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm3_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm3_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm3_Expression ) )? ) ) otherlv_36= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "9957:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= norm2_Expression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm3_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm3_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm3_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm3_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_0 = input.LA(1);

                         
                        int index197_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_0==Var) && (synpred108_InternalN4JSParser())) {s = 1;}

                        else if ( (LA197_0==Const) && (synpred108_InternalN4JSParser())) {s = 2;}

                        else if ( (LA197_0==Let) ) {s = 3;}

                        else if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||LA197_0==Public||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||LA197_0==Get||(LA197_0>=New && LA197_0<=Set)||LA197_0==PlusSignPlusSign||LA197_0==HyphenMinusHyphenMinus||LA197_0==SolidusEqualsSign||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {s = 4;}

                        else if ( (LA197_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index197_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_3 = input.LA(1);

                         
                        int index197_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index197_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\37\uffff";
    static final String dfa_144s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_145s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_147s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_148s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = dfa_143;
            this.eof = dfa_143;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "9979:7: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_29 = input.LA(1);

                         
                        int index189_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index189_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA189_28 = input.LA(1);

                         
                        int index189_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index189_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_149s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "10176:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_0 = input.LA(1);

                         
                        int index182_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA182_0>=4 && LA182_0<=149 && (s=T2S.M_17[LA182_0-(4)])>=0) && (synpred110_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA182_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index182_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_150s = "\1\4\1\0\1\uffff\33\0\4\uffff";
    static final String dfa_151s = "\1\176\1\0\1\uffff\33\0\4\uffff";
    static final String dfa_152s = "\2\uffff\1\1\33\uffff\1\3\2\uffff\1\2";
    static final String dfa_153s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff}>";
    static final String[] dfa_154s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_150 = DFA.unpackEncodedStringToUnsignedChars(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final short[] dfa_152 = DFA.unpackEncodedString(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[][] dfa_154 = unpackEncodedStringArray(dfa_154s);

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_150;
            this.max = dfa_151;
            this.accept = dfa_152;
            this.special = dfa_153;
            this.transition = dfa_154;
        }
        public String getDescription() {
            return "12223:2: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_0 = input.LA(1);

                         
                        int index220_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA220_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA220_0==LeftSquareBracket) && (synpred117_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA220_0>=4 && LA220_0<=126 && (s=T2S.M_18[LA220_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA220_0==This_1||LA220_0==Void||LA220_0==Tilde) ) {s = 30;}

                         
                        input.seek(index220_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_1 = input.LA(1);

                         
                        int index220_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA220_3 = input.LA(1);

                         
                        int index220_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA220_4 = input.LA(1);

                         
                        int index220_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA220_5 = input.LA(1);

                         
                        int index220_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA220_6 = input.LA(1);

                         
                        int index220_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA220_7 = input.LA(1);

                         
                        int index220_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA220_8 = input.LA(1);

                         
                        int index220_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA220_9 = input.LA(1);

                         
                        int index220_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA220_10 = input.LA(1);

                         
                        int index220_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA220_11 = input.LA(1);

                         
                        int index220_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA220_12 = input.LA(1);

                         
                        int index220_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA220_13 = input.LA(1);

                         
                        int index220_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA220_14 = input.LA(1);

                         
                        int index220_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA220_15 = input.LA(1);

                         
                        int index220_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA220_16 = input.LA(1);

                         
                        int index220_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA220_17 = input.LA(1);

                         
                        int index220_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA220_18 = input.LA(1);

                         
                        int index220_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA220_19 = input.LA(1);

                         
                        int index220_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA220_20 = input.LA(1);

                         
                        int index220_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA220_21 = input.LA(1);

                         
                        int index220_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA220_22 = input.LA(1);

                         
                        int index220_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA220_23 = input.LA(1);

                         
                        int index220_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA220_24 = input.LA(1);

                         
                        int index220_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA220_25 = input.LA(1);

                         
                        int index220_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA220_26 = input.LA(1);

                         
                        int index220_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA220_27 = input.LA(1);

                         
                        int index220_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA220_28 = input.LA(1);

                         
                        int index220_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA220_29 = input.LA(1);

                         
                        int index220_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index220_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_155s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "12296:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_156s = "\41\uffff";
    static final String dfa_157s = "\1\4\1\0\1\uffff\32\0\4\uffff";
    static final String dfa_158s = "\1\176\1\0\1\uffff\32\0\4\uffff";
    static final String dfa_159s = "\2\uffff\1\1\32\uffff\1\3\2\uffff\1\2";
    static final String dfa_160s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\4\uffff}>";
    static final String[] dfa_161s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_156 = DFA.unpackEncodedString(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final short[] dfa_159 = DFA.unpackEncodedString(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[][] dfa_161 = unpackEncodedStringArray(dfa_161s);

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = dfa_156;
            this.eof = dfa_156;
            this.min = dfa_157;
            this.max = dfa_158;
            this.accept = dfa_159;
            this.special = dfa_160;
            this.transition = dfa_161;
        }
        public String getDescription() {
            return "12341:2: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= norm1_BindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_0 = input.LA(1);

                         
                        int index222_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA222_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA222_0==LeftSquareBracket) && (synpred120_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA222_0>=4 && LA222_0<=126 && (s=T2S.M_19[LA222_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA222_0==This_1||LA222_0==Void||LA222_0==Tilde) ) {s = 29;}

                         
                        input.seek(index222_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA222_1 = input.LA(1);

                         
                        int index222_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA222_3 = input.LA(1);

                         
                        int index222_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA222_4 = input.LA(1);

                         
                        int index222_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA222_5 = input.LA(1);

                         
                        int index222_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA222_6 = input.LA(1);

                         
                        int index222_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA222_7 = input.LA(1);

                         
                        int index222_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA222_8 = input.LA(1);

                         
                        int index222_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA222_9 = input.LA(1);

                         
                        int index222_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA222_10 = input.LA(1);

                         
                        int index222_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA222_11 = input.LA(1);

                         
                        int index222_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA222_12 = input.LA(1);

                         
                        int index222_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA222_13 = input.LA(1);

                         
                        int index222_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA222_14 = input.LA(1);

                         
                        int index222_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA222_15 = input.LA(1);

                         
                        int index222_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA222_16 = input.LA(1);

                         
                        int index222_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA222_17 = input.LA(1);

                         
                        int index222_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA222_18 = input.LA(1);

                         
                        int index222_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA222_19 = input.LA(1);

                         
                        int index222_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA222_20 = input.LA(1);

                         
                        int index222_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA222_21 = input.LA(1);

                         
                        int index222_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA222_22 = input.LA(1);

                         
                        int index222_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA222_23 = input.LA(1);

                         
                        int index222_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA222_24 = input.LA(1);

                         
                        int index222_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA222_25 = input.LA(1);

                         
                        int index222_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA222_26 = input.LA(1);

                         
                        int index222_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA222_27 = input.LA(1);

                         
                        int index222_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA222_28 = input.LA(1);

                         
                        int index222_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index222_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_162s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA221 extends DFA {

        public DFA221(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 221;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "12414:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_163s = "\20\uffff";
    static final String dfa_164s = "\4\uffff\1\3\13\uffff";
    static final String dfa_165s = "\1\4\3\uffff\1\7\13\uffff";
    static final String dfa_166s = "\1\u0095\3\uffff\1\u0099\13\uffff";
    static final String dfa_167s = "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\14\1\15\2\13";
    static final String dfa_168s = "\4\uffff\1\0\13\uffff}>";
    static final String[] dfa_169s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "12606:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= ruleIdentifierRef | this_ParameterizedCallExpression_3= ruleParameterizedCallExpression | this_Literal_4= ruleLiteral | this_ArrayLiteral_5= ruleArrayLiteral | this_ObjectLiteral_6= ruleObjectLiteral | this_ParenExpression_7= ruleParenExpression | this_AnnotatedExpression_8= ruleAnnotatedExpression | this_FunctionExpression_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_10= ruleAsyncFunctionExpression ) | this_N4ClassExpression_11= ruleN4ClassExpression | this_TemplateLiteral_12= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA223_4 = input.LA(1);

                         
                        int index223_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_4==RULE_NO_LINE_TERMINATOR) && (synpred125_InternalN4JSParser())) {s = 14;}

                        else if ( (LA223_4==Function) && (synpred125_InternalN4JSParser())) {s = 15;}

                        else if ( (LA223_4==EOF||LA223_4==Instanceof||LA223_4==ExclamationMarkEqualsSignEqualsSign||(LA223_4>=LessThanSignLessThanSignEqualsSign && LA223_4<=EqualsSignEqualsSignEqualsSign)||(LA223_4>=ExclamationMarkEqualsSign && LA223_4<=EqualsSignEqualsSign)||LA223_4==GreaterThanSignEqualsSign||(LA223_4>=CircumflexAccentEqualsSign && LA223_4<=As)||(LA223_4>=In && LA223_4<=VerticalLineVerticalLine)||(LA223_4>=PercentSign && LA223_4<=QuestionMark)||(LA223_4>=LeftSquareBracket && LA223_4<=RightCurlyBracket)||(LA223_4>=RULE_TEMPLATE_HEAD && LA223_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA223_4==RULE_ML_COMMENT||LA223_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index223_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 223, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA224 extends DFA {

        public DFA224(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 224;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "12747:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= norm1_IdentifierRef | this_ParameterizedCallExpression_3= norm1_ParameterizedCallExpression | this_Literal_4= ruleLiteral | this_ArrayLiteral_5= norm1_ArrayLiteral | this_ObjectLiteral_6= norm1_ObjectLiteral | this_ParenExpression_7= norm1_ParenExpression | this_AnnotatedExpression_8= norm1_AnnotatedExpression | this_FunctionExpression_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_10= ruleAsyncFunctionExpression ) | this_N4ClassExpression_11= norm1_N4ClassExpression | this_TemplateLiteral_12= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA224_4 = input.LA(1);

                         
                        int index224_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA224_4==EOF||LA224_4==Instanceof||LA224_4==ExclamationMarkEqualsSignEqualsSign||(LA224_4>=LessThanSignLessThanSignEqualsSign && LA224_4<=EqualsSignEqualsSignEqualsSign)||(LA224_4>=ExclamationMarkEqualsSign && LA224_4<=EqualsSignEqualsSign)||LA224_4==GreaterThanSignEqualsSign||(LA224_4>=CircumflexAccentEqualsSign && LA224_4<=As)||(LA224_4>=In && LA224_4<=VerticalLineVerticalLine)||(LA224_4>=PercentSign && LA224_4<=QuestionMark)||(LA224_4>=LeftSquareBracket && LA224_4<=RightCurlyBracket)||(LA224_4>=RULE_TEMPLATE_HEAD && LA224_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_4==RULE_ML_COMMENT||LA224_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA224_4==RULE_NO_LINE_TERMINATOR) && (synpred126_InternalN4JSParser())) {s = 14;}

                        else if ( (LA224_4==Function) && (synpred126_InternalN4JSParser())) {s = 15;}

                         
                        input.seek(index224_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 224, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 13151:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 13298:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\1\4\1\uffff\110\0\6\uffff";
    static final String dfa_178s = "\1\u0095\1\uffff\110\0\6\uffff";
    static final String dfa_179s = "\1\uffff\1\1\110\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_180s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\6\uffff}>";
    static final String[] dfa_181s = {
            "\1\16\1\13\1\75\1\42\1\5\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\15\1\53\1\55\1\3\1\20\1\31\1\61\1\72\1\56\1\11\1\57\1\12\1\2\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\114\1\uffff\1\113\7\uffff\1\112\3\uffff\1\1\1\111\2\uffff\1\14\2\uffff\1\10\3\uffff\1\104\1\uffff\1\107\1\uffff\1\106\2\uffff\1\110\1\uffff\1\7\2\uffff\1\103\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_177 = DFA.unpackEncodedStringToUnsignedChars(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final short[] dfa_179 = DFA.unpackEncodedString(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[][] dfa_181 = unpackEncodedStringArray(dfa_181s);

    class DFA245 extends DFA {

        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "13708:2: (this_AnnotatedPropertyAssignment_0= ruleAnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= rulePropertyNameValuePair ) | ( ( ( () ruleGetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= rulePropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= rulePropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= rulePropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA245_0 = input.LA(1);

                         
                        int index245_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA245_0>=4 && LA245_0<=149 && (s=T2S.M_20[LA245_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA245_0==LessThanSign) && (synpred130_InternalN4JSParser())) {s = 74;}

                        else if ( (LA245_0==Asterisk) && (synpred130_InternalN4JSParser())) {s = 75;}

                        else if ( (LA245_0==LeftParenthesis) ) {s = 76;}

                         
                        input.seek(index245_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA245_2 = input.LA(1);

                         
                        int index245_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA245_3 = input.LA(1);

                         
                        int index245_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA245_4 = input.LA(1);

                         
                        int index245_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA245_5 = input.LA(1);

                         
                        int index245_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA245_6 = input.LA(1);

                         
                        int index245_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA245_7 = input.LA(1);

                         
                        int index245_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA245_8 = input.LA(1);

                         
                        int index245_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA245_9 = input.LA(1);

                         
                        int index245_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA245_10 = input.LA(1);

                         
                        int index245_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA245_11 = input.LA(1);

                         
                        int index245_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA245_12 = input.LA(1);

                         
                        int index245_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA245_13 = input.LA(1);

                         
                        int index245_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA245_14 = input.LA(1);

                         
                        int index245_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA245_15 = input.LA(1);

                         
                        int index245_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA245_16 = input.LA(1);

                         
                        int index245_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA245_17 = input.LA(1);

                         
                        int index245_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA245_18 = input.LA(1);

                         
                        int index245_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA245_19 = input.LA(1);

                         
                        int index245_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA245_20 = input.LA(1);

                         
                        int index245_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA245_21 = input.LA(1);

                         
                        int index245_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA245_22 = input.LA(1);

                         
                        int index245_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA245_23 = input.LA(1);

                         
                        int index245_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA245_24 = input.LA(1);

                         
                        int index245_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA245_25 = input.LA(1);

                         
                        int index245_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA245_26 = input.LA(1);

                         
                        int index245_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA245_27 = input.LA(1);

                         
                        int index245_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA245_28 = input.LA(1);

                         
                        int index245_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA245_29 = input.LA(1);

                         
                        int index245_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA245_30 = input.LA(1);

                         
                        int index245_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA245_31 = input.LA(1);

                         
                        int index245_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA245_32 = input.LA(1);

                         
                        int index245_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA245_33 = input.LA(1);

                         
                        int index245_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA245_34 = input.LA(1);

                         
                        int index245_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA245_35 = input.LA(1);

                         
                        int index245_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA245_36 = input.LA(1);

                         
                        int index245_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA245_37 = input.LA(1);

                         
                        int index245_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA245_38 = input.LA(1);

                         
                        int index245_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA245_39 = input.LA(1);

                         
                        int index245_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA245_40 = input.LA(1);

                         
                        int index245_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA245_41 = input.LA(1);

                         
                        int index245_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA245_42 = input.LA(1);

                         
                        int index245_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA245_43 = input.LA(1);

                         
                        int index245_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA245_44 = input.LA(1);

                         
                        int index245_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA245_45 = input.LA(1);

                         
                        int index245_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA245_46 = input.LA(1);

                         
                        int index245_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA245_47 = input.LA(1);

                         
                        int index245_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA245_48 = input.LA(1);

                         
                        int index245_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA245_49 = input.LA(1);

                         
                        int index245_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA245_50 = input.LA(1);

                         
                        int index245_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA245_51 = input.LA(1);

                         
                        int index245_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA245_52 = input.LA(1);

                         
                        int index245_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA245_53 = input.LA(1);

                         
                        int index245_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA245_54 = input.LA(1);

                         
                        int index245_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA245_55 = input.LA(1);

                         
                        int index245_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA245_56 = input.LA(1);

                         
                        int index245_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA245_57 = input.LA(1);

                         
                        int index245_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA245_58 = input.LA(1);

                         
                        int index245_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA245_59 = input.LA(1);

                         
                        int index245_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA245_60 = input.LA(1);

                         
                        int index245_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA245_61 = input.LA(1);

                         
                        int index245_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA245_62 = input.LA(1);

                         
                        int index245_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA245_63 = input.LA(1);

                         
                        int index245_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA245_64 = input.LA(1);

                         
                        int index245_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA245_65 = input.LA(1);

                         
                        int index245_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA245_66 = input.LA(1);

                         
                        int index245_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA245_67 = input.LA(1);

                         
                        int index245_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA245_68 = input.LA(1);

                         
                        int index245_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA245_69 = input.LA(1);

                         
                        int index245_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA245_70 = input.LA(1);

                         
                        int index245_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA245_71 = input.LA(1);

                         
                        int index245_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA245_72 = input.LA(1);

                         
                        int index245_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index245_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA245_73 = input.LA(1);

                         
                        int index245_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index245_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 245, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "13993:2: (this_AnnotatedPropertyAssignment_0= norm1_AnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= norm1_PropertyNameValuePair ) | ( ( ( () norm1_GetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= norm1_PropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= norm1_PropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= norm1_PropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA246_0 = input.LA(1);

                         
                        int index246_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA246_0>=4 && LA246_0<=149 && (s=T2S.M_20[LA246_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA246_0==LessThanSign) && (synpred134_InternalN4JSParser())) {s = 74;}

                        else if ( (LA246_0==Asterisk) && (synpred134_InternalN4JSParser())) {s = 75;}

                        else if ( (LA246_0==LeftParenthesis) ) {s = 76;}

                         
                        input.seek(index246_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA246_2 = input.LA(1);

                         
                        int index246_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA246_3 = input.LA(1);

                         
                        int index246_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA246_4 = input.LA(1);

                         
                        int index246_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA246_5 = input.LA(1);

                         
                        int index246_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA246_6 = input.LA(1);

                         
                        int index246_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA246_7 = input.LA(1);

                         
                        int index246_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA246_8 = input.LA(1);

                         
                        int index246_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA246_9 = input.LA(1);

                         
                        int index246_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA246_10 = input.LA(1);

                         
                        int index246_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA246_11 = input.LA(1);

                         
                        int index246_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA246_12 = input.LA(1);

                         
                        int index246_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA246_13 = input.LA(1);

                         
                        int index246_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA246_14 = input.LA(1);

                         
                        int index246_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA246_15 = input.LA(1);

                         
                        int index246_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA246_16 = input.LA(1);

                         
                        int index246_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA246_17 = input.LA(1);

                         
                        int index246_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA246_18 = input.LA(1);

                         
                        int index246_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA246_19 = input.LA(1);

                         
                        int index246_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA246_20 = input.LA(1);

                         
                        int index246_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA246_21 = input.LA(1);

                         
                        int index246_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA246_22 = input.LA(1);

                         
                        int index246_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA246_23 = input.LA(1);

                         
                        int index246_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA246_24 = input.LA(1);

                         
                        int index246_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA246_25 = input.LA(1);

                         
                        int index246_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA246_26 = input.LA(1);

                         
                        int index246_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA246_27 = input.LA(1);

                         
                        int index246_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA246_28 = input.LA(1);

                         
                        int index246_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA246_29 = input.LA(1);

                         
                        int index246_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA246_30 = input.LA(1);

                         
                        int index246_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA246_31 = input.LA(1);

                         
                        int index246_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA246_32 = input.LA(1);

                         
                        int index246_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA246_33 = input.LA(1);

                         
                        int index246_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA246_34 = input.LA(1);

                         
                        int index246_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA246_35 = input.LA(1);

                         
                        int index246_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA246_36 = input.LA(1);

                         
                        int index246_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA246_37 = input.LA(1);

                         
                        int index246_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA246_38 = input.LA(1);

                         
                        int index246_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA246_39 = input.LA(1);

                         
                        int index246_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA246_40 = input.LA(1);

                         
                        int index246_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA246_41 = input.LA(1);

                         
                        int index246_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA246_42 = input.LA(1);

                         
                        int index246_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA246_43 = input.LA(1);

                         
                        int index246_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA246_44 = input.LA(1);

                         
                        int index246_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA246_45 = input.LA(1);

                         
                        int index246_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA246_46 = input.LA(1);

                         
                        int index246_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA246_47 = input.LA(1);

                         
                        int index246_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA246_48 = input.LA(1);

                         
                        int index246_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA246_49 = input.LA(1);

                         
                        int index246_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA246_50 = input.LA(1);

                         
                        int index246_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA246_51 = input.LA(1);

                         
                        int index246_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA246_52 = input.LA(1);

                         
                        int index246_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA246_53 = input.LA(1);

                         
                        int index246_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA246_54 = input.LA(1);

                         
                        int index246_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA246_55 = input.LA(1);

                         
                        int index246_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA246_56 = input.LA(1);

                         
                        int index246_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA246_57 = input.LA(1);

                         
                        int index246_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA246_58 = input.LA(1);

                         
                        int index246_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA246_59 = input.LA(1);

                         
                        int index246_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA246_60 = input.LA(1);

                         
                        int index246_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA246_61 = input.LA(1);

                         
                        int index246_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA246_62 = input.LA(1);

                         
                        int index246_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA246_63 = input.LA(1);

                         
                        int index246_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA246_64 = input.LA(1);

                         
                        int index246_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA246_65 = input.LA(1);

                         
                        int index246_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA246_66 = input.LA(1);

                         
                        int index246_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA246_67 = input.LA(1);

                         
                        int index246_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA246_68 = input.LA(1);

                         
                        int index246_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA246_69 = input.LA(1);

                         
                        int index246_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA246_70 = input.LA(1);

                         
                        int index246_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA246_71 = input.LA(1);

                         
                        int index246_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA246_72 = input.LA(1);

                         
                        int index246_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index246_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA246_73 = input.LA(1);

                         
                        int index246_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index246_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 246, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_182s = "\117\uffff";
    static final String dfa_183s = "\1\4\110\0\6\uffff";
    static final String dfa_184s = "\1\u0095\110\0\6\uffff";
    static final String dfa_185s = "\111\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_186s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\6\uffff}>";
    static final String[] dfa_187s = {
            "\1\15\1\12\1\74\1\41\1\4\1\75\1\77\1\66\1\23\1\24\1\65\1\35\1\25\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\16\1\20\1\21\1\22\1\57\1\44\1\46\1\14\1\52\1\54\1\2\1\17\1\30\1\60\1\71\1\55\1\10\1\56\1\11\1\1\1\53\4\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\113\1\uffff\1\112\7\uffff\1\111\4\uffff\1\110\2\uffff\1\13\2\uffff\1\7\3\uffff\1\103\1\uffff\1\106\1\uffff\1\105\2\uffff\1\107\1\uffff\1\6\2\uffff\1\102\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_182 = DFA.unpackEncodedString(dfa_182s);
    static final char[] dfa_183 = DFA.unpackEncodedStringToUnsignedChars(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final short[] dfa_185 = DFA.unpackEncodedString(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[][] dfa_187 = unpackEncodedStringArray(dfa_187s);

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = dfa_182;
            this.eof = dfa_182;
            this.min = dfa_183;
            this.max = dfa_184;
            this.accept = dfa_185;
            this.special = dfa_186;
            this.transition = dfa_187;
        }
        public String getDescription() {
            return "14293:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= ruleLiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( () ruleGetterHeader[null] ) )=> ( () this_GetterHeader_7= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= ruleFormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_identifierRef_28_0= ruleIdentifierRef ) ) (otherlv_29= EqualsSign ( (lv_expression_30_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA255_0 = input.LA(1);

                         
                        int index255_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA255_0>=4 && LA255_0<=149 && (s=T2S.M_22[LA255_0-(4)])>=0)) { /* 72 cases */ }
                        else if ( (LA255_0==LessThanSign) && (synpred141_InternalN4JSParser())) {s = 73;}

                        else if ( (LA255_0==Asterisk) && (synpred141_InternalN4JSParser())) {s = 74;}

                        else if ( (LA255_0==LeftParenthesis) ) {s = 75;}

                         
                        input.seek(index255_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA255_1 = input.LA(1);

                         
                        int index255_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA255_2 = input.LA(1);

                         
                        int index255_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA255_3 = input.LA(1);

                         
                        int index255_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA255_4 = input.LA(1);

                         
                        int index255_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA255_5 = input.LA(1);

                         
                        int index255_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA255_6 = input.LA(1);

                         
                        int index255_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA255_7 = input.LA(1);

                         
                        int index255_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA255_8 = input.LA(1);

                         
                        int index255_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA255_9 = input.LA(1);

                         
                        int index255_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA255_10 = input.LA(1);

                         
                        int index255_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA255_11 = input.LA(1);

                         
                        int index255_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA255_12 = input.LA(1);

                         
                        int index255_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA255_13 = input.LA(1);

                         
                        int index255_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA255_14 = input.LA(1);

                         
                        int index255_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA255_15 = input.LA(1);

                         
                        int index255_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA255_16 = input.LA(1);

                         
                        int index255_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA255_17 = input.LA(1);

                         
                        int index255_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA255_18 = input.LA(1);

                         
                        int index255_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA255_19 = input.LA(1);

                         
                        int index255_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA255_20 = input.LA(1);

                         
                        int index255_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA255_21 = input.LA(1);

                         
                        int index255_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA255_22 = input.LA(1);

                         
                        int index255_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA255_23 = input.LA(1);

                         
                        int index255_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA255_24 = input.LA(1);

                         
                        int index255_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA255_25 = input.LA(1);

                         
                        int index255_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA255_26 = input.LA(1);

                         
                        int index255_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA255_27 = input.LA(1);

                         
                        int index255_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA255_28 = input.LA(1);

                         
                        int index255_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA255_29 = input.LA(1);

                         
                        int index255_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA255_30 = input.LA(1);

                         
                        int index255_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA255_31 = input.LA(1);

                         
                        int index255_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA255_32 = input.LA(1);

                         
                        int index255_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA255_33 = input.LA(1);

                         
                        int index255_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA255_34 = input.LA(1);

                         
                        int index255_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA255_35 = input.LA(1);

                         
                        int index255_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA255_36 = input.LA(1);

                         
                        int index255_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA255_37 = input.LA(1);

                         
                        int index255_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA255_38 = input.LA(1);

                         
                        int index255_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA255_39 = input.LA(1);

                         
                        int index255_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA255_40 = input.LA(1);

                         
                        int index255_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA255_41 = input.LA(1);

                         
                        int index255_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA255_42 = input.LA(1);

                         
                        int index255_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA255_43 = input.LA(1);

                         
                        int index255_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA255_44 = input.LA(1);

                         
                        int index255_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA255_45 = input.LA(1);

                         
                        int index255_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA255_46 = input.LA(1);

                         
                        int index255_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA255_47 = input.LA(1);

                         
                        int index255_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA255_48 = input.LA(1);

                         
                        int index255_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA255_49 = input.LA(1);

                         
                        int index255_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA255_50 = input.LA(1);

                         
                        int index255_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA255_51 = input.LA(1);

                         
                        int index255_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA255_52 = input.LA(1);

                         
                        int index255_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA255_53 = input.LA(1);

                         
                        int index255_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA255_54 = input.LA(1);

                         
                        int index255_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA255_55 = input.LA(1);

                         
                        int index255_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA255_56 = input.LA(1);

                         
                        int index255_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA255_57 = input.LA(1);

                         
                        int index255_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA255_58 = input.LA(1);

                         
                        int index255_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA255_59 = input.LA(1);

                         
                        int index255_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA255_60 = input.LA(1);

                         
                        int index255_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA255_61 = input.LA(1);

                         
                        int index255_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA255_62 = input.LA(1);

                         
                        int index255_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA255_63 = input.LA(1);

                         
                        int index255_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA255_64 = input.LA(1);

                         
                        int index255_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA255_65 = input.LA(1);

                         
                        int index255_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA255_66 = input.LA(1);

                         
                        int index255_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA255_67 = input.LA(1);

                         
                        int index255_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA255_68 = input.LA(1);

                         
                        int index255_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA255_69 = input.LA(1);

                         
                        int index255_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA255_70 = input.LA(1);

                         
                        int index255_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA255_71 = input.LA(1);

                         
                        int index255_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index255_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA255_72 = input.LA(1);

                         
                        int index255_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index255_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 255, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_188s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_189s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_190s = "\7\uffff\1\1\5\uffff\1\2";
    static final String[] dfa_191s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };
    static final char[] dfa_188 = DFA.unpackEncodedStringToUnsignedChars(dfa_188s);
    static final char[] dfa_189 = DFA.unpackEncodedStringToUnsignedChars(dfa_189s);
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final short[][] dfa_191 = unpackEncodedStringArray(dfa_191s);

    class DFA247 extends DFA {

        public DFA247(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "14320:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_192s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_193s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\14\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_192 = DFA.unpackEncodedStringToUnsignedChars(dfa_192s);
    static final short[][] dfa_193 = unpackEncodedStringArray(dfa_193s);

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "14752:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_194s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_195s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_196s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\16\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_194 = DFA.unpackEncodedStringToUnsignedChars(dfa_194s);
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA253 extends DFA {

        public DFA253(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 253;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_194;
            this.max = dfa_195;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "14876:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_182;
            this.eof = dfa_182;
            this.min = dfa_183;
            this.max = dfa_184;
            this.accept = dfa_185;
            this.special = dfa_186;
            this.transition = dfa_187;
        }
        public String getDescription() {
            return "14962:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( () norm1_GetterHeader[null] ) )=> ( () this_GetterHeader_7= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= norm1_FormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_identifierRef_28_0= norm1_IdentifierRef ) ) (otherlv_29= EqualsSign ( (lv_expression_30_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_0 = input.LA(1);

                         
                        int index264_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA264_0>=4 && LA264_0<=149 && (s=T2S.M_22[LA264_0-(4)])>=0)) { /* 72 cases */ }
                        else if ( (LA264_0==LessThanSign) && (synpred150_InternalN4JSParser())) {s = 73;}

                        else if ( (LA264_0==Asterisk) && (synpred150_InternalN4JSParser())) {s = 74;}

                        else if ( (LA264_0==LeftParenthesis) ) {s = 75;}

                         
                        input.seek(index264_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_1 = input.LA(1);

                         
                        int index264_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_2 = input.LA(1);

                         
                        int index264_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_3 = input.LA(1);

                         
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_4 = input.LA(1);

                         
                        int index264_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_5 = input.LA(1);

                         
                        int index264_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_6 = input.LA(1);

                         
                        int index264_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_7 = input.LA(1);

                         
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_8 = input.LA(1);

                         
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_9 = input.LA(1);

                         
                        int index264_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_10 = input.LA(1);

                         
                        int index264_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA264_11 = input.LA(1);

                         
                        int index264_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA264_12 = input.LA(1);

                         
                        int index264_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA264_13 = input.LA(1);

                         
                        int index264_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA264_14 = input.LA(1);

                         
                        int index264_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA264_15 = input.LA(1);

                         
                        int index264_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA264_16 = input.LA(1);

                         
                        int index264_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA264_17 = input.LA(1);

                         
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA264_18 = input.LA(1);

                         
                        int index264_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA264_19 = input.LA(1);

                         
                        int index264_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA264_20 = input.LA(1);

                         
                        int index264_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA264_21 = input.LA(1);

                         
                        int index264_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA264_22 = input.LA(1);

                         
                        int index264_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA264_23 = input.LA(1);

                         
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA264_24 = input.LA(1);

                         
                        int index264_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA264_25 = input.LA(1);

                         
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA264_26 = input.LA(1);

                         
                        int index264_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA264_27 = input.LA(1);

                         
                        int index264_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA264_28 = input.LA(1);

                         
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA264_29 = input.LA(1);

                         
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA264_30 = input.LA(1);

                         
                        int index264_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA264_31 = input.LA(1);

                         
                        int index264_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA264_32 = input.LA(1);

                         
                        int index264_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA264_33 = input.LA(1);

                         
                        int index264_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA264_34 = input.LA(1);

                         
                        int index264_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA264_35 = input.LA(1);

                         
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA264_36 = input.LA(1);

                         
                        int index264_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA264_37 = input.LA(1);

                         
                        int index264_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA264_38 = input.LA(1);

                         
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA264_39 = input.LA(1);

                         
                        int index264_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA264_40 = input.LA(1);

                         
                        int index264_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA264_41 = input.LA(1);

                         
                        int index264_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA264_42 = input.LA(1);

                         
                        int index264_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA264_43 = input.LA(1);

                         
                        int index264_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA264_44 = input.LA(1);

                         
                        int index264_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA264_45 = input.LA(1);

                         
                        int index264_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA264_46 = input.LA(1);

                         
                        int index264_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA264_47 = input.LA(1);

                         
                        int index264_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA264_48 = input.LA(1);

                         
                        int index264_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA264_49 = input.LA(1);

                         
                        int index264_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred145_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA264_50 = input.LA(1);

                         
                        int index264_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred147_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA264_51 = input.LA(1);

                         
                        int index264_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA264_52 = input.LA(1);

                         
                        int index264_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA264_53 = input.LA(1);

                         
                        int index264_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA264_54 = input.LA(1);

                         
                        int index264_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA264_55 = input.LA(1);

                         
                        int index264_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA264_56 = input.LA(1);

                         
                        int index264_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA264_57 = input.LA(1);

                         
                        int index264_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA264_58 = input.LA(1);

                         
                        int index264_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA264_59 = input.LA(1);

                         
                        int index264_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA264_60 = input.LA(1);

                         
                        int index264_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA264_61 = input.LA(1);

                         
                        int index264_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA264_62 = input.LA(1);

                         
                        int index264_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA264_63 = input.LA(1);

                         
                        int index264_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA264_64 = input.LA(1);

                         
                        int index264_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA264_65 = input.LA(1);

                         
                        int index264_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA264_66 = input.LA(1);

                         
                        int index264_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA264_67 = input.LA(1);

                         
                        int index264_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA264_68 = input.LA(1);

                         
                        int index264_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA264_69 = input.LA(1);

                         
                        int index264_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA264_70 = input.LA(1);

                         
                        int index264_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA264_71 = input.LA(1);

                         
                        int index264_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index264_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA264_72 = input.LA(1);

                         
                        int index264_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred150_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index264_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA256 extends DFA {

        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "14989:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA259 extends DFA {

        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "15421:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_197s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\16\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_197 = unpackEncodedStringArray(dfa_197s);

    class DFA262 extends DFA {

        public DFA262(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_194;
            this.max = dfa_195;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "15545:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "15688:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "15874:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_198s = "\17\uffff";
    static final String dfa_199s = "\7\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_200s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff\1\u0095";
    static final String dfa_201s = "\7\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_202s = "\17\uffff}>";
    static final String[] dfa_203s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\15\uffff\1\15\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7"
    };

    static final short[] dfa_198 = DFA.unpackEncodedString(dfa_198s);
    static final char[] dfa_199 = DFA.unpackEncodedStringToUnsignedChars(dfa_199s);
    static final char[] dfa_200 = DFA.unpackEncodedStringToUnsignedChars(dfa_200s);
    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final short[][] dfa_203 = unpackEncodedStringArray(dfa_203s);

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "16037:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "16157:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_194;
            this.max = dfa_195;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16253:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA279 extends DFA {

        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_194;
            this.max = dfa_195;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "16329:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_204s = "\70\uffff";
    static final String dfa_205s = "\2\4\66\uffff";
    static final String dfa_206s = "\2\u0095\66\uffff";
    static final String dfa_207s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_208s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_209s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final char[] dfa_205 = DFA.unpackEncodedStringToUnsignedChars(dfa_205s);
    static final char[] dfa_206 = DFA.unpackEncodedStringToUnsignedChars(dfa_206s);
    static final short[] dfa_207 = DFA.unpackEncodedString(dfa_207s);
    static final short[] dfa_208 = DFA.unpackEncodedString(dfa_208s);
    static final short[][] dfa_209 = unpackEncodedStringArray(dfa_209s);

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = dfa_204;
            this.eof = dfa_204;
            this.min = dfa_205;
            this.max = dfa_206;
            this.accept = dfa_207;
            this.special = dfa_208;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "17815:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= ruleMemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= ruleArguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_template_16_0= ruleTemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_17= rulePrimaryExpression ( ( () this_IndexedAccessExpressionTail_19= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_21= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_template_23_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA299_1 = input.LA(1);

                         
                        int index299_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA299_1==FullStop) && (synpred173_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA299_1>=4 && LA299_1<=149 && (s=T2S.M_24[LA299_1-(4)])>=0) && (synpred174_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index299_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 299, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_210s = "\67\uffff";
    static final String dfa_211s = "\2\4\65\uffff";
    static final String dfa_212s = "\2\u0095\65\uffff";
    static final String dfa_213s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_214s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_215s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final char[] dfa_211 = DFA.unpackEncodedStringToUnsignedChars(dfa_211s);
    static final char[] dfa_212 = DFA.unpackEncodedStringToUnsignedChars(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final short[][] dfa_215 = unpackEncodedStringArray(dfa_215s);

    class DFA305 extends DFA {

        public DFA305(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 305;
            this.eot = dfa_210;
            this.eof = dfa_210;
            this.min = dfa_211;
            this.max = dfa_212;
            this.accept = dfa_213;
            this.special = dfa_214;
            this.transition = dfa_215;
        }
        public String getDescription() {
            return "18109:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= norm1_Arguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_template_16_0= norm1_TemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_17= norm1_PrimaryExpression ( ( () this_IndexedAccessExpressionTail_19= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_21= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_template_23_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA305_1 = input.LA(1);

                         
                        int index305_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA305_1==FullStop) && (synpred177_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA305_1>=4 && LA305_1<=149 && (s=T2S.M_25[LA305_1-(4)])>=0) && (synpred178_InternalN4JSParser())) { /* 52 cases */ }
                        input.seek(index305_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 305, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_216s = "\103\uffff";
    static final String dfa_217s = "\1\1\102\uffff";
    static final String dfa_218s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_219s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_220s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_221s = "\1\0\3\uffff\1\1\76\uffff}>";
    static final String[] dfa_222s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final char[] dfa_218 = DFA.unpackEncodedStringToUnsignedChars(dfa_218s);
    static final char[] dfa_219 = DFA.unpackEncodedStringToUnsignedChars(dfa_219s);
    static final short[] dfa_220 = DFA.unpackEncodedString(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final short[][] dfa_222 = unpackEncodedStringArray(dfa_222s);

    class DFA318 extends DFA {

        public DFA318(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 318;
            this.eot = dfa_216;
            this.eof = dfa_217;
            this.min = dfa_218;
            this.max = dfa_219;
            this.accept = dfa_220;
            this.special = dfa_221;
            this.transition = dfa_222;
        }
        public String getDescription() {
            return "()* loopback of 19334:3: ( ( ( () ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( (lv_rhs_3_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA318_0 = input.LA(1);

                         
                        int index318_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA318_0==EOF||LA318_0==Instanceof||LA318_0==ExclamationMarkEqualsSignEqualsSign||(LA318_0>=LessThanSignLessThanSignEqualsSign && LA318_0<=EqualsSignEqualsSignEqualsSign)||(LA318_0>=ExclamationMarkEqualsSign && LA318_0<=AsteriskEqualsSign)||LA318_0==PlusSignEqualsSign||(LA318_0>=HyphenMinusEqualsSign && LA318_0<=SolidusEqualsSign)||(LA318_0>=LessThanSignEqualsSign && LA318_0<=EqualsSignEqualsSign)||LA318_0==GreaterThanSignEqualsSign||LA318_0==CircumflexAccentEqualsSign||(LA318_0>=In && LA318_0<=VerticalLineVerticalLine)||LA318_0==Ampersand||LA318_0==RightParenthesis||LA318_0==Comma||(LA318_0>=Colon && LA318_0<=EqualsSign)||LA318_0==QuestionMark||(LA318_0>=RightSquareBracket && LA318_0<=CircumflexAccent)||(LA318_0>=VerticalLine && LA318_0<=RightCurlyBracket)||LA318_0==RULE_ML_COMMENT||LA318_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA318_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA318_0==LessThanSignLessThanSign) && (synpred189_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index318_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA318_4 = input.LA(1);

                         
                        int index318_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA318_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA318_4>=4 && LA318_4<=149 && (s=T2S.M_26[LA318_4-(4)])>=0) && (synpred189_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index318_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 318, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_223s = "\1\1\101\uffff";
    static final String dfa_224s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_225s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_226s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_227s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_228s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final char[] dfa_224 = DFA.unpackEncodedStringToUnsignedChars(dfa_224s);
    static final char[] dfa_225 = DFA.unpackEncodedStringToUnsignedChars(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[][] dfa_228 = unpackEncodedStringArray(dfa_228s);

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = dfa_121;
            this.eof = dfa_223;
            this.min = dfa_224;
            this.max = dfa_225;
            this.accept = dfa_226;
            this.special = dfa_227;
            this.transition = dfa_228;
        }
        public String getDescription() {
            return "()* loopback of 19419:3: ( ( ( () ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( (lv_rhs_3_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA319_4 = input.LA(1);

                         
                        int index319_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA319_4>=4 && LA319_4<=149 && (s=T2S.M_27[LA319_4-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA319_4==GreaterThanSignEqualsSign) ) {s = 1;}

                         
                        input.seek(index319_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA319_0 = input.LA(1);

                         
                        int index319_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA319_0==EOF||LA319_0==Instanceof||LA319_0==ExclamationMarkEqualsSignEqualsSign||(LA319_0>=LessThanSignLessThanSignEqualsSign && LA319_0<=EqualsSignEqualsSignEqualsSign)||(LA319_0>=ExclamationMarkEqualsSign && LA319_0<=AsteriskEqualsSign)||LA319_0==PlusSignEqualsSign||(LA319_0>=HyphenMinusEqualsSign && LA319_0<=SolidusEqualsSign)||(LA319_0>=LessThanSignEqualsSign && LA319_0<=EqualsSignEqualsSign)||LA319_0==GreaterThanSignEqualsSign||LA319_0==CircumflexAccentEqualsSign||(LA319_0>=In && LA319_0<=VerticalLineVerticalLine)||LA319_0==Ampersand||LA319_0==RightParenthesis||LA319_0==Comma||(LA319_0>=Colon && LA319_0<=EqualsSign)||LA319_0==QuestionMark||(LA319_0>=RightSquareBracket && LA319_0<=CircumflexAccent)||(LA319_0>=VerticalLine && LA319_0<=RightCurlyBracket)||LA319_0==RULE_ML_COMMENT||LA319_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA319_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA319_0==LessThanSignLessThanSign) && (synpred190_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index319_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 319, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_229s = "\104\uffff";
    static final String dfa_230s = "\1\1\103\uffff";
    static final String dfa_231s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_232s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_233s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_234s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_235s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final char[] dfa_231 = DFA.unpackEncodedStringToUnsignedChars(dfa_231s);
    static final char[] dfa_232 = DFA.unpackEncodedStringToUnsignedChars(dfa_232s);
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final short[][] dfa_235 = unpackEncodedStringArray(dfa_235s);

    class DFA322 extends DFA {

        public DFA322(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 322;
            this.eot = dfa_229;
            this.eof = dfa_230;
            this.min = dfa_231;
            this.max = dfa_232;
            this.accept = dfa_233;
            this.special = dfa_234;
            this.transition = dfa_235;
        }
        public String getDescription() {
            return "()* loopback of 19554:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA322_2 = input.LA(1);

                         
                        int index322_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA322_2==GreaterThanSignEqualsSign||LA322_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA322_2==New) && (synpred191_InternalN4JSParser())) {s = 7;}

                        else if ( (LA322_2==This_1) && (synpred191_InternalN4JSParser())) {s = 8;}

                        else if ( (LA322_2==Super) && (synpred191_InternalN4JSParser())) {s = 9;}

                        else if ( (LA322_2==RULE_IDENTIFIER) && (synpred191_InternalN4JSParser())) {s = 10;}

                        else if ( (LA322_2==Yield) && (synpred191_InternalN4JSParser())) {s = 11;}

                        else if ( (LA322_2==Get) && (synpred191_InternalN4JSParser())) {s = 12;}

                        else if ( (LA322_2==Set) && (synpred191_InternalN4JSParser())) {s = 13;}

                        else if ( (LA322_2==Let) && (synpred191_InternalN4JSParser())) {s = 14;}

                        else if ( (LA322_2==Project) && (synpred191_InternalN4JSParser())) {s = 15;}

                        else if ( (LA322_2==External) && (synpred191_InternalN4JSParser())) {s = 16;}

                        else if ( (LA322_2==Abstract) && (synpred191_InternalN4JSParser())) {s = 17;}

                        else if ( (LA322_2==Static) && (synpred191_InternalN4JSParser())) {s = 18;}

                        else if ( (LA322_2==As) && (synpred191_InternalN4JSParser())) {s = 19;}

                        else if ( (LA322_2==From) && (synpred191_InternalN4JSParser())) {s = 20;}

                        else if ( (LA322_2==Constructor) && (synpred191_InternalN4JSParser())) {s = 21;}

                        else if ( (LA322_2==Of) && (synpred191_InternalN4JSParser())) {s = 22;}

                        else if ( (LA322_2==Target) && (synpred191_InternalN4JSParser())) {s = 23;}

                        else if ( (LA322_2==Type) && (synpred191_InternalN4JSParser())) {s = 24;}

                        else if ( (LA322_2==Union) && (synpred191_InternalN4JSParser())) {s = 25;}

                        else if ( (LA322_2==Intersection) && (synpred191_InternalN4JSParser())) {s = 26;}

                        else if ( (LA322_2==This) && (synpred191_InternalN4JSParser())) {s = 27;}

                        else if ( (LA322_2==Promisify) && (synpred191_InternalN4JSParser())) {s = 28;}

                        else if ( (LA322_2==Await) && (synpred191_InternalN4JSParser())) {s = 29;}

                        else if ( (LA322_2==Async) && (synpred191_InternalN4JSParser())) {s = 30;}

                        else if ( (LA322_2==Implements) && (synpred191_InternalN4JSParser())) {s = 31;}

                        else if ( (LA322_2==Interface) && (synpred191_InternalN4JSParser())) {s = 32;}

                        else if ( (LA322_2==Private) && (synpred191_InternalN4JSParser())) {s = 33;}

                        else if ( (LA322_2==Protected) && (synpred191_InternalN4JSParser())) {s = 34;}

                        else if ( (LA322_2==Public) && (synpred191_InternalN4JSParser())) {s = 35;}

                        else if ( (LA322_2==Out) && (synpred191_InternalN4JSParser())) {s = 36;}

                        else if ( (LA322_2==LessThanSign) && (synpred191_InternalN4JSParser())) {s = 37;}

                        else if ( (LA322_2==RULE_DOUBLE) && (synpred191_InternalN4JSParser())) {s = 38;}

                        else if ( (LA322_2==RULE_INT) && (synpred191_InternalN4JSParser())) {s = 39;}

                        else if ( (LA322_2==RULE_BINARY_INT) && (synpred191_InternalN4JSParser())) {s = 40;}

                        else if ( (LA322_2==RULE_OCTAL_INT) && (synpred191_InternalN4JSParser())) {s = 41;}

                        else if ( (LA322_2==RULE_LEGACY_OCTAL_INT) && (synpred191_InternalN4JSParser())) {s = 42;}

                        else if ( (LA322_2==RULE_HEX_INT) && (synpred191_InternalN4JSParser())) {s = 43;}

                        else if ( (LA322_2==RULE_SCIENTIFIC_INT) && (synpred191_InternalN4JSParser())) {s = 44;}

                        else if ( (LA322_2==True) && (synpred191_InternalN4JSParser())) {s = 45;}

                        else if ( (LA322_2==False) && (synpred191_InternalN4JSParser())) {s = 46;}

                        else if ( (LA322_2==RULE_STRING) && (synpred191_InternalN4JSParser())) {s = 47;}

                        else if ( (LA322_2==Null) && (synpred191_InternalN4JSParser())) {s = 48;}

                        else if ( (LA322_2==Solidus) && (synpred191_InternalN4JSParser())) {s = 49;}

                        else if ( (LA322_2==SolidusEqualsSign) && (synpred191_InternalN4JSParser())) {s = 50;}

                        else if ( (LA322_2==LeftSquareBracket) && (synpred191_InternalN4JSParser())) {s = 51;}

                        else if ( (LA322_2==LeftCurlyBracket) && (synpred191_InternalN4JSParser())) {s = 52;}

                        else if ( (LA322_2==LeftParenthesis) && (synpred191_InternalN4JSParser())) {s = 53;}

                        else if ( (LA322_2==CommercialAt) && (synpred191_InternalN4JSParser())) {s = 54;}

                        else if ( (LA322_2==Function) && (synpred191_InternalN4JSParser())) {s = 55;}

                        else if ( (LA322_2==Class) && (synpred191_InternalN4JSParser())) {s = 56;}

                        else if ( (LA322_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred191_InternalN4JSParser())) {s = 57;}

                        else if ( (LA322_2==RULE_TEMPLATE_HEAD) && (synpred191_InternalN4JSParser())) {s = 58;}

                        else if ( (LA322_2==Delete) && (synpred191_InternalN4JSParser())) {s = 59;}

                        else if ( (LA322_2==Void) && (synpred191_InternalN4JSParser())) {s = 60;}

                        else if ( (LA322_2==Typeof) && (synpred191_InternalN4JSParser())) {s = 61;}

                        else if ( (LA322_2==PlusSignPlusSign) && (synpred191_InternalN4JSParser())) {s = 62;}

                        else if ( (LA322_2==HyphenMinusHyphenMinus) && (synpred191_InternalN4JSParser())) {s = 63;}

                        else if ( (LA322_2==PlusSign) && (synpred191_InternalN4JSParser())) {s = 64;}

                        else if ( (LA322_2==HyphenMinus) && (synpred191_InternalN4JSParser())) {s = 65;}

                        else if ( (LA322_2==Tilde) && (synpred191_InternalN4JSParser())) {s = 66;}

                        else if ( (LA322_2==ExclamationMark) && (synpred191_InternalN4JSParser())) {s = 67;}

                         
                        input.seek(index322_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA322_0 = input.LA(1);

                         
                        int index322_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA322_0==EOF||LA322_0==ExclamationMarkEqualsSignEqualsSign||(LA322_0>=LessThanSignLessThanSignEqualsSign && LA322_0<=EqualsSignEqualsSignEqualsSign)||(LA322_0>=ExclamationMarkEqualsSign && LA322_0<=AsteriskEqualsSign)||LA322_0==PlusSignEqualsSign||(LA322_0>=HyphenMinusEqualsSign && LA322_0<=SolidusEqualsSign)||LA322_0==EqualsSignEqualsSign||LA322_0==CircumflexAccentEqualsSign||(LA322_0>=In && LA322_0<=VerticalLineVerticalLine)||LA322_0==Ampersand||LA322_0==Comma||LA322_0==Semicolon||LA322_0==EqualsSign||LA322_0==QuestionMark||LA322_0==CircumflexAccent||LA322_0==VerticalLine) ) {s = 1;}

                        else if ( (LA322_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA322_0==LessThanSign) && (synpred191_InternalN4JSParser())) {s = 3;}

                        else if ( (LA322_0==LessThanSignEqualsSign) && (synpred191_InternalN4JSParser())) {s = 4;}

                        else if ( (LA322_0==GreaterThanSignEqualsSign) && (synpred191_InternalN4JSParser())) {s = 5;}

                        else if ( (LA322_0==Instanceof) && (synpred191_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index322_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 322, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_236s = "\105\uffff";
    static final String dfa_237s = "\1\1\104\uffff";
    static final String dfa_238s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_239s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_240s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_241s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_242s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final char[] dfa_238 = DFA.unpackEncodedStringToUnsignedChars(dfa_238s);
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[][] dfa_242 = unpackEncodedStringArray(dfa_242s);

    class DFA323 extends DFA {

        public DFA323(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 323;
            this.eot = dfa_236;
            this.eof = dfa_237;
            this.min = dfa_238;
            this.max = dfa_239;
            this.accept = dfa_240;
            this.special = dfa_241;
            this.transition = dfa_242;
        }
        public String getDescription() {
            return "()* loopback of 19758:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA323_0 = input.LA(1);

                         
                        int index323_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA323_0==EOF||LA323_0==ExclamationMarkEqualsSignEqualsSign||(LA323_0>=LessThanSignLessThanSignEqualsSign && LA323_0<=EqualsSignEqualsSignEqualsSign)||(LA323_0>=ExclamationMarkEqualsSign && LA323_0<=AsteriskEqualsSign)||LA323_0==PlusSignEqualsSign||(LA323_0>=HyphenMinusEqualsSign && LA323_0<=SolidusEqualsSign)||LA323_0==EqualsSignEqualsSign||LA323_0==CircumflexAccentEqualsSign||(LA323_0>=VerticalLineEqualsSign && LA323_0<=VerticalLineVerticalLine)||LA323_0==Ampersand||LA323_0==RightParenthesis||LA323_0==Comma||(LA323_0>=Colon && LA323_0<=Semicolon)||LA323_0==EqualsSign||LA323_0==QuestionMark||(LA323_0>=RightSquareBracket && LA323_0<=CircumflexAccent)||(LA323_0>=VerticalLine && LA323_0<=RightCurlyBracket)||LA323_0==RULE_ML_COMMENT||LA323_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA323_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA323_0==LessThanSign) && (synpred193_InternalN4JSParser())) {s = 3;}

                        else if ( (LA323_0==LessThanSignEqualsSign) && (synpred193_InternalN4JSParser())) {s = 4;}

                        else if ( (LA323_0==GreaterThanSignEqualsSign) && (synpred193_InternalN4JSParser())) {s = 5;}

                        else if ( (LA323_0==Instanceof) && (synpred193_InternalN4JSParser())) {s = 6;}

                        else if ( (LA323_0==In) && (synpred193_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index323_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA323_2 = input.LA(1);

                         
                        int index323_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA323_2>=4 && LA323_2<=149 && (s=T2S.M_28[LA323_2-(4)])>=0) && (synpred193_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA323_2==GreaterThanSignEqualsSign||LA323_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index323_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 323, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_243s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_244s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_245s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_246s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_247s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final short[][] dfa_247 = unpackEncodedStringArray(dfa_247s);

    class DFA324 extends DFA {

        public DFA324(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 324;
            this.eot = dfa_216;
            this.eof = dfa_217;
            this.min = dfa_243;
            this.max = dfa_244;
            this.accept = dfa_245;
            this.special = dfa_246;
            this.transition = dfa_247;
        }
        public String getDescription() {
            return "()* loopback of 19962:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA324_2 = input.LA(1);

                         
                        int index324_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA324_2==GreaterThanSignEqualsSign||LA324_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA324_2==New) && (synpred195_InternalN4JSParser())) {s = 7;}

                        else if ( (LA324_2==This_1) && (synpred195_InternalN4JSParser())) {s = 8;}

                        else if ( (LA324_2==Super) && (synpred195_InternalN4JSParser())) {s = 9;}

                        else if ( (LA324_2==RULE_IDENTIFIER) && (synpred195_InternalN4JSParser())) {s = 10;}

                        else if ( (LA324_2==Get) && (synpred195_InternalN4JSParser())) {s = 11;}

                        else if ( (LA324_2==Set) && (synpred195_InternalN4JSParser())) {s = 12;}

                        else if ( (LA324_2==Let) && (synpred195_InternalN4JSParser())) {s = 13;}

                        else if ( (LA324_2==Project) && (synpred195_InternalN4JSParser())) {s = 14;}

                        else if ( (LA324_2==External) && (synpred195_InternalN4JSParser())) {s = 15;}

                        else if ( (LA324_2==Abstract) && (synpred195_InternalN4JSParser())) {s = 16;}

                        else if ( (LA324_2==Static) && (synpred195_InternalN4JSParser())) {s = 17;}

                        else if ( (LA324_2==As) && (synpred195_InternalN4JSParser())) {s = 18;}

                        else if ( (LA324_2==From) && (synpred195_InternalN4JSParser())) {s = 19;}

                        else if ( (LA324_2==Constructor) && (synpred195_InternalN4JSParser())) {s = 20;}

                        else if ( (LA324_2==Of) && (synpred195_InternalN4JSParser())) {s = 21;}

                        else if ( (LA324_2==Target) && (synpred195_InternalN4JSParser())) {s = 22;}

                        else if ( (LA324_2==Type) && (synpred195_InternalN4JSParser())) {s = 23;}

                        else if ( (LA324_2==Union) && (synpred195_InternalN4JSParser())) {s = 24;}

                        else if ( (LA324_2==Intersection) && (synpred195_InternalN4JSParser())) {s = 25;}

                        else if ( (LA324_2==This) && (synpred195_InternalN4JSParser())) {s = 26;}

                        else if ( (LA324_2==Promisify) && (synpred195_InternalN4JSParser())) {s = 27;}

                        else if ( (LA324_2==Await) && (synpred195_InternalN4JSParser())) {s = 28;}

                        else if ( (LA324_2==Async) && (synpred195_InternalN4JSParser())) {s = 29;}

                        else if ( (LA324_2==Implements) && (synpred195_InternalN4JSParser())) {s = 30;}

                        else if ( (LA324_2==Interface) && (synpred195_InternalN4JSParser())) {s = 31;}

                        else if ( (LA324_2==Private) && (synpred195_InternalN4JSParser())) {s = 32;}

                        else if ( (LA324_2==Protected) && (synpred195_InternalN4JSParser())) {s = 33;}

                        else if ( (LA324_2==Public) && (synpred195_InternalN4JSParser())) {s = 34;}

                        else if ( (LA324_2==Out) && (synpred195_InternalN4JSParser())) {s = 35;}

                        else if ( (LA324_2==LessThanSign) && (synpred195_InternalN4JSParser())) {s = 36;}

                        else if ( (LA324_2==RULE_DOUBLE) && (synpred195_InternalN4JSParser())) {s = 37;}

                        else if ( (LA324_2==RULE_INT) && (synpred195_InternalN4JSParser())) {s = 38;}

                        else if ( (LA324_2==RULE_BINARY_INT) && (synpred195_InternalN4JSParser())) {s = 39;}

                        else if ( (LA324_2==RULE_OCTAL_INT) && (synpred195_InternalN4JSParser())) {s = 40;}

                        else if ( (LA324_2==RULE_LEGACY_OCTAL_INT) && (synpred195_InternalN4JSParser())) {s = 41;}

                        else if ( (LA324_2==RULE_HEX_INT) && (synpred195_InternalN4JSParser())) {s = 42;}

                        else if ( (LA324_2==RULE_SCIENTIFIC_INT) && (synpred195_InternalN4JSParser())) {s = 43;}

                        else if ( (LA324_2==True) && (synpred195_InternalN4JSParser())) {s = 44;}

                        else if ( (LA324_2==False) && (synpred195_InternalN4JSParser())) {s = 45;}

                        else if ( (LA324_2==RULE_STRING) && (synpred195_InternalN4JSParser())) {s = 46;}

                        else if ( (LA324_2==Null) && (synpred195_InternalN4JSParser())) {s = 47;}

                        else if ( (LA324_2==Solidus) && (synpred195_InternalN4JSParser())) {s = 48;}

                        else if ( (LA324_2==SolidusEqualsSign) && (synpred195_InternalN4JSParser())) {s = 49;}

                        else if ( (LA324_2==LeftSquareBracket) && (synpred195_InternalN4JSParser())) {s = 50;}

                        else if ( (LA324_2==LeftCurlyBracket) && (synpred195_InternalN4JSParser())) {s = 51;}

                        else if ( (LA324_2==LeftParenthesis) && (synpred195_InternalN4JSParser())) {s = 52;}

                        else if ( (LA324_2==CommercialAt) && (synpred195_InternalN4JSParser())) {s = 53;}

                        else if ( (LA324_2==Function) && (synpred195_InternalN4JSParser())) {s = 54;}

                        else if ( (LA324_2==Class) && (synpred195_InternalN4JSParser())) {s = 55;}

                        else if ( (LA324_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred195_InternalN4JSParser())) {s = 56;}

                        else if ( (LA324_2==RULE_TEMPLATE_HEAD) && (synpred195_InternalN4JSParser())) {s = 57;}

                        else if ( (LA324_2==Delete) && (synpred195_InternalN4JSParser())) {s = 58;}

                        else if ( (LA324_2==Void) && (synpred195_InternalN4JSParser())) {s = 59;}

                        else if ( (LA324_2==Typeof) && (synpred195_InternalN4JSParser())) {s = 60;}

                        else if ( (LA324_2==PlusSignPlusSign) && (synpred195_InternalN4JSParser())) {s = 61;}

                        else if ( (LA324_2==HyphenMinusHyphenMinus) && (synpred195_InternalN4JSParser())) {s = 62;}

                        else if ( (LA324_2==PlusSign) && (synpred195_InternalN4JSParser())) {s = 63;}

                        else if ( (LA324_2==HyphenMinus) && (synpred195_InternalN4JSParser())) {s = 64;}

                        else if ( (LA324_2==Tilde) && (synpred195_InternalN4JSParser())) {s = 65;}

                        else if ( (LA324_2==ExclamationMark) && (synpred195_InternalN4JSParser())) {s = 66;}

                         
                        input.seek(index324_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA324_0 = input.LA(1);

                         
                        int index324_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA324_0==EOF||LA324_0==ExclamationMarkEqualsSignEqualsSign||(LA324_0>=LessThanSignLessThanSignEqualsSign && LA324_0<=EqualsSignEqualsSignEqualsSign)||(LA324_0>=ExclamationMarkEqualsSign && LA324_0<=AsteriskEqualsSign)||LA324_0==PlusSignEqualsSign||(LA324_0>=HyphenMinusEqualsSign && LA324_0<=SolidusEqualsSign)||LA324_0==EqualsSignEqualsSign||LA324_0==CircumflexAccentEqualsSign||(LA324_0>=In && LA324_0<=VerticalLineVerticalLine)||LA324_0==Ampersand||LA324_0==Comma||LA324_0==Semicolon||LA324_0==EqualsSign||LA324_0==QuestionMark||LA324_0==CircumflexAccent||LA324_0==VerticalLine) ) {s = 1;}

                        else if ( (LA324_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA324_0==LessThanSign) && (synpred195_InternalN4JSParser())) {s = 3;}

                        else if ( (LA324_0==LessThanSignEqualsSign) && (synpred195_InternalN4JSParser())) {s = 4;}

                        else if ( (LA324_0==GreaterThanSignEqualsSign) && (synpred195_InternalN4JSParser())) {s = 5;}

                        else if ( (LA324_0==Instanceof) && (synpred195_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index324_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 324, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_248s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String dfa_249s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_250s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[][] dfa_250 = unpackEncodedStringArray(dfa_250s);

    class DFA325 extends DFA {

        public DFA325(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 325;
            this.eot = dfa_229;
            this.eof = dfa_230;
            this.min = dfa_231;
            this.max = dfa_248;
            this.accept = dfa_233;
            this.special = dfa_249;
            this.transition = dfa_250;
        }
        public String getDescription() {
            return "()* loopback of 20164:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA325_0 = input.LA(1);

                         
                        int index325_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA325_0==EOF||LA325_0==ExclamationMarkEqualsSignEqualsSign||(LA325_0>=LessThanSignLessThanSignEqualsSign && LA325_0<=EqualsSignEqualsSignEqualsSign)||(LA325_0>=ExclamationMarkEqualsSign && LA325_0<=AsteriskEqualsSign)||LA325_0==PlusSignEqualsSign||(LA325_0>=HyphenMinusEqualsSign && LA325_0<=SolidusEqualsSign)||LA325_0==EqualsSignEqualsSign||LA325_0==CircumflexAccentEqualsSign||(LA325_0>=VerticalLineEqualsSign && LA325_0<=VerticalLineVerticalLine)||LA325_0==Ampersand||LA325_0==RightParenthesis||LA325_0==Comma||(LA325_0>=Colon && LA325_0<=Semicolon)||LA325_0==EqualsSign||LA325_0==QuestionMark||(LA325_0>=RightSquareBracket && LA325_0<=CircumflexAccent)||(LA325_0>=VerticalLine && LA325_0<=RightCurlyBracket)||LA325_0==RULE_ML_COMMENT||LA325_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA325_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA325_0==LessThanSign) && (synpred197_InternalN4JSParser())) {s = 3;}

                        else if ( (LA325_0==LessThanSignEqualsSign) && (synpred197_InternalN4JSParser())) {s = 4;}

                        else if ( (LA325_0==GreaterThanSignEqualsSign) && (synpred197_InternalN4JSParser())) {s = 5;}

                        else if ( (LA325_0==Instanceof) && (synpred197_InternalN4JSParser())) {s = 6;}

                        else if ( (LA325_0==In) && (synpred197_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index325_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA325_2 = input.LA(1);

                         
                        int index325_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA325_2>=4 && LA325_2<=149 && (s=T2S.M_29[LA325_2-(4)])>=0) && (synpred197_InternalN4JSParser())) { /* 60 cases */ }
                        else if ( (LA325_2==GreaterThanSignEqualsSign||LA325_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index325_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 325, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_251s = "\1\4\35\0\43\uffff";
    static final String dfa_252s = "\1\u0095\35\0\43\uffff";
    static final String dfa_253s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_254s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_255s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_251 = DFA.unpackEncodedStringToUnsignedChars(dfa_251s);
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final short[] dfa_253 = DFA.unpackEncodedString(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[][] dfa_255 = unpackEncodedStringArray(dfa_255s);

    class DFA357 extends DFA {

        public DFA357(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 357;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_251;
            this.max = dfa_252;
            this.accept = dfa_253;
            this.special = dfa_254;
            this.transition = dfa_255;
        }
        public String getDescription() {
            return "22923:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= ruleAwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= ruleArrowExpression ) | (this_ConditionalExpression_3= ruleConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA357_1 = input.LA(1);

                         
                        int index357_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA357_2 = input.LA(1);

                         
                        int index357_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA357_3 = input.LA(1);

                         
                        int index357_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA357_4 = input.LA(1);

                         
                        int index357_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA357_5 = input.LA(1);

                         
                        int index357_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA357_6 = input.LA(1);

                         
                        int index357_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA357_7 = input.LA(1);

                         
                        int index357_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA357_8 = input.LA(1);

                         
                        int index357_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA357_9 = input.LA(1);

                         
                        int index357_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA357_10 = input.LA(1);

                         
                        int index357_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA357_11 = input.LA(1);

                         
                        int index357_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA357_12 = input.LA(1);

                         
                        int index357_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA357_13 = input.LA(1);

                         
                        int index357_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA357_14 = input.LA(1);

                         
                        int index357_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA357_15 = input.LA(1);

                         
                        int index357_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA357_16 = input.LA(1);

                         
                        int index357_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA357_17 = input.LA(1);

                         
                        int index357_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA357_18 = input.LA(1);

                         
                        int index357_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA357_19 = input.LA(1);

                         
                        int index357_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA357_20 = input.LA(1);

                         
                        int index357_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA357_21 = input.LA(1);

                         
                        int index357_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA357_22 = input.LA(1);

                         
                        int index357_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA357_23 = input.LA(1);

                         
                        int index357_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA357_24 = input.LA(1);

                         
                        int index357_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA357_25 = input.LA(1);

                         
                        int index357_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA357_26 = input.LA(1);

                         
                        int index357_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA357_27 = input.LA(1);

                         
                        int index357_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA357_28 = input.LA(1);

                         
                        int index357_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA357_29 = input.LA(1);

                         
                        int index357_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index357_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 357, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_256s = "\1\14\15\uffff";
    static final String dfa_257s = "\1\67\13\0\2\uffff";
    static final String dfa_258s = "\1\150\13\0\2\uffff";
    static final String dfa_259s = "\14\uffff\1\2\1\1";
    static final String dfa_260s = "\1\uffff\1\10\1\5\1\2\1\0\1\11\1\6\1\3\1\4\1\1\1\12\1\7\2\uffff}>";
    static final String[] dfa_261s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[][] dfa_261 = unpackEncodedStringArray(dfa_261s);

    class DFA356 extends DFA {

        public DFA356(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 356;
            this.eot = dfa_7;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_258;
            this.accept = dfa_259;
            this.special = dfa_260;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "23027:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA356_4 = input.LA(1);

                         
                        int index356_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA356_9 = input.LA(1);

                         
                        int index356_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA356_3 = input.LA(1);

                         
                        int index356_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA356_7 = input.LA(1);

                         
                        int index356_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA356_8 = input.LA(1);

                         
                        int index356_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA356_2 = input.LA(1);

                         
                        int index356_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA356_6 = input.LA(1);

                         
                        int index356_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA356_11 = input.LA(1);

                         
                        int index356_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA356_1 = input.LA(1);

                         
                        int index356_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA356_5 = input.LA(1);

                         
                        int index356_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA356_10 = input.LA(1);

                         
                        int index356_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index356_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 356, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA359 extends DFA {

        public DFA359(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 359;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_251;
            this.max = dfa_252;
            this.accept = dfa_253;
            this.special = dfa_254;
            this.transition = dfa_255;
        }
        public String getDescription() {
            return "23101:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm1_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm1_ArrowExpression ) | (this_ConditionalExpression_3= norm1_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA359_1 = input.LA(1);

                         
                        int index359_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA359_2 = input.LA(1);

                         
                        int index359_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA359_3 = input.LA(1);

                         
                        int index359_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA359_4 = input.LA(1);

                         
                        int index359_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA359_5 = input.LA(1);

                         
                        int index359_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA359_6 = input.LA(1);

                         
                        int index359_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA359_7 = input.LA(1);

                         
                        int index359_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA359_8 = input.LA(1);

                         
                        int index359_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA359_9 = input.LA(1);

                         
                        int index359_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA359_10 = input.LA(1);

                         
                        int index359_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA359_11 = input.LA(1);

                         
                        int index359_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA359_12 = input.LA(1);

                         
                        int index359_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA359_13 = input.LA(1);

                         
                        int index359_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA359_14 = input.LA(1);

                         
                        int index359_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA359_15 = input.LA(1);

                         
                        int index359_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA359_16 = input.LA(1);

                         
                        int index359_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA359_17 = input.LA(1);

                         
                        int index359_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA359_18 = input.LA(1);

                         
                        int index359_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA359_19 = input.LA(1);

                         
                        int index359_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA359_20 = input.LA(1);

                         
                        int index359_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA359_21 = input.LA(1);

                         
                        int index359_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA359_22 = input.LA(1);

                         
                        int index359_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA359_23 = input.LA(1);

                         
                        int index359_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA359_24 = input.LA(1);

                         
                        int index359_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA359_25 = input.LA(1);

                         
                        int index359_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA359_26 = input.LA(1);

                         
                        int index359_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA359_27 = input.LA(1);

                         
                        int index359_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA359_28 = input.LA(1);

                         
                        int index359_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA359_29 = input.LA(1);

                         
                        int index359_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index359_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 359, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_262s = "\1\u0099\13\0\2\uffff";
    static final String dfa_263s = "\1\uffff\1\2\1\6\1\11\1\0\1\3\1\7\1\12\1\5\1\1\1\4\1\10\2\uffff}>";
    static final String[] dfa_264s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[][] dfa_264 = unpackEncodedStringArray(dfa_264s);

    class DFA358 extends DFA {

        public DFA358(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 358;
            this.eot = dfa_7;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_262;
            this.accept = dfa_259;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "23205:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA358_4 = input.LA(1);

                         
                        int index358_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA358_9 = input.LA(1);

                         
                        int index358_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA358_1 = input.LA(1);

                         
                        int index358_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA358_5 = input.LA(1);

                         
                        int index358_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA358_10 = input.LA(1);

                         
                        int index358_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA358_8 = input.LA(1);

                         
                        int index358_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA358_2 = input.LA(1);

                         
                        int index358_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA358_6 = input.LA(1);

                         
                        int index358_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA358_11 = input.LA(1);

                         
                        int index358_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA358_3 = input.LA(1);

                         
                        int index358_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA358_7 = input.LA(1);

                         
                        int index358_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index358_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 358, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_265s = "\1\4\34\0\44\uffff";
    static final String dfa_266s = "\1\u0095\34\0\44\uffff";
    static final String dfa_267s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_268s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_269s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_265 = DFA.unpackEncodedStringToUnsignedChars(dfa_265s);
    static final char[] dfa_266 = DFA.unpackEncodedStringToUnsignedChars(dfa_266s);
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);
    static final short[][] dfa_269 = unpackEncodedStringArray(dfa_269s);

    class DFA361 extends DFA {

        public DFA361(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 361;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_265;
            this.max = dfa_266;
            this.accept = dfa_267;
            this.special = dfa_268;
            this.transition = dfa_269;
        }
        public String getDescription() {
            return "23279:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm2_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm2_ArrowExpression ) | this_YieldExpression_3= ruleYieldExpression | (this_ConditionalExpression_4= norm2_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA361_1 = input.LA(1);

                         
                        int index361_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA361_2 = input.LA(1);

                         
                        int index361_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA361_3 = input.LA(1);

                         
                        int index361_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA361_4 = input.LA(1);

                         
                        int index361_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA361_5 = input.LA(1);

                         
                        int index361_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA361_6 = input.LA(1);

                         
                        int index361_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA361_7 = input.LA(1);

                         
                        int index361_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA361_8 = input.LA(1);

                         
                        int index361_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA361_9 = input.LA(1);

                         
                        int index361_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA361_10 = input.LA(1);

                         
                        int index361_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA361_11 = input.LA(1);

                         
                        int index361_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA361_12 = input.LA(1);

                         
                        int index361_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA361_13 = input.LA(1);

                         
                        int index361_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA361_14 = input.LA(1);

                         
                        int index361_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA361_15 = input.LA(1);

                         
                        int index361_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA361_16 = input.LA(1);

                         
                        int index361_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA361_17 = input.LA(1);

                         
                        int index361_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA361_18 = input.LA(1);

                         
                        int index361_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA361_19 = input.LA(1);

                         
                        int index361_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA361_20 = input.LA(1);

                         
                        int index361_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA361_21 = input.LA(1);

                         
                        int index361_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA361_22 = input.LA(1);

                         
                        int index361_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA361_23 = input.LA(1);

                         
                        int index361_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA361_24 = input.LA(1);

                         
                        int index361_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA361_25 = input.LA(1);

                         
                        int index361_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA361_26 = input.LA(1);

                         
                        int index361_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA361_27 = input.LA(1);

                         
                        int index361_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA361_28 = input.LA(1);

                         
                        int index361_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index361_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 361, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_270s = "\1\uffff\1\6\1\1\1\7\1\2\1\10\1\3\1\11\1\0\1\4\1\12\1\5\2\uffff}>";
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);

    class DFA360 extends DFA {

        public DFA360(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 360;
            this.eot = dfa_7;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_258;
            this.accept = dfa_259;
            this.special = dfa_270;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "23392:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA360_8 = input.LA(1);

                         
                        int index360_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA360_2 = input.LA(1);

                         
                        int index360_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA360_4 = input.LA(1);

                         
                        int index360_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA360_6 = input.LA(1);

                         
                        int index360_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA360_9 = input.LA(1);

                         
                        int index360_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA360_11 = input.LA(1);

                         
                        int index360_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA360_1 = input.LA(1);

                         
                        int index360_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA360_3 = input.LA(1);

                         
                        int index360_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA360_5 = input.LA(1);

                         
                        int index360_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA360_7 = input.LA(1);

                         
                        int index360_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA360_10 = input.LA(1);

                         
                        int index360_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index360_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 360, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA363 extends DFA {

        public DFA363(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 363;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_265;
            this.max = dfa_266;
            this.accept = dfa_267;
            this.special = dfa_268;
            this.transition = dfa_269;
        }
        public String getDescription() {
            return "23466:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm3_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm3_ArrowExpression ) | this_YieldExpression_3= norm1_YieldExpression | (this_ConditionalExpression_4= norm3_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA363_1 = input.LA(1);

                         
                        int index363_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA363_2 = input.LA(1);

                         
                        int index363_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA363_3 = input.LA(1);

                         
                        int index363_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA363_4 = input.LA(1);

                         
                        int index363_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA363_5 = input.LA(1);

                         
                        int index363_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA363_6 = input.LA(1);

                         
                        int index363_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA363_7 = input.LA(1);

                         
                        int index363_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA363_8 = input.LA(1);

                         
                        int index363_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA363_9 = input.LA(1);

                         
                        int index363_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA363_10 = input.LA(1);

                         
                        int index363_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA363_11 = input.LA(1);

                         
                        int index363_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA363_12 = input.LA(1);

                         
                        int index363_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA363_13 = input.LA(1);

                         
                        int index363_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA363_14 = input.LA(1);

                         
                        int index363_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA363_15 = input.LA(1);

                         
                        int index363_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA363_16 = input.LA(1);

                         
                        int index363_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA363_17 = input.LA(1);

                         
                        int index363_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA363_18 = input.LA(1);

                         
                        int index363_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA363_19 = input.LA(1);

                         
                        int index363_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA363_20 = input.LA(1);

                         
                        int index363_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA363_21 = input.LA(1);

                         
                        int index363_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA363_22 = input.LA(1);

                         
                        int index363_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA363_23 = input.LA(1);

                         
                        int index363_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA363_24 = input.LA(1);

                         
                        int index363_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA363_25 = input.LA(1);

                         
                        int index363_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA363_26 = input.LA(1);

                         
                        int index363_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA363_27 = input.LA(1);

                         
                        int index363_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA363_28 = input.LA(1);

                         
                        int index363_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index363_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 363, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA362 extends DFA {

        public DFA362(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 362;
            this.eot = dfa_7;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_262;
            this.accept = dfa_259;
            this.special = dfa_270;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "23579:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA362_8 = input.LA(1);

                         
                        int index362_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA362_2 = input.LA(1);

                         
                        int index362_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA362_4 = input.LA(1);

                         
                        int index362_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA362_6 = input.LA(1);

                         
                        int index362_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA362_9 = input.LA(1);

                         
                        int index362_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA362_11 = input.LA(1);

                         
                        int index362_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA362_1 = input.LA(1);

                         
                        int index362_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA362_3 = input.LA(1);

                         
                        int index362_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA362_5 = input.LA(1);

                         
                        int index362_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA362_7 = input.LA(1);

                         
                        int index362_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA362_10 = input.LA(1);

                         
                        int index362_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index362_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 362, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_271s = "\114\uffff";
    static final String dfa_272s = "\1\76\113\uffff";
    static final String dfa_273s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_274s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_275s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_276s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_277s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_271 = DFA.unpackEncodedString(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final char[] dfa_273 = DFA.unpackEncodedStringToUnsignedChars(dfa_273s);
    static final char[] dfa_274 = DFA.unpackEncodedStringToUnsignedChars(dfa_274s);
    static final short[] dfa_275 = DFA.unpackEncodedString(dfa_275s);
    static final short[] dfa_276 = DFA.unpackEncodedString(dfa_276s);
    static final short[][] dfa_277 = unpackEncodedStringArray(dfa_277s);

    class DFA365 extends DFA {

        public DFA365(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 365;
            this.eot = dfa_271;
            this.eof = dfa_272;
            this.min = dfa_273;
            this.max = dfa_274;
            this.accept = dfa_275;
            this.special = dfa_276;
            this.transition = dfa_277;
        }
        public String getDescription() {
            return "23689:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA365_0 = input.LA(1);

                         
                        int index365_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA365_0>=5 && LA365_0<=126 && (s=T2S.M_30[LA365_0-(5)])>=0) && (synpred252_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA365_0==Of) ) {s = 16;}

                        
                        else if ((LA365_0>=4 && LA365_0<=149 && (s=T2S.M_31[LA365_0-(4)])>=0) && (synpred252_InternalN4JSParser())) { /* 30 cases */ }
                        else if ( (LA365_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA365_0>=15 && LA365_0<=140 && (s=T2S.M_32[LA365_0-(15)])>=0) && (synpred252_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA365_0==EOF||LA365_0==LessThanSignLessThanSignEqualsSign||LA365_0==PercentSignEqualsSign||(LA365_0>=AmpersandEqualsSign && LA365_0<=AsteriskEqualsSign)||LA365_0==PlusSignEqualsSign||LA365_0==HyphenMinusEqualsSign||LA365_0==CircumflexAccentEqualsSign||LA365_0==In||LA365_0==VerticalLineEqualsSign||LA365_0==Comma||LA365_0==Semicolon||(LA365_0>=EqualsSign && LA365_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index365_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA365_16 = input.LA(1);

                         
                        int index365_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index365_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA365_46 = input.LA(1);

                         
                        int index365_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index365_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 365, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_278s = "\1\76\117\uffff";
    static final String dfa_279s = "\1\4\55\uffff\1\0\41\uffff";
    static final String dfa_280s = "\1\u0099\55\uffff\1\0\41\uffff";
    static final String dfa_281s = "\1\uffff\55\1\1\uffff\17\1\1\2\21\uffff";
    static final String dfa_282s = "\1\0\55\uffff\1\1\41\uffff}>";
    static final String[] dfa_283s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final char[] dfa_279 = DFA.unpackEncodedStringToUnsignedChars(dfa_279s);
    static final char[] dfa_280 = DFA.unpackEncodedStringToUnsignedChars(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final short[] dfa_282 = DFA.unpackEncodedString(dfa_282s);
    static final short[][] dfa_283 = unpackEncodedStringArray(dfa_283s);

    class DFA367 extends DFA {

        public DFA367(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 367;
            this.eot = dfa_91;
            this.eof = dfa_278;
            this.min = dfa_279;
            this.max = dfa_280;
            this.accept = dfa_281;
            this.special = dfa_282;
            this.transition = dfa_283;
        }
        public String getDescription() {
            return "23751:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA367_0 = input.LA(1);

                         
                        int index367_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA367_0>=4 && LA367_0<=149 && (s=T2S.M_33[LA367_0-(4)])>=0) && (synpred254_InternalN4JSParser())) { /* 45 cases */ }
                        else if ( (LA367_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA367_0>=15 && LA367_0<=140 && (s=T2S.M_32[LA367_0-(15)])>=0) && (synpred254_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA367_0==EOF||LA367_0==LessThanSignLessThanSignEqualsSign||LA367_0==PercentSignEqualsSign||(LA367_0>=AmpersandEqualsSign && LA367_0<=AsteriskEqualsSign)||LA367_0==PlusSignEqualsSign||LA367_0==HyphenMinusEqualsSign||LA367_0==CircumflexAccentEqualsSign||LA367_0==VerticalLineEqualsSign||LA367_0==RightParenthesis||LA367_0==Comma||(LA367_0>=Colon && LA367_0<=Semicolon)||(LA367_0>=EqualsSign && LA367_0<=GreaterThanSign)||LA367_0==RightSquareBracket||LA367_0==RightCurlyBracket||LA367_0==RULE_ML_COMMENT||LA367_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index367_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA367_46 = input.LA(1);

                         
                        int index367_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index367_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 367, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_284s = "\135\uffff";
    static final String dfa_285s = "\1\2\134\uffff";
    static final String dfa_286s = "\1\4\1\0\133\uffff";
    static final String dfa_287s = "\1\u0095\1\0\133\uffff";
    static final String dfa_288s = "\2\uffff\1\2\131\uffff\1\1";
    static final String dfa_289s = "\1\uffff\1\0\133\uffff}>";
    static final String[] dfa_290s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final char[] dfa_287 = DFA.unpackEncodedStringToUnsignedChars(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[] dfa_289 = DFA.unpackEncodedString(dfa_289s);
    static final short[][] dfa_290 = unpackEncodedStringArray(dfa_290s);

    class DFA399 extends DFA {

        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = dfa_284;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_289;
            this.transition = dfa_290;
        }
        public String getDescription() {
            return "26082:3: ( ( ( LeftParenthesis )=>otherlv_1= LeftParenthesis ) ( ( (lv_args_2_0= ruleAnnotationArgument ) ) (otherlv_3= Comma ( (lv_args_4_0= ruleAnnotationArgument ) ) )* )? otherlv_5= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA399_1 = input.LA(1);

                         
                        int index399_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 92;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index399_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 399, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_291s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_292s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_293s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String dfa_294s = "\1\0\13\uffff}>";
    static final String[] dfa_295s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\6\16\uffff\1\3\2\uffff\1\7\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_291 = DFA.unpackEncodedStringToUnsignedChars(dfa_291s);
    static final char[] dfa_292 = DFA.unpackEncodedStringToUnsignedChars(dfa_292s);
    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[] dfa_294 = DFA.unpackEncodedString(dfa_294s);
    static final short[][] dfa_295 = unpackEncodedStringArray(dfa_295s);

    class DFA401 extends DFA {

        public DFA401(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 401;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_291;
            this.max = dfa_292;
            this.accept = dfa_293;
            this.special = dfa_294;
            this.transition = dfa_295;
        }
        public String getDescription() {
            return "26267:2: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayTypeRef_1= ruleArrayTypeRef | this_ThisTypeRef_2= ruleThisTypeRef | this_TypeTypeRef_3= ruleTypeTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_4= ruleArrowFunctionTypeExpression ) | this_FunctionTypeExpressionOLD_5= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_6= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_7= ruleIntersectionTypeExpressionOLD )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA401_0 = input.LA(1);

                         
                        int index401_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA401_0==Promisify||LA401_0==Target||LA401_0==Await||LA401_0==This||LA401_0==Void||LA401_0==RULE_IDENTIFIER) ) {s = 1;}

                        else if ( (LA401_0==Tilde) ) {s = 2;}

                        else if ( (LA401_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA401_0==This_1) ) {s = 4;}

                        else if ( (LA401_0==Constructor||LA401_0==Type) ) {s = 5;}

                        else if ( (LA401_0==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 6;}

                        else if ( (LA401_0==LeftCurlyBracket) ) {s = 7;}

                        else if ( (LA401_0==Union) ) {s = 8;}

                        else if ( (LA401_0==Intersection) ) {s = 9;}

                         
                        input.seek(index401_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 401, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_296s = "\1\4\1\uffff\27\0\2\uffff\61\0\4\uffff";
    static final String dfa_297s = "\1\u0095\1\uffff\27\0\2\uffff\61\0\4\uffff";
    static final String dfa_298s = "\1\uffff\1\1\27\uffff\2\4\61\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_299s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\4\uffff}>";
    static final String[] dfa_300s = {
            "\1\26\1\23\1\102\1\56\1\15\1\103\1\4\1\7\1\40\1\41\1\6\1\52\1\42\1\47\1\50\1\2\1\3\1\43\1\46\1\54\1\5\1\60\1\10\1\62\1\16\1\65\1\33\1\14\1\34\1\36\1\37\1\11\1\74\1\61\1\63\1\25\1\67\1\71\1\13\1\35\1\45\1\75\1\100\1\72\1\21\1\73\1\22\1\12\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\5\uffff\1\114\1\uffff\1\32\7\uffff\1\31\3\uffff\1\1\1\113\2\uffff\1\24\2\uffff\1\20\3\uffff\1\106\1\uffff\1\111\1\uffff\1\110\2\uffff\1\112\1\uffff\1\17\2\uffff\1\105\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);

    class DFA442 extends DFA {

        public DFA442(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 442;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "27775:2: (this_AnnotatedN4MemberDeclaration_0= ruleAnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=>this_N4GetterDeclaration_1= ruleN4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= ruleN4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= ruleN4MethodDeclaration ) | this_N4FieldDeclaration_4= ruleN4FieldDeclaration | this_N4CallableConstructorDeclaration_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA442_0 = input.LA(1);

                         
                        int index442_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA442_0>=4 && LA442_0<=126 && (s=T2S.M_35[LA442_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA442_0==LessThanSign) && (synpred274_InternalN4JSParser())) {s = 25;}

                        else if ( (LA442_0==Asterisk) && (synpred274_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA442_0>=6 && LA442_0<=149 && (s=T2S.M_36[LA442_0-(6)])>=0)) { /* 50 cases */ }
                        input.seek(index442_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA442_2 = input.LA(1);

                         
                        int index442_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA442_3 = input.LA(1);

                         
                        int index442_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA442_4 = input.LA(1);

                         
                        int index442_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA442_5 = input.LA(1);

                         
                        int index442_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA442_6 = input.LA(1);

                         
                        int index442_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA442_7 = input.LA(1);

                         
                        int index442_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA442_8 = input.LA(1);

                         
                        int index442_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA442_9 = input.LA(1);

                         
                        int index442_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA442_10 = input.LA(1);

                         
                        int index442_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA442_11 = input.LA(1);

                         
                        int index442_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA442_12 = input.LA(1);

                         
                        int index442_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA442_13 = input.LA(1);

                         
                        int index442_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA442_14 = input.LA(1);

                         
                        int index442_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA442_15 = input.LA(1);

                         
                        int index442_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA442_16 = input.LA(1);

                         
                        int index442_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA442_17 = input.LA(1);

                         
                        int index442_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA442_18 = input.LA(1);

                         
                        int index442_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA442_19 = input.LA(1);

                         
                        int index442_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA442_20 = input.LA(1);

                         
                        int index442_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA442_21 = input.LA(1);

                         
                        int index442_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA442_22 = input.LA(1);

                         
                        int index442_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA442_23 = input.LA(1);

                         
                        int index442_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA442_24 = input.LA(1);

                         
                        int index442_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA442_27 = input.LA(1);

                         
                        int index442_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA442_28 = input.LA(1);

                         
                        int index442_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA442_29 = input.LA(1);

                         
                        int index442_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA442_30 = input.LA(1);

                         
                        int index442_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA442_31 = input.LA(1);

                         
                        int index442_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA442_32 = input.LA(1);

                         
                        int index442_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA442_33 = input.LA(1);

                         
                        int index442_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA442_34 = input.LA(1);

                         
                        int index442_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA442_35 = input.LA(1);

                         
                        int index442_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA442_36 = input.LA(1);

                         
                        int index442_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA442_37 = input.LA(1);

                         
                        int index442_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA442_38 = input.LA(1);

                         
                        int index442_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA442_39 = input.LA(1);

                         
                        int index442_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA442_40 = input.LA(1);

                         
                        int index442_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA442_41 = input.LA(1);

                         
                        int index442_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA442_42 = input.LA(1);

                         
                        int index442_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA442_43 = input.LA(1);

                         
                        int index442_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA442_44 = input.LA(1);

                         
                        int index442_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA442_45 = input.LA(1);

                         
                        int index442_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA442_46 = input.LA(1);

                         
                        int index442_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA442_47 = input.LA(1);

                         
                        int index442_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA442_48 = input.LA(1);

                         
                        int index442_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA442_49 = input.LA(1);

                         
                        int index442_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA442_50 = input.LA(1);

                         
                        int index442_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA442_51 = input.LA(1);

                         
                        int index442_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA442_52 = input.LA(1);

                         
                        int index442_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA442_53 = input.LA(1);

                         
                        int index442_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA442_54 = input.LA(1);

                         
                        int index442_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA442_55 = input.LA(1);

                         
                        int index442_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA442_56 = input.LA(1);

                         
                        int index442_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA442_57 = input.LA(1);

                         
                        int index442_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA442_58 = input.LA(1);

                         
                        int index442_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA442_59 = input.LA(1);

                         
                        int index442_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA442_60 = input.LA(1);

                         
                        int index442_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA442_61 = input.LA(1);

                         
                        int index442_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA442_62 = input.LA(1);

                         
                        int index442_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA442_63 = input.LA(1);

                         
                        int index442_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA442_64 = input.LA(1);

                         
                        int index442_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA442_65 = input.LA(1);

                         
                        int index442_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA442_66 = input.LA(1);

                         
                        int index442_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA442_67 = input.LA(1);

                         
                        int index442_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA442_68 = input.LA(1);

                         
                        int index442_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA442_69 = input.LA(1);

                         
                        int index442_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA442_70 = input.LA(1);

                         
                        int index442_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA442_71 = input.LA(1);

                         
                        int index442_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA442_72 = input.LA(1);

                         
                        int index442_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA442_73 = input.LA(1);

                         
                        int index442_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA442_74 = input.LA(1);

                         
                        int index442_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA442_75 = input.LA(1);

                         
                        int index442_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index442_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 442, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA443 extends DFA {

        public DFA443(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 443;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "28051:2: (this_AnnotatedN4MemberDeclaration_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=>this_N4GetterDeclaration_1= norm1_N4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= norm1_N4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= norm1_N4MethodDeclaration ) | this_N4FieldDeclaration_4= norm1_N4FieldDeclaration | this_N4CallableConstructorDeclaration_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA443_0 = input.LA(1);

                         
                        int index443_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA443_0>=4 && LA443_0<=126 && (s=T2S.M_35[LA443_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA443_0==LessThanSign) && (synpred277_InternalN4JSParser())) {s = 25;}

                        else if ( (LA443_0==Asterisk) && (synpred277_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA443_0>=6 && LA443_0<=149 && (s=T2S.M_36[LA443_0-(6)])>=0)) { /* 50 cases */ }
                        input.seek(index443_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA443_2 = input.LA(1);

                         
                        int index443_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA443_3 = input.LA(1);

                         
                        int index443_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA443_4 = input.LA(1);

                         
                        int index443_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA443_5 = input.LA(1);

                         
                        int index443_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA443_6 = input.LA(1);

                         
                        int index443_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA443_7 = input.LA(1);

                         
                        int index443_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA443_8 = input.LA(1);

                         
                        int index443_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA443_9 = input.LA(1);

                         
                        int index443_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA443_10 = input.LA(1);

                         
                        int index443_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA443_11 = input.LA(1);

                         
                        int index443_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA443_12 = input.LA(1);

                         
                        int index443_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA443_13 = input.LA(1);

                         
                        int index443_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA443_14 = input.LA(1);

                         
                        int index443_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA443_15 = input.LA(1);

                         
                        int index443_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA443_16 = input.LA(1);

                         
                        int index443_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA443_17 = input.LA(1);

                         
                        int index443_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA443_18 = input.LA(1);

                         
                        int index443_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA443_19 = input.LA(1);

                         
                        int index443_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA443_20 = input.LA(1);

                         
                        int index443_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA443_21 = input.LA(1);

                         
                        int index443_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA443_22 = input.LA(1);

                         
                        int index443_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA443_23 = input.LA(1);

                         
                        int index443_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA443_24 = input.LA(1);

                         
                        int index443_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA443_27 = input.LA(1);

                         
                        int index443_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA443_28 = input.LA(1);

                         
                        int index443_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA443_29 = input.LA(1);

                         
                        int index443_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA443_30 = input.LA(1);

                         
                        int index443_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA443_31 = input.LA(1);

                         
                        int index443_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA443_32 = input.LA(1);

                         
                        int index443_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA443_33 = input.LA(1);

                         
                        int index443_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA443_34 = input.LA(1);

                         
                        int index443_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA443_35 = input.LA(1);

                         
                        int index443_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA443_36 = input.LA(1);

                         
                        int index443_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA443_37 = input.LA(1);

                         
                        int index443_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA443_38 = input.LA(1);

                         
                        int index443_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA443_39 = input.LA(1);

                         
                        int index443_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA443_40 = input.LA(1);

                         
                        int index443_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA443_41 = input.LA(1);

                         
                        int index443_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA443_42 = input.LA(1);

                         
                        int index443_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA443_43 = input.LA(1);

                         
                        int index443_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA443_44 = input.LA(1);

                         
                        int index443_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA443_45 = input.LA(1);

                         
                        int index443_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA443_46 = input.LA(1);

                         
                        int index443_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA443_47 = input.LA(1);

                         
                        int index443_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA443_48 = input.LA(1);

                         
                        int index443_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA443_49 = input.LA(1);

                         
                        int index443_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA443_50 = input.LA(1);

                         
                        int index443_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA443_51 = input.LA(1);

                         
                        int index443_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA443_52 = input.LA(1);

                         
                        int index443_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA443_53 = input.LA(1);

                         
                        int index443_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA443_54 = input.LA(1);

                         
                        int index443_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA443_55 = input.LA(1);

                         
                        int index443_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA443_56 = input.LA(1);

                         
                        int index443_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA443_57 = input.LA(1);

                         
                        int index443_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA443_58 = input.LA(1);

                         
                        int index443_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA443_59 = input.LA(1);

                         
                        int index443_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA443_60 = input.LA(1);

                         
                        int index443_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA443_61 = input.LA(1);

                         
                        int index443_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA443_62 = input.LA(1);

                         
                        int index443_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA443_63 = input.LA(1);

                         
                        int index443_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA443_64 = input.LA(1);

                         
                        int index443_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA443_65 = input.LA(1);

                         
                        int index443_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA443_66 = input.LA(1);

                         
                        int index443_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA443_67 = input.LA(1);

                         
                        int index443_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA443_68 = input.LA(1);

                         
                        int index443_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA443_69 = input.LA(1);

                         
                        int index443_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA443_70 = input.LA(1);

                         
                        int index443_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA443_71 = input.LA(1);

                         
                        int index443_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA443_72 = input.LA(1);

                         
                        int index443_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA443_73 = input.LA(1);

                         
                        int index443_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA443_74 = input.LA(1);

                         
                        int index443_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA443_75 = input.LA(1);

                         
                        int index443_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index443_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 443, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\1\4\27\0\2\uffff\61\0\3\uffff";
    static final String dfa_302s = "\1\u0095\27\0\2\uffff\61\0\3\uffff";
    static final String dfa_303s = "\30\uffff\2\3\61\uffff\1\1\1\2\1\4";
    static final String dfa_304s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\3\uffff}>";
    static final String[] dfa_305s = {
            "\1\25\1\22\1\101\1\55\1\14\1\102\1\3\1\6\1\37\1\40\1\5\1\51\1\41\1\46\1\47\1\1\1\2\1\42\1\45\1\53\1\4\1\57\1\7\1\61\1\15\1\64\1\32\1\13\1\33\1\35\1\36\1\10\1\73\1\60\1\62\1\24\1\66\1\70\1\12\1\34\1\44\1\74\1\77\1\71\1\20\1\72\1\21\1\11\1\67\4\uffff\1\50\1\26\1\75\1\56\1\103\1\27\1\63\1\65\21\uffff\1\76\1\43\1\52\1\54\1\100\7\uffff\1\31\7\uffff\1\30\4\uffff\1\112\2\uffff\1\23\2\uffff\1\17\3\uffff\1\105\1\uffff\1\110\1\uffff\1\107\2\uffff\1\111\1\uffff\1\16\2\uffff\1\104\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final short[][] dfa_305 = unpackEncodedStringArray(dfa_305s);

    class DFA456 extends DFA {

        public DFA456(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 456;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_304;
            this.transition = dfa_305;
        }
        public String getDescription() {
            return "28342:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= ruleFormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= ruleFieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA456_0 = input.LA(1);

                         
                        int index456_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA456_0>=4 && LA456_0<=126 && (s=T2S.M_39[LA456_0-(4)])>=0)) { /* 23 cases */ }
                        else if ( (LA456_0==LessThanSign) && (synpred283_InternalN4JSParser())) {s = 24;}

                        else if ( (LA456_0==Asterisk) && (synpred283_InternalN4JSParser())) {s = 25;}

                        
                        else if ((LA456_0>=6 && LA456_0<=149 && (s=T2S.M_40[LA456_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index456_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA456_1 = input.LA(1);

                         
                        int index456_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA456_2 = input.LA(1);

                         
                        int index456_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA456_3 = input.LA(1);

                         
                        int index456_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA456_4 = input.LA(1);

                         
                        int index456_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA456_5 = input.LA(1);

                         
                        int index456_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA456_6 = input.LA(1);

                         
                        int index456_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA456_7 = input.LA(1);

                         
                        int index456_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA456_8 = input.LA(1);

                         
                        int index456_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA456_9 = input.LA(1);

                         
                        int index456_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA456_10 = input.LA(1);

                         
                        int index456_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA456_11 = input.LA(1);

                         
                        int index456_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA456_12 = input.LA(1);

                         
                        int index456_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA456_13 = input.LA(1);

                         
                        int index456_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA456_14 = input.LA(1);

                         
                        int index456_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA456_15 = input.LA(1);

                         
                        int index456_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA456_16 = input.LA(1);

                         
                        int index456_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA456_17 = input.LA(1);

                         
                        int index456_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA456_18 = input.LA(1);

                         
                        int index456_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA456_19 = input.LA(1);

                         
                        int index456_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA456_20 = input.LA(1);

                         
                        int index456_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA456_21 = input.LA(1);

                         
                        int index456_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA456_22 = input.LA(1);

                         
                        int index456_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA456_23 = input.LA(1);

                         
                        int index456_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA456_26 = input.LA(1);

                         
                        int index456_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA456_27 = input.LA(1);

                         
                        int index456_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA456_28 = input.LA(1);

                         
                        int index456_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA456_29 = input.LA(1);

                         
                        int index456_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA456_30 = input.LA(1);

                         
                        int index456_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA456_31 = input.LA(1);

                         
                        int index456_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA456_32 = input.LA(1);

                         
                        int index456_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA456_33 = input.LA(1);

                         
                        int index456_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA456_34 = input.LA(1);

                         
                        int index456_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA456_35 = input.LA(1);

                         
                        int index456_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA456_36 = input.LA(1);

                         
                        int index456_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA456_37 = input.LA(1);

                         
                        int index456_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA456_38 = input.LA(1);

                         
                        int index456_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA456_39 = input.LA(1);

                         
                        int index456_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA456_40 = input.LA(1);

                         
                        int index456_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA456_41 = input.LA(1);

                         
                        int index456_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA456_42 = input.LA(1);

                         
                        int index456_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA456_43 = input.LA(1);

                         
                        int index456_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA456_44 = input.LA(1);

                         
                        int index456_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA456_45 = input.LA(1);

                         
                        int index456_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA456_46 = input.LA(1);

                         
                        int index456_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA456_47 = input.LA(1);

                         
                        int index456_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA456_48 = input.LA(1);

                         
                        int index456_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA456_49 = input.LA(1);

                         
                        int index456_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA456_50 = input.LA(1);

                         
                        int index456_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA456_51 = input.LA(1);

                         
                        int index456_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA456_52 = input.LA(1);

                         
                        int index456_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA456_53 = input.LA(1);

                         
                        int index456_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA456_54 = input.LA(1);

                         
                        int index456_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA456_55 = input.LA(1);

                         
                        int index456_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA456_56 = input.LA(1);

                         
                        int index456_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA456_57 = input.LA(1);

                         
                        int index456_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA456_58 = input.LA(1);

                         
                        int index456_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA456_59 = input.LA(1);

                         
                        int index456_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA456_60 = input.LA(1);

                         
                        int index456_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA456_61 = input.LA(1);

                         
                        int index456_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA456_62 = input.LA(1);

                         
                        int index456_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA456_63 = input.LA(1);

                         
                        int index456_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA456_64 = input.LA(1);

                         
                        int index456_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA456_65 = input.LA(1);

                         
                        int index456_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA456_66 = input.LA(1);

                         
                        int index456_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA456_67 = input.LA(1);

                         
                        int index456_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA456_68 = input.LA(1);

                         
                        int index456_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA456_69 = input.LA(1);

                         
                        int index456_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA456_70 = input.LA(1);

                         
                        int index456_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA456_71 = input.LA(1);

                         
                        int index456_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA456_72 = input.LA(1);

                         
                        int index456_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA456_73 = input.LA(1);

                         
                        int index456_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA456_74 = input.LA(1);

                         
                        int index456_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index456_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 456, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_306s = "\121\uffff";
    static final String dfa_307s = "\1\2\120\uffff";
    static final String dfa_308s = "\1\4\1\0\117\uffff";
    static final String dfa_309s = "\1\u0095\1\0\117\uffff";
    static final String dfa_310s = "\2\uffff\1\2\115\uffff\1\1";
    static final String dfa_311s = "\1\uffff\1\0\117\uffff}>";
    static final String[] dfa_312s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final short[] dfa_307 = DFA.unpackEncodedString(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final char[] dfa_309 = DFA.unpackEncodedStringToUnsignedChars(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final short[][] dfa_312 = unpackEncodedStringArray(dfa_312s);

    class DFA445 extends DFA {

        public DFA445(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 445;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "28396:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA445_1 = input.LA(1);

                         
                        int index445_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index445_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 445, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA449 extends DFA {

        public DFA449(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 449;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "28677:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA449_1 = input.LA(1);

                         
                        int index449_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index449_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 449, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_313s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_314s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_315s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_316s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final char[] dfa_314 = DFA.unpackEncodedStringToUnsignedChars(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA451 extends DFA {

        public DFA451(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 451;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 28761:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }

    class DFA453 extends DFA {

        public DFA453(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 453;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "28793:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA469 extends DFA {

        public DFA469(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 469;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_304;
            this.transition = dfa_305;
        }
        public String getDescription() {
            return "28956:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= norm1_FormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= norm1_FieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA469_0 = input.LA(1);

                         
                        int index469_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA469_0>=4 && LA469_0<=126 && (s=T2S.M_39[LA469_0-(4)])>=0)) { /* 23 cases */ }
                        else if ( (LA469_0==LessThanSign) && (synpred291_InternalN4JSParser())) {s = 24;}

                        else if ( (LA469_0==Asterisk) && (synpred291_InternalN4JSParser())) {s = 25;}

                        
                        else if ((LA469_0>=6 && LA469_0<=149 && (s=T2S.M_40[LA469_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index469_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA469_1 = input.LA(1);

                         
                        int index469_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA469_2 = input.LA(1);

                         
                        int index469_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA469_3 = input.LA(1);

                         
                        int index469_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA469_4 = input.LA(1);

                         
                        int index469_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA469_5 = input.LA(1);

                         
                        int index469_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA469_6 = input.LA(1);

                         
                        int index469_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA469_7 = input.LA(1);

                         
                        int index469_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA469_8 = input.LA(1);

                         
                        int index469_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA469_9 = input.LA(1);

                         
                        int index469_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA469_10 = input.LA(1);

                         
                        int index469_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA469_11 = input.LA(1);

                         
                        int index469_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA469_12 = input.LA(1);

                         
                        int index469_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA469_13 = input.LA(1);

                         
                        int index469_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA469_14 = input.LA(1);

                         
                        int index469_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA469_15 = input.LA(1);

                         
                        int index469_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA469_16 = input.LA(1);

                         
                        int index469_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA469_17 = input.LA(1);

                         
                        int index469_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA469_18 = input.LA(1);

                         
                        int index469_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA469_19 = input.LA(1);

                         
                        int index469_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA469_20 = input.LA(1);

                         
                        int index469_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA469_21 = input.LA(1);

                         
                        int index469_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA469_22 = input.LA(1);

                         
                        int index469_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA469_23 = input.LA(1);

                         
                        int index469_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA469_26 = input.LA(1);

                         
                        int index469_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA469_27 = input.LA(1);

                         
                        int index469_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA469_28 = input.LA(1);

                         
                        int index469_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA469_29 = input.LA(1);

                         
                        int index469_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA469_30 = input.LA(1);

                         
                        int index469_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA469_31 = input.LA(1);

                         
                        int index469_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA469_32 = input.LA(1);

                         
                        int index469_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA469_33 = input.LA(1);

                         
                        int index469_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA469_34 = input.LA(1);

                         
                        int index469_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA469_35 = input.LA(1);

                         
                        int index469_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA469_36 = input.LA(1);

                         
                        int index469_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA469_37 = input.LA(1);

                         
                        int index469_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA469_38 = input.LA(1);

                         
                        int index469_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA469_39 = input.LA(1);

                         
                        int index469_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA469_40 = input.LA(1);

                         
                        int index469_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA469_41 = input.LA(1);

                         
                        int index469_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA469_42 = input.LA(1);

                         
                        int index469_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA469_43 = input.LA(1);

                         
                        int index469_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA469_44 = input.LA(1);

                         
                        int index469_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA469_45 = input.LA(1);

                         
                        int index469_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA469_46 = input.LA(1);

                         
                        int index469_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA469_47 = input.LA(1);

                         
                        int index469_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA469_48 = input.LA(1);

                         
                        int index469_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA469_49 = input.LA(1);

                         
                        int index469_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA469_50 = input.LA(1);

                         
                        int index469_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA469_51 = input.LA(1);

                         
                        int index469_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA469_52 = input.LA(1);

                         
                        int index469_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA469_53 = input.LA(1);

                         
                        int index469_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA469_54 = input.LA(1);

                         
                        int index469_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA469_55 = input.LA(1);

                         
                        int index469_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA469_56 = input.LA(1);

                         
                        int index469_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA469_57 = input.LA(1);

                         
                        int index469_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA469_58 = input.LA(1);

                         
                        int index469_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA469_59 = input.LA(1);

                         
                        int index469_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA469_60 = input.LA(1);

                         
                        int index469_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA469_61 = input.LA(1);

                         
                        int index469_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA469_62 = input.LA(1);

                         
                        int index469_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA469_63 = input.LA(1);

                         
                        int index469_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA469_64 = input.LA(1);

                         
                        int index469_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA469_65 = input.LA(1);

                         
                        int index469_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA469_66 = input.LA(1);

                         
                        int index469_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA469_67 = input.LA(1);

                         
                        int index469_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA469_68 = input.LA(1);

                         
                        int index469_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA469_69 = input.LA(1);

                         
                        int index469_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA469_70 = input.LA(1);

                         
                        int index469_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA469_71 = input.LA(1);

                         
                        int index469_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA469_72 = input.LA(1);

                         
                        int index469_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA469_73 = input.LA(1);

                         
                        int index469_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA469_74 = input.LA(1);

                         
                        int index469_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 25;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index469_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 469, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\1\4\1\0\116\uffff";
    static final String dfa_318s = "\1\u0095\1\0\116\uffff";
    static final String dfa_319s = "\2\uffff\1\2\114\uffff\1\1";
    static final String dfa_320s = "\1\uffff\1\0\116\uffff}>";
    static final String[] dfa_321s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[][] dfa_321 = unpackEncodedStringArray(dfa_321s);

    class DFA458 extends DFA {

        public DFA458(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 458;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "29010:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA458_1 = input.LA(1);

                         
                        int index458_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index458_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 458, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA462 extends DFA {

        public DFA462(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 462;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "29291:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA462_1 = input.LA(1);

                         
                        int index462_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index462_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 462, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA464 extends DFA {

        public DFA464(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 464;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 29375:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }

    class DFA466 extends DFA {

        public DFA466(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 466;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "29407:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_322s = "\2\uffff\10\1\1\uffff";
    static final String dfa_323s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_324s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final short[][] dfa_324 = unpackEncodedStringArray(dfa_324s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_13;
            this.eof = dfa_322;
            this.min = dfa_313;
            this.max = dfa_323;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_324;
        }
        public String getDescription() {
            return "()* loopback of 29562:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_325s = "\1\uffff\6\15\1\uffff\5\15\1\uffff\1\15";
    static final String dfa_326s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff\1\u0099";
    static final String[] dfa_327s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\15\uffff\2\15\1\uffff\1\15\3\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15"
    };
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final char[] dfa_326 = DFA.unpackEncodedStringToUnsignedChars(dfa_326s);
    static final short[][] dfa_327 = unpackEncodedStringArray(dfa_327s);

    class DFA471 extends DFA {

        public DFA471(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 471;
            this.eot = dfa_198;
            this.eof = dfa_325;
            this.min = dfa_199;
            this.max = dfa_326;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_327;
        }
        public String getDescription() {
            return "29581:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA475 extends DFA {

        public DFA475(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 475;
            this.eot = dfa_13;
            this.eof = dfa_322;
            this.min = dfa_313;
            this.max = dfa_323;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_324;
        }
        public String getDescription() {
            return "()* loopback of 29685:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }

    class DFA476 extends DFA {

        public DFA476(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 476;
            this.eot = dfa_198;
            this.eof = dfa_325;
            this.min = dfa_199;
            this.max = dfa_326;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_327;
        }
        public String getDescription() {
            return "29704:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA480 extends DFA {

        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 29932:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }

    class DFA482 extends DFA {

        public DFA482(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 482;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "29964:5: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA485 extends DFA {

        public DFA485(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 485;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 30146:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }

    class DFA487 extends DFA {

        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "30178:5: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA495 extends DFA {

        public DFA495(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 495;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "30498:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA495_1 = input.LA(1);

                         
                        int index495_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index495_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 495, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA497 extends DFA {

        public DFA497(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 497;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "30560:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA497_1 = input.LA(1);

                         
                        int index497_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index497_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 497, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA499 extends DFA {

        public DFA499(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 499;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "30656:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA499_1 = input.LA(1);

                         
                        int index499_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index499_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 499, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA502 extends DFA {

        public DFA502(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 502;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "30752:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA502_1 = input.LA(1);

                         
                        int index502_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index502_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 502, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA512 extends DFA {

        public DFA512(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 512;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "31219:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA512_1 = input.LA(1);

                         
                        int index512_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index512_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 512, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA516 extends DFA {

        public DFA516(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 516;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "31510:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA516_1 = input.LA(1);

                         
                        int index516_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index516_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 516, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_328s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_329s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);

    class DFA526 extends DFA {

        public DFA526(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 526;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_328;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 31830:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_330s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_330 = unpackEncodedStringArray(dfa_330s);

    class DFA532 extends DFA {

        public DFA532(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 532;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_328;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 31967:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_331s = "\111\uffff";
    static final String dfa_332s = "\1\uffff\1\107\40\uffff\1\107\4\uffff\31\107\11\uffff";
    static final String dfa_333s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\11\uffff";
    static final String dfa_334s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\11\uffff";
    static final String dfa_335s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\7\1\1\2\1\1";
    static final String dfa_336s = "\1\7\1\3\40\uffff\1\30\4\uffff\1\13\1\17\1\22\1\25\1\31\1\0\1\4\1\10\1\14\1\20\1\23\1\26\1\32\1\1\1\5\1\11\1\15\1\21\1\24\1\27\1\33\1\2\1\6\1\12\1\16\11\uffff}>";
    static final String[] dfa_337s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\107\1\106\11\uffff\1\101\1\uffff\1\104\1\uffff\1\103\2\uffff\1\105\1\uffff\1\1\2\uffff\1\100\23\uffff\1\102",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_331 = DFA.unpackEncodedString(dfa_331s);
    static final short[] dfa_332 = DFA.unpackEncodedString(dfa_332s);
    static final char[] dfa_333 = DFA.unpackEncodedStringToUnsignedChars(dfa_333s);
    static final char[] dfa_334 = DFA.unpackEncodedStringToUnsignedChars(dfa_334s);
    static final short[] dfa_335 = DFA.unpackEncodedString(dfa_335s);
    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[][] dfa_337 = unpackEncodedStringArray(dfa_337s);

    class DFA536 extends DFA {

        public DFA536(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 536;
            this.eot = dfa_331;
            this.eof = dfa_332;
            this.min = dfa_333;
            this.max = dfa_334;
            this.accept = dfa_335;
            this.special = dfa_336;
            this.transition = dfa_337;
        }
        public String getDescription() {
            return "32059:2: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= ruleLiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= ruleBindingElement ) ) ) | ( (lv_value_3_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA536_44 = input.LA(1);

                         
                        int index536_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_44==EOF||LA536_44==Comma||LA536_44==EqualsSign||LA536_44==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_44==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA536_52 = input.LA(1);

                         
                        int index536_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_52==EOF||LA536_52==Comma||LA536_52==EqualsSign||LA536_52==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_52==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_52);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA536_60 = input.LA(1);

                         
                        int index536_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_60==EOF||LA536_60==Comma||LA536_60==EqualsSign||LA536_60==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_60==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA536_1 = input.LA(1);

                         
                        int index536_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_1==EOF||LA536_1==Comma||LA536_1==EqualsSign||LA536_1==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_1==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA536_45 = input.LA(1);

                         
                        int index536_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_45==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_45==EOF||LA536_45==Comma||LA536_45==EqualsSign||LA536_45==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA536_53 = input.LA(1);

                         
                        int index536_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_53==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_53==EOF||LA536_53==Comma||LA536_53==EqualsSign||LA536_53==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_53);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA536_61 = input.LA(1);

                         
                        int index536_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_61==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_61==EOF||LA536_61==Comma||LA536_61==EqualsSign||LA536_61==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_61);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA536_0 = input.LA(1);

                         
                        int index536_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA536_0>=7 && LA536_0<=126 && (s=T2S.M_43[LA536_0-(7)])>=0) && (synpred316_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA536_0==Yield) ) {s = 34;}

                        else if ( (LA536_0==Null) && (synpred316_InternalN4JSParser())) {s = 35;}

                        else if ( (LA536_0==True) && (synpred316_InternalN4JSParser())) {s = 36;}

                        else if ( (LA536_0==False) && (synpred316_InternalN4JSParser())) {s = 37;}

                        else if ( (LA536_0==Enum) && (synpred316_InternalN4JSParser())) {s = 38;}

                        
                        else if ((LA536_0>=4 && LA536_0<=86 && (s=T2S.M_44[LA536_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA536_0==RULE_STRING) && (synpred316_InternalN4JSParser())) {s = 64;}

                        else if ( (LA536_0==RULE_DOUBLE) && (synpred316_InternalN4JSParser())) {s = 65;}

                        else if ( (LA536_0==RULE_INT) && (synpred316_InternalN4JSParser())) {s = 66;}

                        else if ( (LA536_0==RULE_OCTAL_INT) && (synpred316_InternalN4JSParser())) {s = 67;}

                        else if ( (LA536_0==RULE_HEX_INT) && (synpred316_InternalN4JSParser())) {s = 68;}

                        else if ( (LA536_0==RULE_SCIENTIFIC_INT) && (synpred316_InternalN4JSParser())) {s = 69;}

                        else if ( (LA536_0==LeftSquareBracket) && (synpred316_InternalN4JSParser())) {s = 70;}

                        else if ( (LA536_0==CommercialAt) ) {s = 71;}

                         
                        input.seek(index536_0);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA536_46 = input.LA(1);

                         
                        int index536_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_46==EOF||LA536_46==Comma||LA536_46==EqualsSign||LA536_46==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_46==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA536_54 = input.LA(1);

                         
                        int index536_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_54==EOF||LA536_54==Comma||LA536_54==EqualsSign||LA536_54==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_54==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_54);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA536_62 = input.LA(1);

                         
                        int index536_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_62==EOF||LA536_62==Comma||LA536_62==EqualsSign||LA536_62==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_62==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_62);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA536_39 = input.LA(1);

                         
                        int index536_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_39==EOF||LA536_39==Comma||LA536_39==EqualsSign||LA536_39==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_39==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_39);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA536_47 = input.LA(1);

                         
                        int index536_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_47==EOF||LA536_47==Comma||LA536_47==EqualsSign||LA536_47==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_47==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_47);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA536_55 = input.LA(1);

                         
                        int index536_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_55==EOF||LA536_55==Comma||LA536_55==EqualsSign||LA536_55==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_55==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA536_63 = input.LA(1);

                         
                        int index536_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_63==EOF||LA536_63==Comma||LA536_63==EqualsSign||LA536_63==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_63==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_63);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA536_40 = input.LA(1);

                         
                        int index536_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_40==EOF||LA536_40==Comma||LA536_40==EqualsSign||LA536_40==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_40==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_40);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA536_48 = input.LA(1);

                         
                        int index536_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_48==EOF||LA536_48==Comma||LA536_48==EqualsSign||LA536_48==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_48==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_48);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA536_56 = input.LA(1);

                         
                        int index536_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_56==EOF||LA536_56==Comma||LA536_56==EqualsSign||LA536_56==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_56==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA536_41 = input.LA(1);

                         
                        int index536_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_41==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_41==EOF||LA536_41==Comma||LA536_41==EqualsSign||LA536_41==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA536_49 = input.LA(1);

                         
                        int index536_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_49==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_49==EOF||LA536_49==Comma||LA536_49==EqualsSign||LA536_49==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA536_57 = input.LA(1);

                         
                        int index536_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_57==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                        else if ( (LA536_57==EOF||LA536_57==Comma||LA536_57==EqualsSign||LA536_57==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index536_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA536_42 = input.LA(1);

                         
                        int index536_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_42==EOF||LA536_42==Comma||LA536_42==EqualsSign||LA536_42==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_42==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA536_50 = input.LA(1);

                         
                        int index536_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_50==EOF||LA536_50==Comma||LA536_50==EqualsSign||LA536_50==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_50==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA536_58 = input.LA(1);

                         
                        int index536_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_58==EOF||LA536_58==Comma||LA536_58==EqualsSign||LA536_58==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_58==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA536_34 = input.LA(1);

                         
                        int index536_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_34==EOF||LA536_34==Comma||LA536_34==EqualsSign||LA536_34==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_34==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA536_43 = input.LA(1);

                         
                        int index536_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_43==EOF||LA536_43==Comma||LA536_43==EqualsSign||LA536_43==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_43==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_43);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA536_51 = input.LA(1);

                         
                        int index536_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_51==EOF||LA536_51==Comma||LA536_51==EqualsSign||LA536_51==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_51==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_51);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA536_59 = input.LA(1);

                         
                        int index536_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA536_59==EOF||LA536_59==Comma||LA536_59==EqualsSign||LA536_59==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA536_59==Colon) && (synpred316_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index536_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 536, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_338s = "\1\4\1\140\45\uffff\31\140\11\uffff";
    static final String dfa_339s = "\1\u0095\1\160\45\uffff\31\160\11\uffff";
    static final String dfa_340s = "\2\uffff\45\1\31\uffff\7\1\1\2\1\1";
    static final String dfa_341s = "\1\6\1\23\45\uffff\1\27\1\0\1\3\1\7\1\12\1\15\1\20\1\24\1\30\1\1\1\4\1\10\1\13\1\16\1\21\1\25\1\31\1\2\1\5\1\11\1\14\1\17\1\22\1\26\1\32\11\uffff}>";
    static final String[] dfa_342s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\107\1\106\11\uffff\1\101\1\uffff\1\104\1\uffff\1\103\2\uffff\1\105\1\uffff\1\1\2\uffff\1\100\23\uffff\1\102",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[][] dfa_342 = unpackEncodedStringArray(dfa_342s);

    class DFA537 extends DFA {

        public DFA537(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 537;
            this.eot = dfa_331;
            this.eof = dfa_331;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_342;
        }
        public String getDescription() {
            return "32149:2: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= norm1_BindingElement ) ) ) | ( (lv_value_3_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA537_40 = input.LA(1);

                         
                        int index537_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_40==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_40==Comma||LA537_40==EqualsSign||LA537_40==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA537_48 = input.LA(1);

                         
                        int index537_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_48==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_48==Comma||LA537_48==EqualsSign||LA537_48==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA537_56 = input.LA(1);

                         
                        int index537_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_56==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_56==Comma||LA537_56==EqualsSign||LA537_56==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_56);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA537_41 = input.LA(1);

                         
                        int index537_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_41==Comma||LA537_41==EqualsSign||LA537_41==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_41==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA537_49 = input.LA(1);

                         
                        int index537_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_49==Comma||LA537_49==EqualsSign||LA537_49==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_49==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA537_57 = input.LA(1);

                         
                        int index537_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_57==Comma||LA537_57==EqualsSign||LA537_57==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_57==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_57);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA537_0 = input.LA(1);

                         
                        int index537_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA537_0>=7 && LA537_0<=126 && (s=T2S.M_45[LA537_0-(7)])>=0) && (synpred317_InternalN4JSParser())) { /* 38 cases */ }
                        
                        else if ((LA537_0>=4 && LA537_0<=86 && (s=T2S.M_44[LA537_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA537_0==RULE_STRING) && (synpred317_InternalN4JSParser())) {s = 64;}

                        else if ( (LA537_0==RULE_DOUBLE) && (synpred317_InternalN4JSParser())) {s = 65;}

                        else if ( (LA537_0==RULE_INT) && (synpred317_InternalN4JSParser())) {s = 66;}

                        else if ( (LA537_0==RULE_OCTAL_INT) && (synpred317_InternalN4JSParser())) {s = 67;}

                        else if ( (LA537_0==RULE_HEX_INT) && (synpred317_InternalN4JSParser())) {s = 68;}

                        else if ( (LA537_0==RULE_SCIENTIFIC_INT) && (synpred317_InternalN4JSParser())) {s = 69;}

                        else if ( (LA537_0==LeftSquareBracket) && (synpred317_InternalN4JSParser())) {s = 70;}

                        else if ( (LA537_0==CommercialAt) ) {s = 71;}

                         
                        input.seek(index537_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA537_42 = input.LA(1);

                         
                        int index537_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_42==Comma||LA537_42==EqualsSign||LA537_42==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_42==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_42);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA537_50 = input.LA(1);

                         
                        int index537_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_50==Comma||LA537_50==EqualsSign||LA537_50==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_50==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA537_58 = input.LA(1);

                         
                        int index537_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_58==Comma||LA537_58==EqualsSign||LA537_58==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_58==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_58);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA537_43 = input.LA(1);

                         
                        int index537_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_43==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_43==Comma||LA537_43==EqualsSign||LA537_43==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA537_51 = input.LA(1);

                         
                        int index537_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_51==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_51==Comma||LA537_51==EqualsSign||LA537_51==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA537_59 = input.LA(1);

                         
                        int index537_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_59==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_59==Comma||LA537_59==EqualsSign||LA537_59==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_59);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA537_44 = input.LA(1);

                         
                        int index537_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_44==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_44==Comma||LA537_44==EqualsSign||LA537_44==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA537_52 = input.LA(1);

                         
                        int index537_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_52==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_52==Comma||LA537_52==EqualsSign||LA537_52==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA537_60 = input.LA(1);

                         
                        int index537_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_60==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_60==Comma||LA537_60==EqualsSign||LA537_60==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_60);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA537_45 = input.LA(1);

                         
                        int index537_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_45==Comma||LA537_45==EqualsSign||LA537_45==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_45==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_45);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA537_53 = input.LA(1);

                         
                        int index537_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_53==Comma||LA537_53==EqualsSign||LA537_53==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_53==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_53);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA537_61 = input.LA(1);

                         
                        int index537_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_61==Comma||LA537_61==EqualsSign||LA537_61==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_61==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_61);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA537_1 = input.LA(1);

                         
                        int index537_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_1==Comma||LA537_1==EqualsSign||LA537_1==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_1==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_1);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA537_46 = input.LA(1);

                         
                        int index537_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_46==Comma||LA537_46==EqualsSign||LA537_46==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_46==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA537_54 = input.LA(1);

                         
                        int index537_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_54==Comma||LA537_54==EqualsSign||LA537_54==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_54==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_54);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA537_62 = input.LA(1);

                         
                        int index537_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_62==Comma||LA537_62==EqualsSign||LA537_62==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA537_62==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index537_62);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA537_39 = input.LA(1);

                         
                        int index537_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_39==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_39==Comma||LA537_39==EqualsSign||LA537_39==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_39);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA537_47 = input.LA(1);

                         
                        int index537_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_47==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_47==Comma||LA537_47==EqualsSign||LA537_47==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA537_55 = input.LA(1);

                         
                        int index537_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_55==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_55==Comma||LA537_55==EqualsSign||LA537_55==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_55);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA537_63 = input.LA(1);

                         
                        int index537_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA537_63==Colon) && (synpred317_InternalN4JSParser())) {s = 72;}

                        else if ( (LA537_63==Comma||LA537_63==EqualsSign||LA537_63==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index537_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 537, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_343s = "\22\uffff";
    static final String dfa_344s = "\1\4\1\0\20\uffff";
    static final String dfa_345s = "\1\176\1\0\20\uffff";
    static final String dfa_346s = "\2\uffff\1\2\1\3\14\uffff\1\1\1\4";
    static final String dfa_347s = "\1\uffff\1\0\20\uffff}>";
    static final String[] dfa_348s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_343 = DFA.unpackEncodedString(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final char[] dfa_345 = DFA.unpackEncodedStringToUnsignedChars(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final short[][] dfa_348 = unpackEncodedStringArray(dfa_348s);

    class DFA550 extends DFA {

        public DFA550(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 550;
            this.eot = dfa_343;
            this.eof = dfa_343;
            this.min = dfa_344;
            this.max = dfa_345;
            this.accept = dfa_346;
            this.special = dfa_347;
            this.transition = dfa_348;
        }
        public String getDescription() {
            return "33037:2: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_0= ruleArrowFunctionTypeExpression ) | this_ArrayTypeRef_1= ruleArrayTypeRef | this_TypeRefWithModifiers_2= ruleTypeRefWithModifiers | (otherlv_3= LeftParenthesis this_TypeRef_4= ruleTypeRef otherlv_5= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA550_1 = input.LA(1);

                         
                        int index550_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_InternalN4JSParser()) ) {s = 16;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index550_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 550, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_349s = "\173\uffff";
    static final String dfa_350s = "\1\2\172\uffff";
    static final String dfa_351s = "\1\4\1\0\171\uffff";
    static final String dfa_352s = "\1\u0099\1\0\171\uffff";
    static final String dfa_353s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_354s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_355s = {
            "\114\2\1\uffff\21\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final char[] dfa_351 = DFA.unpackEncodedStringToUnsignedChars(dfa_351s);
    static final char[] dfa_352 = DFA.unpackEncodedStringToUnsignedChars(dfa_352s);
    static final short[] dfa_353 = DFA.unpackEncodedString(dfa_353s);
    static final short[] dfa_354 = DFA.unpackEncodedString(dfa_354s);
    static final short[][] dfa_355 = unpackEncodedStringArray(dfa_355s);

    class DFA551 extends DFA {

        public DFA551(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 551;
            this.eot = dfa_349;
            this.eof = dfa_350;
            this.min = dfa_351;
            this.max = dfa_352;
            this.accept = dfa_353;
            this.special = dfa_354;
            this.transition = dfa_355;
        }
        public String getDescription() {
            return "33121:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA551_1 = input.LA(1);

                         
                        int index551_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index551_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 551, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_356s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_356 = unpackEncodedStringArray(dfa_356s);

    class DFA553 extends DFA {

        public DFA553(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 553;
            this.eot = dfa_349;
            this.eof = dfa_350;
            this.min = dfa_351;
            this.max = dfa_352;
            this.accept = dfa_353;
            this.special = dfa_354;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "33178:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA553_1 = input.LA(1);

                         
                        int index553_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index553_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 553, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_357s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_358s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_359s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_360s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_361s = "\1\1\1\3\12\uffff\1\2\1\uffff\1\10\1\0\1\7\1\6\1\11\1\4\1\5\11\uffff}>";
    static final String[] dfa_362s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\16\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final char[] dfa_358 = DFA.unpackEncodedStringToUnsignedChars(dfa_358s);
    static final char[] dfa_359 = DFA.unpackEncodedStringToUnsignedChars(dfa_359s);
    static final short[] dfa_360 = DFA.unpackEncodedString(dfa_360s);
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[][] dfa_362 = unpackEncodedStringArray(dfa_362s);

    class DFA566 extends DFA {

        public DFA566(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 566;
            this.eot = dfa_46;
            this.eof = dfa_357;
            this.min = dfa_358;
            this.max = dfa_359;
            this.accept = dfa_360;
            this.special = dfa_361;
            this.transition = dfa_362;
        }
        public String getDescription() {
            return "33806:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA566_15 = input.LA(1);

                         
                        int index566_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_15==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA566_15==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA566_0 = input.LA(1);

                         
                        int index566_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA566_0>=11 && LA566_0<=126 && (s=T2S.M_47[LA566_0-(11)])>=0) && (synpred325_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA566_0==Constructor) ) {s = 12;}

                        else if ( (LA566_0==Of) && (synpred325_InternalN4JSParser())) {s = 13;}

                        else if ( (LA566_0==Target) ) {s = 14;}

                        else if ( (LA566_0==Type) ) {s = 15;}

                        else if ( (LA566_0==Union) ) {s = 16;}

                        else if ( (LA566_0==Intersection) ) {s = 17;}

                        else if ( (LA566_0==This) ) {s = 18;}

                        else if ( (LA566_0==Promisify) ) {s = 19;}

                        else if ( (LA566_0==Await) ) {s = 20;}

                        else if ( (LA566_0==Async) && (synpred325_InternalN4JSParser())) {s = 21;}

                        else if ( (LA566_0==Implements) && (synpred325_InternalN4JSParser())) {s = 22;}

                        else if ( (LA566_0==Interface) && (synpred325_InternalN4JSParser())) {s = 23;}

                        else if ( (LA566_0==Private) && (synpred325_InternalN4JSParser())) {s = 24;}

                        else if ( (LA566_0==Protected) && (synpred325_InternalN4JSParser())) {s = 25;}

                        else if ( (LA566_0==Public) && (synpred325_InternalN4JSParser())) {s = 26;}

                        else if ( (LA566_0==Out) && (synpred325_InternalN4JSParser())) {s = 27;}

                        else if ( (LA566_0==This_1||LA566_0==Void||LA566_0==LeftParenthesis||LA566_0==LeftSquareBracket||LA566_0==LeftCurlyBracket||LA566_0==Tilde) ) {s = 28;}

                         
                        input.seek(index566_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA566_12 = input.LA(1);

                         
                        int index566_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA566_12==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA566_1 = input.LA(1);

                         
                        int index566_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_1==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                        else if ( (LA566_1==EOF||LA566_1==Ampersand||LA566_1==RightParenthesis||(LA566_1>=PlusSign && LA566_1<=Comma)||LA566_1==FullStop||(LA566_1>=LessThanSign && LA566_1<=EqualsSign)||LA566_1==QuestionMark||LA566_1==VerticalLine) ) {s = 28;}

                         
                        input.seek(index566_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA566_19 = input.LA(1);

                         
                        int index566_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_19==EOF||LA566_19==Ampersand||LA566_19==RightParenthesis||(LA566_19>=PlusSign && LA566_19<=Comma)||(LA566_19>=LessThanSign && LA566_19<=EqualsSign)||LA566_19==QuestionMark||LA566_19==VerticalLine) ) {s = 28;}

                        else if ( (LA566_19==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA566_20 = input.LA(1);

                         
                        int index566_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_20==EOF||LA566_20==Ampersand||LA566_20==RightParenthesis||(LA566_20>=PlusSign && LA566_20<=Comma)||(LA566_20>=LessThanSign && LA566_20<=EqualsSign)||LA566_20==QuestionMark||LA566_20==VerticalLine) ) {s = 28;}

                        else if ( (LA566_20==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA566_17 = input.LA(1);

                         
                        int index566_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_17==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                        else if ( (LA566_17==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index566_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA566_16 = input.LA(1);

                         
                        int index566_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA566_16==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA566_14 = input.LA(1);

                         
                        int index566_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_14==EOF||LA566_14==Ampersand||LA566_14==RightParenthesis||(LA566_14>=PlusSign && LA566_14<=Comma)||(LA566_14>=LessThanSign && LA566_14<=EqualsSign)||LA566_14==QuestionMark||LA566_14==VerticalLine) ) {s = 28;}

                        else if ( (LA566_14==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index566_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA566_18 = input.LA(1);

                         
                        int index566_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA566_18==Colon) && (synpred325_InternalN4JSParser())) {s = 29;}

                        else if ( (LA566_18==EOF||LA566_18==Ampersand||LA566_18==RightParenthesis||(LA566_18>=PlusSign && LA566_18<=Comma)||(LA566_18>=LessThanSign && LA566_18<=EqualsSign)||LA566_18==QuestionMark||LA566_18==VerticalLine) ) {s = 28;}

                         
                        input.seek(index566_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 566, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_363s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_363 = unpackEncodedStringArray(dfa_363s);

    class DFA573 extends DFA {

        public DFA573(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 573;
            this.eot = dfa_349;
            this.eof = dfa_350;
            this.min = dfa_351;
            this.max = dfa_352;
            this.accept = dfa_353;
            this.special = dfa_354;
            this.transition = dfa_363;
        }
        public String getDescription() {
            return "34310:3: ( ( LessThanSign )=>this_TypeArguments_1= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA573_1 = input.LA(1);

                         
                        int index573_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index573_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 573, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_364s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_365s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_366s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_367s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_368s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_364 = DFA.unpackEncodedStringToUnsignedChars(dfa_364s);
    static final char[] dfa_365 = DFA.unpackEncodedStringToUnsignedChars(dfa_365s);
    static final short[] dfa_366 = DFA.unpackEncodedString(dfa_366s);
    static final short[] dfa_367 = DFA.unpackEncodedString(dfa_367s);
    static final short[][] dfa_368 = unpackEncodedStringArray(dfa_368s);

    class DFA577 extends DFA {

        public DFA577(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 577;
            this.eot = dfa_229;
            this.eof = dfa_229;
            this.min = dfa_364;
            this.max = dfa_365;
            this.accept = dfa_366;
            this.special = dfa_367;
            this.transition = dfa_368;
        }
        public String getDescription() {
            return "34460:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA577_0 = input.LA(1);

                         
                        int index577_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA577_0==Get) ) {s = 1;}

                        else if ( (LA577_0==Set) ) {s = 2;}

                        else if ( (LA577_0==LessThanSign) && (synpred330_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA577_0>=4 && LA577_0<=126 && (s=T2S.M_48[LA577_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index577_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA577_1 = input.LA(1);

                         
                        int index577_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_InternalN4JSParser()) ) {s = 65;}

                        else if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA577_2 = input.LA(1);

                         
                        int index577_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 67;}

                        else if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA577_4 = input.LA(1);

                         
                        int index577_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA577_5 = input.LA(1);

                         
                        int index577_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA577_6 = input.LA(1);

                         
                        int index577_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA577_7 = input.LA(1);

                         
                        int index577_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA577_8 = input.LA(1);

                         
                        int index577_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA577_9 = input.LA(1);

                         
                        int index577_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA577_10 = input.LA(1);

                         
                        int index577_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA577_11 = input.LA(1);

                         
                        int index577_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA577_12 = input.LA(1);

                         
                        int index577_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA577_13 = input.LA(1);

                         
                        int index577_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA577_14 = input.LA(1);

                         
                        int index577_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA577_15 = input.LA(1);

                         
                        int index577_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA577_16 = input.LA(1);

                         
                        int index577_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA577_17 = input.LA(1);

                         
                        int index577_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA577_18 = input.LA(1);

                         
                        int index577_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA577_19 = input.LA(1);

                         
                        int index577_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA577_20 = input.LA(1);

                         
                        int index577_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA577_21 = input.LA(1);

                         
                        int index577_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA577_22 = input.LA(1);

                         
                        int index577_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA577_23 = input.LA(1);

                         
                        int index577_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA577_24 = input.LA(1);

                         
                        int index577_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA577_25 = input.LA(1);

                         
                        int index577_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA577_26 = input.LA(1);

                         
                        int index577_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA577_27 = input.LA(1);

                         
                        int index577_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA577_28 = input.LA(1);

                         
                        int index577_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA577_29 = input.LA(1);

                         
                        int index577_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA577_30 = input.LA(1);

                         
                        int index577_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA577_31 = input.LA(1);

                         
                        int index577_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA577_32 = input.LA(1);

                         
                        int index577_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA577_33 = input.LA(1);

                         
                        int index577_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA577_34 = input.LA(1);

                         
                        int index577_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA577_35 = input.LA(1);

                         
                        int index577_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA577_36 = input.LA(1);

                         
                        int index577_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA577_37 = input.LA(1);

                         
                        int index577_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA577_38 = input.LA(1);

                         
                        int index577_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA577_39 = input.LA(1);

                         
                        int index577_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA577_40 = input.LA(1);

                         
                        int index577_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA577_41 = input.LA(1);

                         
                        int index577_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA577_42 = input.LA(1);

                         
                        int index577_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA577_43 = input.LA(1);

                         
                        int index577_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA577_44 = input.LA(1);

                         
                        int index577_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA577_45 = input.LA(1);

                         
                        int index577_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA577_46 = input.LA(1);

                         
                        int index577_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA577_47 = input.LA(1);

                         
                        int index577_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA577_48 = input.LA(1);

                         
                        int index577_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA577_49 = input.LA(1);

                         
                        int index577_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA577_50 = input.LA(1);

                         
                        int index577_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA577_51 = input.LA(1);

                         
                        int index577_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA577_52 = input.LA(1);

                         
                        int index577_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA577_53 = input.LA(1);

                         
                        int index577_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA577_54 = input.LA(1);

                         
                        int index577_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA577_55 = input.LA(1);

                         
                        int index577_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA577_56 = input.LA(1);

                         
                        int index577_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA577_57 = input.LA(1);

                         
                        int index577_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA577_58 = input.LA(1);

                         
                        int index577_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA577_59 = input.LA(1);

                         
                        int index577_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA577_60 = input.LA(1);

                         
                        int index577_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA577_61 = input.LA(1);

                         
                        int index577_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA577_62 = input.LA(1);

                         
                        int index577_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA577_63 = input.LA(1);

                         
                        int index577_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA577_64 = input.LA(1);

                         
                        int index577_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index577_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 577, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA647 extends DFA {

        public DFA647(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 647;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "13722:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA650 extends DFA {

        public DFA650(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 650;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "13932:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA652 extends DFA {

        public DFA652(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 652;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "14007:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA655 extends DFA {

        public DFA655(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 655;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "14217:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA657 extends DFA {

        public DFA657(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 657;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "14299:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA659 extends DFA {

        public DFA659(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 659;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "14700:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA661 extends DFA {

        public DFA661(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 661;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "14968:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA663 extends DFA {

        public DFA663(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 663;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "15369:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA697 extends DFA {

        public DFA697(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 697;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 27974:5: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA699 extends DFA {

        public DFA699(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 699;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "27982:5: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA703 extends DFA {

        public DFA703(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 703;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 28250:5: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA705 extends DFA {

        public DFA705(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 705;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "28258:5: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA709 extends DFA {

        public DFA709(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 709;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 28715:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA711 extends DFA {

        public DFA711(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 711;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "28723:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA715 extends DFA {

        public DFA715(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 715;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 29329:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA717 extends DFA {

        public DFA717(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 717;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_192;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_11;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "29337:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000010440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000000000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024C0020440000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024C0000440000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002440000440000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_18;
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x4002480000440000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24840507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x000F849090000130L,0x57A2480830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x000F849090000130L,0x57A2480810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24840407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x040D048895184D30L,0x4002400000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x2000000000000000L,0x4000000000200000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002480030440000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002480010440000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x4002480010440000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0008040090000102L,0x4000000000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 42, 37, 47, -1, 44, 48, 50, 33, -1, -1, 32, -1, -1, 54, -1, 49, 31, -1, -1, -1, 51, -1, 34, -1, 39, -1, 46, 45, -1, -1, -1, -1, -1, -1, -1, 41, -1, 27, 43, -1, -1, -1, 36, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, 28, 30, -1, 52, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26};
	final static int[] M_2 = { 6, -1, -1, -1, -1, 38, 33, 42, -1, 40, 17, 10, 13, 78, 85, 12, 23, 88, -1, -1, 8, 9, 65, 20, 19, 11, 80, 14, 82, 35, 67, 22, 41, 79, -1, 16, 15, 57, 47, 83, 37, 76, 28, 39, 89, 87, 18, 32, 59, 46, 56, 36, 66, 81, -1, -1, -1, -1, 77, 29, 25, 45, 43, 30, 84, 24, -1, -1, -1, -1, -1, 68, -1, 69, -1, 61, -1, -1, -1, -1, -1, -1, -1, 31, 75, 74, -1, 34, -1, -1, 73, -1, -1, 44, -1, -1, 70, -1, 71, -1, 60, -1, 26, 48, -1, -1, -1, 7, 62, -1, -1, 21, -1, 86, 72, -1, -1, -1, 49, -1, 54, 51, 52, 53, -1, 55, -1, 27, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 63, -1, -1, -1, -1, -1, -1, -1, -1, 50};
	final static int[] M_3 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_4 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_6 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_9 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_16 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 49, -1, -1, -1, 26, 10, 53, -1, -1, 28, -1, 13, -1, 18, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_17 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 49, -1, -1, -1, 25, 9, 53, -1, -1, 27, -1, 12, -1, 17, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_18 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_19 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 14, 11, 61, 34, 5, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 15, 17, 18, 19, 48, 37, 39, 13, 43, 45, 3, 16, 25, 49, 58, 46, 9, 47, 10, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 73, -1, -1, 12, -1, -1, 8, -1, -1, -1, 68, -1, 71, -1, 70, -1, -1, 72, -1, 7, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_22 = { 13, 10, 60, 33, 4, 61, 63, 54, 19, 20, 53, 29, 21, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 14, 16, 17, 18, 47, 36, 38, 12, 42, 44, 2, 15, 24, 48, 57, 45, 8, 46, 9, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, 11, -1, -1, 7, -1, -1, -1, 67, -1, 70, -1, 69, -1, -1, 71, -1, 6, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68};
	final static int[] M_24 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_25 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_26 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_27 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_28 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_29 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 48, 9, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 11, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_30 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_31 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_32 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_33 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, -1, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_35 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_36 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 73, -1, 72, -1, -1, 74, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71};
	final static int[] M_39 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_40 = { 65, 45, -1, 66, -1, -1, 31, 32, -1, 41, 33, 38, 39, -1, -1, 34, 37, 43, -1, 47, -1, 49, -1, 52, 26, -1, 27, 29, 30, -1, 59, 48, 50, -1, 54, 56, -1, 28, 36, 60, 63, 57, -1, 58, -1, -1, 55, -1, -1, -1, -1, 40, -1, 61, 46, 67, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 35, 42, 44, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 72, -1, 71, -1, -1, 73, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_43 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_44 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_45 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_47 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_48 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}